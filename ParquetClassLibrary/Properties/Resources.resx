<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DirectionAbove" xml:space="preserve">
    <value>above</value>
    <comment>Warning string.</comment>
  </data>
  <data name="DirectionBelow" xml:space="preserve">
    <value>below</value>
    <comment>Warning string.</comment>
  </data>
  <data name="DirectionEast" xml:space="preserve">
    <value>east</value>
    <comment>Warning string.</comment>
  </data>
  <data name="DirectionNorth" xml:space="preserve">
    <value>north</value>
    <comment>Warning string.</comment>
  </data>
  <data name="DirectionSouth" xml:space="preserve">
    <value>south</value>
    <comment>Warning string.</comment>
  </data>
  <data name="DirectionWest" xml:space="preserve">
    <value>west</value>
    <comment>Warning string.</comment>
  </data>
  <data name="ErrorCannotAdd" xml:space="preserve">
    <value>Tried to add already-contained {0} '{1}'.  Did you mean to call Replace?</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorCannotConvert" xml:space="preserve">
    <value>Could not convert '{0}' to {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorCannotParse" xml:space="preserve">
    <value>Could not parse '{0}' as {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorCannotRemove" xml:space="preserve">
    <value>Tried to remove {0} with ID {1}, but it is not contained in this collection.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorCannotReplace" xml:space="preserve">
    <value>Tried to replace non-contained {0} '{1}'.  Did you mean to call Add?</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorClearAllFirst" xml:space="preserve">
    <value>You must clear the model database before reloading it.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorEmptyCollection" xml:space="preserve">
    <value>Tried to retrive {0} from {1} but the collection is empty.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorInvalidCast" xml:space="preserve">
    <value>{0} is of type {1} but must be of type {2}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorInvalidPosition" xml:space="preserve">
    <value>Invalid position: {0} is not within {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorLoading" xml:space="preserve">
    <value>An error occurred while trying to load.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorModelNotFound" xml:space="preserve">
    <value>No model of type {0} exists for ID {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorMustBeNonNegative" xml:space="preserve">
    <value>{0} must be a non-negative number.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorMustBePositive" xml:space="preserve">
    <value>{0} must be a positive number.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorMustNotBeEmpty" xml:space="preserve">
    <value>{0} cannot be empty.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorMustNotBeNone" xml:space="preserve">
    <value>{0} cannot be None.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorMustNotBeNull" xml:space="preserve">
    <value>{0} cannot be null.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorMustNotBeNullEmpty" xml:space="preserve">
    <value>{0} cannot be null or empty.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorNoExitFound" xml:space="preserve">
    <value>No entry/exit found in {0} or {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorOutOfBounds" xml:space="preserve">
    <value>{0}: {1} is not within {2}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorOutOfOrderGTE" xml:space="preserve">
    <value>{0} is {1} but must be greater than or equal to {2}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorOutOfOrderLTE" xml:space="preserve">
    <value>{0} is {1} but must be less than or equal to {2}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorSaving" xml:space="preserve">
    <value>An error occurred while trying to save.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorUndefinedDirection" xml:space="preserve">
    <value>The direction '{0}' is not defined.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorUngenerated" xml:space="preserve">
    <value>Cannot access {0} on ungenerated {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorUnsupportedDimension" xml:space="preserve">
    <value>Dimension outside specification: {0}</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorUnsupportedDuplicate" xml:space="preserve">
    <value>Tried to duplicate {0} {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorUnsupportedNode" xml:space="preserve">
    <value>Unsupported {0} node {1}.</value>
    <comment>Error string.</comment>
  </data>
  <data name="ErrorUnsupportedSerialization" xml:space="preserve">
    <value>Serializing or deserializing {0} is not yet supported.</value>
    <comment>Error string.</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ParquetIcon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\properties\parqueticon.ico;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="WarningImmutableDuringPlay" xml:space="preserve">
    <value>{1} cannot be written to in play mode.</value>
    <comment>Warning string.</comment>
  </data>
  <data name="WarningRoomSize" xml:space="preserve">
    <value>A RoomRecipe with {0} minimum walkable spaces exists, but rooms can only have from {1} to {2} walkable spaces.</value>
    <comment>Warning string.</comment>
  </data>
  <data name="WarningTriedToGiveNothing" xml:space="preserve">
    <value>Tried to give {0} to {1}.</value>
    <comment>Warning string.</comment>
  </data>
  <data name="WarningTriedToStoreNothing" xml:space="preserve">
    <value>Tried to store {0} in {1}.</value>
    <comment>Warning string.</comment>
  </data>
  <data name="WarningUnavailableDuringPlay" xml:space="preserve">
    <value>{1} is unavailable in play mode.</value>
    <comment>Warning string.</comment>
  </data>
</root>
