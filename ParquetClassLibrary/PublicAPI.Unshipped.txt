CsvHelper.BadDataException
CsvHelper.BadDataException.BadDataException(CsvHelper.ReadingContext context) -> void
CsvHelper.BadDataException.BadDataException(CsvHelper.ReadingContext context, string message) -> void
CsvHelper.BadDataException.BadDataException(CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.Caches
CsvHelper.Caches.NamedIndex = 1 -> CsvHelper.Caches
CsvHelper.Caches.None = 0 -> CsvHelper.Caches
CsvHelper.Caches.RawRecord = 16 -> CsvHelper.Caches
CsvHelper.Caches.ReadRecord = 2 -> CsvHelper.Caches
CsvHelper.Caches.TypeConverterOptions = 8 -> CsvHelper.Caches
CsvHelper.Caches.WriteRecord = 4 -> CsvHelper.Caches
CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute
CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.BooleanFalseValuesAttribute(params string[] falseValues) -> void
CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.BooleanFalseValuesAttribute(string falseValue) -> void
CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.FalseValues.get -> string[]
CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute
CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.BooleanTrueValuesAttribute(params string[] trueValues) -> void
CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.BooleanTrueValuesAttribute(string trueValue) -> void
CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.TrueValues.get -> string[]
CsvHelper.Configuration.Attributes.ConstantAttribute
CsvHelper.Configuration.Attributes.ConstantAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.ConstantAttribute.Constant.get -> object
CsvHelper.Configuration.Attributes.ConstantAttribute.ConstantAttribute(object constant) -> void
CsvHelper.Configuration.Attributes.CultureInfoAttribute
CsvHelper.Configuration.Attributes.CultureInfoAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.CultureInfoAttribute.CultureInfo.get -> System.Globalization.CultureInfo
CsvHelper.Configuration.Attributes.CultureInfoAttribute.CultureInfoAttribute(string culture) -> void
CsvHelper.Configuration.Attributes.DateTimeStylesAttribute
CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles.get -> System.Globalization.DateTimeStyles
CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStylesAttribute(System.Globalization.DateTimeStyles dateTimeStyles) -> void
CsvHelper.Configuration.Attributes.DefaultAttribute
CsvHelper.Configuration.Attributes.DefaultAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.DefaultAttribute.Default.get -> object
CsvHelper.Configuration.Attributes.DefaultAttribute.DefaultAttribute(object defaultValue) -> void
CsvHelper.Configuration.Attributes.FormatAttribute
CsvHelper.Configuration.Attributes.FormatAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.FormatAttribute.FormatAttribute(params string[] formats) -> void
CsvHelper.Configuration.Attributes.FormatAttribute.FormatAttribute(string format) -> void
CsvHelper.Configuration.Attributes.FormatAttribute.Formats.get -> string[]
CsvHelper.Configuration.Attributes.HeaderPrefixAttribute
CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.ApplyTo(CsvHelper.Configuration.MemberReferenceMap referenceMap) -> void
CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.HeaderPrefixAttribute() -> void
CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.HeaderPrefixAttribute(string prefix) -> void
CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.Prefix.get -> string
CsvHelper.Configuration.Attributes.IMemberMapper
CsvHelper.Configuration.Attributes.IMemberMapper.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.IMemberReferenceMapper
CsvHelper.Configuration.Attributes.IMemberReferenceMapper.ApplyTo(CsvHelper.Configuration.MemberReferenceMap referenceMap) -> void
CsvHelper.Configuration.Attributes.IgnoreAttribute
CsvHelper.Configuration.Attributes.IgnoreAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.IgnoreAttribute.ApplyTo(CsvHelper.Configuration.MemberReferenceMap referenceMap) -> void
CsvHelper.Configuration.Attributes.IgnoreAttribute.IgnoreAttribute() -> void
CsvHelper.Configuration.Attributes.IndexAttribute
CsvHelper.Configuration.Attributes.IndexAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.IndexAttribute.Index.get -> int
CsvHelper.Configuration.Attributes.IndexAttribute.IndexAttribute(int index, int indexEnd = -1) -> void
CsvHelper.Configuration.Attributes.IndexAttribute.IndexEnd.get -> int
CsvHelper.Configuration.Attributes.NameAttribute
CsvHelper.Configuration.Attributes.NameAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.NameAttribute.NameAttribute(params string[] names) -> void
CsvHelper.Configuration.Attributes.NameAttribute.NameAttribute(string name) -> void
CsvHelper.Configuration.Attributes.NameAttribute.Names.get -> string[]
CsvHelper.Configuration.Attributes.NameIndexAttribute
CsvHelper.Configuration.Attributes.NameIndexAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.NameIndexAttribute.NameIndex.get -> int
CsvHelper.Configuration.Attributes.NameIndexAttribute.NameIndexAttribute(int nameIndex) -> void
CsvHelper.Configuration.Attributes.NullValuesAttribute
CsvHelper.Configuration.Attributes.NullValuesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.NullValuesAttribute.NullValues.get -> string[]
CsvHelper.Configuration.Attributes.NullValuesAttribute.NullValuesAttribute(params string[] nullValues) -> void
CsvHelper.Configuration.Attributes.NullValuesAttribute.NullValuesAttribute(string nullValue) -> void
CsvHelper.Configuration.Attributes.NumberStylesAttribute
CsvHelper.Configuration.Attributes.NumberStylesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.NumberStylesAttribute.NumberStyles.get -> System.Globalization.NumberStyles
CsvHelper.Configuration.Attributes.NumberStylesAttribute.NumberStylesAttribute(System.Globalization.NumberStyles numberStyles) -> void
CsvHelper.Configuration.Attributes.OptionalAttribute
CsvHelper.Configuration.Attributes.OptionalAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.OptionalAttribute.OptionalAttribute() -> void
CsvHelper.Configuration.Attributes.TypeConverterAttribute
CsvHelper.Configuration.Attributes.TypeConverterAttribute.ApplyTo(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.Attributes.TypeConverterAttribute.TypeConverter.get -> CsvHelper.TypeConversion.ITypeConverter
CsvHelper.Configuration.Attributes.TypeConverterAttribute.TypeConverterAttribute(System.Type typeConverterType) -> void
CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.ClassMap.Map(System.Type classType, System.Reflection.MemberInfo member, bool useExistingMap = true) -> CsvHelper.Configuration.MemberMap
CsvHelper.Configuration.ClassMap<TClass>
CsvHelper.Configuration.ClassMap<TClass>.ClassMap() -> void
CsvHelper.Configuration.ClassMapCollection
CsvHelper.Configuration.ClassMapCollection.ClassMapCollection(CsvHelper.Configuration.CsvConfiguration configuration) -> void
CsvHelper.Configuration.ConfigurationException
CsvHelper.Configuration.ConfigurationException.ConfigurationException() -> void
CsvHelper.Configuration.ConfigurationException.ConfigurationException(string message) -> void
CsvHelper.Configuration.ConfigurationException.ConfigurationException(string message, System.Exception innerException) -> void
CsvHelper.Configuration.ConfigurationFunctions
CsvHelper.Configuration.CsvConfiguration
CsvHelper.Configuration.CsvConfiguration.CsvConfiguration(System.Globalization.CultureInfo cultureInfo) -> void
CsvHelper.Configuration.CsvConfiguration.ShouldQuote.get -> System.Func<string, CsvHelper.WritingContext, bool>
CsvHelper.Configuration.CsvConfiguration.ShouldQuote.set -> void
CsvHelper.Configuration.DefaultClassMap<T>
CsvHelper.Configuration.DefaultClassMap<T>.DefaultClassMap() -> void
CsvHelper.Configuration.IBuildableClass<TClass>
CsvHelper.Configuration.IBuildableClass<TClass>.Build() -> CsvHelper.Configuration.ClassMap<TClass>
CsvHelper.Configuration.IHasConstant<TClass, TMember>
CsvHelper.Configuration.IHasConstant<TClass, TMember>.Constant(TMember value) -> CsvHelper.Configuration.IHasMap<TClass>
CsvHelper.Configuration.IHasConvertUsing<TClass, TMember>
CsvHelper.Configuration.IHasConvertUsing<TClass, TMember>.ConvertUsing(System.Func<CsvHelper.IReaderRow, TMember> convertExpression) -> CsvHelper.Configuration.IHasMap<TClass>
CsvHelper.Configuration.IHasConvertUsing<TClass, TMember>.ConvertUsing(System.Func<TClass, string> convertExpression) -> CsvHelper.Configuration.IHasMap<TClass>
CsvHelper.Configuration.IHasDefault<TClass, TMember>
CsvHelper.Configuration.IHasDefault<TClass, TMember>.Default(TMember defaultValue) -> CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>
CsvHelper.Configuration.IHasDefault<TClass, TMember>.Default(string defaultValue) -> CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>
CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>
CsvHelper.Configuration.IHasIndex<TClass, TMember>
CsvHelper.Configuration.IHasIndex<TClass, TMember>.Index(int index, int indexEnd = -1) -> CsvHelper.Configuration.IHasIndexOptions<TClass, TMember>
CsvHelper.Configuration.IHasIndexOptions<TClass, TMember>
CsvHelper.Configuration.IHasMap<TClass>
CsvHelper.Configuration.IHasMap<TClass>.Map<TMember>(System.Linq.Expressions.Expression<System.Func<TClass, TMember>> expression, bool useExistingMap = true) -> CsvHelper.Configuration.IHasMapOptions<TClass, TMember>
CsvHelper.Configuration.IHasMapOptions<TClass, TMember>
CsvHelper.Configuration.IHasName<TClass, TMember>
CsvHelper.Configuration.IHasName<TClass, TMember>.Name(params string[] names) -> CsvHelper.Configuration.IHasNameOptions<TClass, TMember>
CsvHelper.Configuration.IHasNameIndex<TClass, TMember>
CsvHelper.Configuration.IHasNameIndex<TClass, TMember>.NameIndex(int index) -> CsvHelper.Configuration.IHasNameIndexOptions<TClass, TMember>
CsvHelper.Configuration.IHasNameIndexOptions<TClass, TMember>
CsvHelper.Configuration.IHasNameOptions<TClass, TMember>
CsvHelper.Configuration.IHasOptional<TClass, TMember>
CsvHelper.Configuration.IHasOptional<TClass, TMember>.Optional() -> CsvHelper.Configuration.IHasOptionalOptions<TClass, TMember>
CsvHelper.Configuration.IHasOptionalOptions<TClass, TMember>
CsvHelper.Configuration.IHasTypeConverter<TClass, TMember>
CsvHelper.Configuration.IHasTypeConverter<TClass, TMember>.TypeConverter(CsvHelper.TypeConversion.ITypeConverter typeConverter) -> CsvHelper.Configuration.IHasTypeConverterOptions<TClass, TMember>
CsvHelper.Configuration.IHasTypeConverter<TClass, TMember>.TypeConverter<TConverter>() -> CsvHelper.Configuration.IHasTypeConverterOptions<TClass, TMember>
CsvHelper.Configuration.IHasTypeConverterOptions<TClass, TMember>
CsvHelper.Configuration.IHasValidate<TClass, TMember>
CsvHelper.Configuration.IHasValidate<TClass, TMember>.Validate(System.Func<string, bool> validateExpression) -> CsvHelper.Configuration.IHasMap<TClass>
CsvHelper.Configuration.IParserConfiguration
CsvHelper.Configuration.IParserConfiguration.AllowComments.get -> bool
CsvHelper.Configuration.IParserConfiguration.AllowComments.set -> void
CsvHelper.Configuration.IParserConfiguration.BadDataFound.get -> System.Action<CsvHelper.ReadingContext>
CsvHelper.Configuration.IParserConfiguration.BadDataFound.set -> void
CsvHelper.Configuration.IParserConfiguration.BufferSize.get -> int
CsvHelper.Configuration.IParserConfiguration.BufferSize.set -> void
CsvHelper.Configuration.IParserConfiguration.Comment.get -> char
CsvHelper.Configuration.IParserConfiguration.Comment.set -> void
CsvHelper.Configuration.IParserConfiguration.CountBytes.get -> bool
CsvHelper.Configuration.IParserConfiguration.CountBytes.set -> void
CsvHelper.Configuration.IParserConfiguration.Delimiter.get -> string
CsvHelper.Configuration.IParserConfiguration.Delimiter.set -> void
CsvHelper.Configuration.IParserConfiguration.Encoding.get -> System.Text.Encoding
CsvHelper.Configuration.IParserConfiguration.Encoding.set -> void
CsvHelper.Configuration.IParserConfiguration.Escape.get -> char
CsvHelper.Configuration.IParserConfiguration.Escape.set -> void
CsvHelper.Configuration.IParserConfiguration.IgnoreBlankLines.get -> bool
CsvHelper.Configuration.IParserConfiguration.IgnoreBlankLines.set -> void
CsvHelper.Configuration.IParserConfiguration.IgnoreQuotes.get -> bool
CsvHelper.Configuration.IParserConfiguration.IgnoreQuotes.set -> void
CsvHelper.Configuration.IParserConfiguration.LineBreakInQuotedFieldIsBadData.get -> bool
CsvHelper.Configuration.IParserConfiguration.LineBreakInQuotedFieldIsBadData.set -> void
CsvHelper.Configuration.IParserConfiguration.Quote.get -> char
CsvHelper.Configuration.IParserConfiguration.Quote.set -> void
CsvHelper.Configuration.IParserConfiguration.TrimOptions.get -> CsvHelper.Configuration.TrimOptions
CsvHelper.Configuration.IParserConfiguration.TrimOptions.set -> void
CsvHelper.Configuration.IReaderConfiguration
CsvHelper.Configuration.IReaderConfiguration.AutoMap(System.Type type) -> CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.IReaderConfiguration.AutoMap<T>() -> CsvHelper.Configuration.ClassMap<T>
CsvHelper.Configuration.IReaderConfiguration.CultureInfo.get -> System.Globalization.CultureInfo
CsvHelper.Configuration.IReaderConfiguration.CultureInfo.set -> void
CsvHelper.Configuration.IReaderConfiguration.DetectColumnCountChanges.get -> bool
CsvHelper.Configuration.IReaderConfiguration.DetectColumnCountChanges.set -> void
CsvHelper.Configuration.IReaderConfiguration.GetConstructor.get -> System.Func<System.Type, System.Reflection.ConstructorInfo>
CsvHelper.Configuration.IReaderConfiguration.GetConstructor.set -> void
CsvHelper.Configuration.IReaderConfiguration.HasHeaderRecord.get -> bool
CsvHelper.Configuration.IReaderConfiguration.HasHeaderRecord.set -> void
CsvHelper.Configuration.IReaderConfiguration.HeaderValidated.get -> System.Action<bool, string[], int, CsvHelper.ReadingContext>
CsvHelper.Configuration.IReaderConfiguration.HeaderValidated.set -> void
CsvHelper.Configuration.IReaderConfiguration.IgnoreReferences.get -> bool
CsvHelper.Configuration.IReaderConfiguration.IgnoreReferences.set -> void
CsvHelper.Configuration.IReaderConfiguration.IncludePrivateMembers.get -> bool
CsvHelper.Configuration.IReaderConfiguration.IncludePrivateMembers.set -> void
CsvHelper.Configuration.IReaderConfiguration.Maps.get -> CsvHelper.Configuration.ClassMapCollection
CsvHelper.Configuration.IReaderConfiguration.MemberTypes.get -> CsvHelper.Configuration.MemberTypes
CsvHelper.Configuration.IReaderConfiguration.MemberTypes.set -> void
CsvHelper.Configuration.IReaderConfiguration.MissingFieldFound.get -> System.Action<string[], int, CsvHelper.ReadingContext>
CsvHelper.Configuration.IReaderConfiguration.MissingFieldFound.set -> void
CsvHelper.Configuration.IReaderConfiguration.PrepareHeaderForMatch.get -> System.Func<string, int, string>
CsvHelper.Configuration.IReaderConfiguration.PrepareHeaderForMatch.set -> void
CsvHelper.Configuration.IReaderConfiguration.ReadingExceptionOccurred.get -> System.Func<CsvHelper.CsvHelperException, bool>
CsvHelper.Configuration.IReaderConfiguration.ReadingExceptionOccurred.set -> void
CsvHelper.Configuration.IReaderConfiguration.ReferenceHeaderPrefix.get -> System.Func<System.Type, string, string>
CsvHelper.Configuration.IReaderConfiguration.ReferenceHeaderPrefix.set -> void
CsvHelper.Configuration.IReaderConfiguration.RegisterClassMap(CsvHelper.Configuration.ClassMap map) -> void
CsvHelper.Configuration.IReaderConfiguration.RegisterClassMap(System.Type classMapType) -> CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.IReaderConfiguration.RegisterClassMap<TMap>() -> TMap
CsvHelper.Configuration.IReaderConfiguration.ShouldSkipRecord.get -> System.Func<string[], bool>
CsvHelper.Configuration.IReaderConfiguration.ShouldSkipRecord.set -> void
CsvHelper.Configuration.IReaderConfiguration.ShouldUseConstructorParameters.get -> System.Func<System.Type, bool>
CsvHelper.Configuration.IReaderConfiguration.ShouldUseConstructorParameters.set -> void
CsvHelper.Configuration.IReaderConfiguration.TypeConverterCache.get -> CsvHelper.TypeConversion.TypeConverterCache
CsvHelper.Configuration.IReaderConfiguration.TypeConverterCache.set -> void
CsvHelper.Configuration.IReaderConfiguration.TypeConverterOptionsCache.get -> CsvHelper.TypeConversion.TypeConverterOptionsCache
CsvHelper.Configuration.IReaderConfiguration.TypeConverterOptionsCache.set -> void
CsvHelper.Configuration.IReaderConfiguration.UnregisterClassMap() -> void
CsvHelper.Configuration.IReaderConfiguration.UnregisterClassMap(System.Type classMapType) -> void
CsvHelper.Configuration.IReaderConfiguration.UnregisterClassMap<TMap>() -> void
CsvHelper.Configuration.ISerializerConfiguration
CsvHelper.Configuration.ISerializerConfiguration.Delimiter.get -> string
CsvHelper.Configuration.ISerializerConfiguration.Delimiter.set -> void
CsvHelper.Configuration.ISerializerConfiguration.Escape.get -> char
CsvHelper.Configuration.ISerializerConfiguration.Escape.set -> void
CsvHelper.Configuration.ISerializerConfiguration.InjectionCharacters.get -> char[]
CsvHelper.Configuration.ISerializerConfiguration.InjectionCharacters.set -> void
CsvHelper.Configuration.ISerializerConfiguration.InjectionEscapeCharacter.get -> char
CsvHelper.Configuration.ISerializerConfiguration.InjectionEscapeCharacter.set -> void
CsvHelper.Configuration.ISerializerConfiguration.NewLine.get -> CsvHelper.Configuration.NewLine
CsvHelper.Configuration.ISerializerConfiguration.NewLine.set -> void
CsvHelper.Configuration.ISerializerConfiguration.NewLineString.get -> string
CsvHelper.Configuration.ISerializerConfiguration.Quote.get -> char
CsvHelper.Configuration.ISerializerConfiguration.Quote.set -> void
CsvHelper.Configuration.ISerializerConfiguration.SanitizeForInjection.get -> bool
CsvHelper.Configuration.ISerializerConfiguration.SanitizeForInjection.set -> void
CsvHelper.Configuration.ISerializerConfiguration.TrimOptions.get -> CsvHelper.Configuration.TrimOptions
CsvHelper.Configuration.ISerializerConfiguration.TrimOptions.set -> void
CsvHelper.Configuration.IWriterConfiguration
CsvHelper.Configuration.IWriterConfiguration.AllowComments.get -> bool
CsvHelper.Configuration.IWriterConfiguration.AllowComments.set -> void
CsvHelper.Configuration.IWriterConfiguration.AutoMap(System.Type type) -> CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.IWriterConfiguration.AutoMap<T>() -> CsvHelper.Configuration.ClassMap<T>
CsvHelper.Configuration.IWriterConfiguration.Comment.get -> char
CsvHelper.Configuration.IWriterConfiguration.Comment.set -> void
CsvHelper.Configuration.IWriterConfiguration.CultureInfo.get -> System.Globalization.CultureInfo
CsvHelper.Configuration.IWriterConfiguration.CultureInfo.set -> void
CsvHelper.Configuration.IWriterConfiguration.DoubleQuoteString.get -> string
CsvHelper.Configuration.IWriterConfiguration.DynamicPropertySort.get -> System.Collections.Generic.IComparer<string>
CsvHelper.Configuration.IWriterConfiguration.DynamicPropertySort.set -> void
CsvHelper.Configuration.IWriterConfiguration.HasHeaderRecord.get -> bool
CsvHelper.Configuration.IWriterConfiguration.HasHeaderRecord.set -> void
CsvHelper.Configuration.IWriterConfiguration.IgnoreReferences.get -> bool
CsvHelper.Configuration.IWriterConfiguration.IgnoreReferences.set -> void
CsvHelper.Configuration.IWriterConfiguration.IncludePrivateMembers.get -> bool
CsvHelper.Configuration.IWriterConfiguration.IncludePrivateMembers.set -> void
CsvHelper.Configuration.IWriterConfiguration.Maps.get -> CsvHelper.Configuration.ClassMapCollection
CsvHelper.Configuration.IWriterConfiguration.MemberTypes.get -> CsvHelper.Configuration.MemberTypes
CsvHelper.Configuration.IWriterConfiguration.MemberTypes.set -> void
CsvHelper.Configuration.IWriterConfiguration.QuoteString.get -> string
CsvHelper.Configuration.IWriterConfiguration.ReferenceHeaderPrefix.get -> System.Func<System.Type, string, string>
CsvHelper.Configuration.IWriterConfiguration.ReferenceHeaderPrefix.set -> void
CsvHelper.Configuration.IWriterConfiguration.RegisterClassMap(CsvHelper.Configuration.ClassMap map) -> void
CsvHelper.Configuration.IWriterConfiguration.RegisterClassMap(System.Type classMapType) -> CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.IWriterConfiguration.RegisterClassMap<TMap>() -> TMap
CsvHelper.Configuration.IWriterConfiguration.ShouldQuote.get -> System.Func<string, CsvHelper.WritingContext, bool>
CsvHelper.Configuration.IWriterConfiguration.ShouldQuote.set -> void
CsvHelper.Configuration.IWriterConfiguration.TypeConverterCache.get -> CsvHelper.TypeConversion.TypeConverterCache
CsvHelper.Configuration.IWriterConfiguration.TypeConverterCache.set -> void
CsvHelper.Configuration.IWriterConfiguration.TypeConverterOptionsCache.get -> CsvHelper.TypeConversion.TypeConverterOptionsCache
CsvHelper.Configuration.IWriterConfiguration.TypeConverterOptionsCache.set -> void
CsvHelper.Configuration.IWriterConfiguration.UnregisterClassMap() -> void
CsvHelper.Configuration.IWriterConfiguration.UnregisterClassMap(System.Type classMapType) -> void
CsvHelper.Configuration.IWriterConfiguration.UnregisterClassMap<TMap>() -> void
CsvHelper.Configuration.IWriterConfiguration.UseNewObjectForNullReferenceMembers.get -> bool
CsvHelper.Configuration.IWriterConfiguration.UseNewObjectForNullReferenceMembers.set -> void
CsvHelper.Configuration.MapTypeConverterOption
CsvHelper.Configuration.MapTypeConverterOption.MapTypeConverterOption(CsvHelper.Configuration.MemberMap memberMap) -> void
CsvHelper.Configuration.MemberMap
CsvHelper.Configuration.MemberMap.MemberMap() -> void
CsvHelper.Configuration.MemberMap<TClass, TMember>
CsvHelper.Configuration.MemberMap<TClass, TMember>.MemberMap(System.Reflection.MemberInfo member) -> void
CsvHelper.Configuration.MemberMapCollection
CsvHelper.Configuration.MemberMapCollection.MemberMapCollection() -> void
CsvHelper.Configuration.MemberMapCollection.MemberMapCollection(System.Collections.Generic.IComparer<CsvHelper.Configuration.MemberMap> comparer) -> void
CsvHelper.Configuration.MemberMapData
CsvHelper.Configuration.MemberMapData.MemberMapData(System.Reflection.MemberInfo member) -> void
CsvHelper.Configuration.MemberNameCollection
CsvHelper.Configuration.MemberNameCollection.Add(string name) -> void
CsvHelper.Configuration.MemberNameCollection.AddRange(System.Collections.Generic.IEnumerable<string> names) -> void
CsvHelper.Configuration.MemberNameCollection.Clear() -> void
CsvHelper.Configuration.MemberNameCollection.Count.get -> int
CsvHelper.Configuration.MemberNameCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<string>
CsvHelper.Configuration.MemberNameCollection.MemberNameCollection() -> void
CsvHelper.Configuration.MemberNameCollection.Names.get -> System.Collections.Generic.List<string>
CsvHelper.Configuration.MemberNameCollection.Prefix.get -> string
CsvHelper.Configuration.MemberNameCollection.Prefix.set -> void
CsvHelper.Configuration.MemberNameCollection.this[int index].get -> string
CsvHelper.Configuration.MemberNameCollection.this[int index].set -> void
CsvHelper.Configuration.MemberReferenceMap
CsvHelper.Configuration.MemberReferenceMap.Data.get -> CsvHelper.Configuration.MemberReferenceMapData
CsvHelper.Configuration.MemberReferenceMap.MemberReferenceMap(System.Reflection.MemberInfo member, CsvHelper.Configuration.ClassMap mapping) -> void
CsvHelper.Configuration.MemberReferenceMap.Prefix(string prefix = null) -> CsvHelper.Configuration.MemberReferenceMap
CsvHelper.Configuration.MemberReferenceMapCollection
CsvHelper.Configuration.MemberReferenceMapCollection.MemberReferenceMapCollection() -> void
CsvHelper.Configuration.MemberReferenceMapData
CsvHelper.Configuration.MemberReferenceMapData.Mapping.get -> CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.MemberReferenceMapData.MemberReferenceMapData(System.Reflection.MemberInfo member, CsvHelper.Configuration.ClassMap mapping) -> void
CsvHelper.Configuration.MemberTypes
CsvHelper.Configuration.MemberTypes.Fields = 2 -> CsvHelper.Configuration.MemberTypes
CsvHelper.Configuration.MemberTypes.None = 0 -> CsvHelper.Configuration.MemberTypes
CsvHelper.Configuration.MemberTypes.Properties = 1 -> CsvHelper.Configuration.MemberTypes
CsvHelper.Configuration.NewLine
CsvHelper.Configuration.NewLine.CR = 1 -> CsvHelper.Configuration.NewLine
CsvHelper.Configuration.NewLine.CRLF = 0 -> CsvHelper.Configuration.NewLine
CsvHelper.Configuration.NewLine.Environment = 3 -> CsvHelper.Configuration.NewLine
CsvHelper.Configuration.NewLine.LF = 2 -> CsvHelper.Configuration.NewLine
CsvHelper.Configuration.NewLines
CsvHelper.Configuration.NewLines.NewLines() -> void
CsvHelper.Configuration.ParameterMap
CsvHelper.Configuration.ParameterMap.ParameterMap(System.Reflection.ParameterInfo parameter) -> void
CsvHelper.Configuration.ParameterMapData
CsvHelper.Configuration.ParameterMapData.ParameterMapData(System.Reflection.ParameterInfo parameter) -> void
CsvHelper.Configuration.ParameterReferenceMap
CsvHelper.Configuration.ParameterReferenceMap.Data.get -> CsvHelper.Configuration.ParameterReferenceMapData
CsvHelper.Configuration.ParameterReferenceMap.ParameterReferenceMap(System.Reflection.ParameterInfo parameter, CsvHelper.Configuration.ClassMap mapping) -> void
CsvHelper.Configuration.ParameterReferenceMap.Prefix(string prefix = null) -> CsvHelper.Configuration.ParameterReferenceMap
CsvHelper.Configuration.ParameterReferenceMapData
CsvHelper.Configuration.ParameterReferenceMapData.Mapping.get -> CsvHelper.Configuration.ClassMap
CsvHelper.Configuration.ParameterReferenceMapData.ParameterReferenceMapData(System.Reflection.ParameterInfo parameter, CsvHelper.Configuration.ClassMap mapping) -> void
CsvHelper.Configuration.TrimOptions
CsvHelper.Configuration.TrimOptions.InsideQuotes = 2 -> CsvHelper.Configuration.TrimOptions
CsvHelper.Configuration.TrimOptions.None = 0 -> CsvHelper.Configuration.TrimOptions
CsvHelper.Configuration.TrimOptions.Trim = 1 -> CsvHelper.Configuration.TrimOptions
CsvHelper.CsvDataReader
CsvHelper.CsvDataReader.Close() -> void
CsvHelper.CsvDataReader.CsvDataReader(CsvHelper.CsvReader csv) -> void
CsvHelper.CsvDataReader.Depth.get -> int
CsvHelper.CsvDataReader.Dispose() -> void
CsvHelper.CsvDataReader.FieldCount.get -> int
CsvHelper.CsvDataReader.GetBoolean(int i) -> bool
CsvHelper.CsvDataReader.GetByte(int i) -> byte
CsvHelper.CsvDataReader.GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) -> long
CsvHelper.CsvDataReader.GetChar(int i) -> char
CsvHelper.CsvDataReader.GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) -> long
CsvHelper.CsvDataReader.GetData(int i) -> System.Data.IDataReader
CsvHelper.CsvDataReader.GetDataTypeName(int i) -> string
CsvHelper.CsvDataReader.GetDateTime(int i) -> System.DateTime
CsvHelper.CsvDataReader.GetDecimal(int i) -> decimal
CsvHelper.CsvDataReader.GetDouble(int i) -> double
CsvHelper.CsvDataReader.GetFieldType(int i) -> System.Type
CsvHelper.CsvDataReader.GetFloat(int i) -> float
CsvHelper.CsvDataReader.GetGuid(int i) -> System.Guid
CsvHelper.CsvDataReader.GetInt16(int i) -> short
CsvHelper.CsvDataReader.GetInt32(int i) -> int
CsvHelper.CsvDataReader.GetInt64(int i) -> long
CsvHelper.CsvDataReader.GetName(int i) -> string
CsvHelper.CsvDataReader.GetOrdinal(string name) -> int
CsvHelper.CsvDataReader.GetSchemaTable() -> System.Data.DataTable
CsvHelper.CsvDataReader.GetString(int i) -> string
CsvHelper.CsvDataReader.GetValue(int i) -> object
CsvHelper.CsvDataReader.GetValues(object[] values) -> int
CsvHelper.CsvDataReader.IsClosed.get -> bool
CsvHelper.CsvDataReader.IsDBNull(int i) -> bool
CsvHelper.CsvDataReader.NextResult() -> bool
CsvHelper.CsvDataReader.Read() -> bool
CsvHelper.CsvDataReader.RecordsAffected.get -> int
CsvHelper.CsvDataReader.this[int i].get -> object
CsvHelper.CsvDataReader.this[string name].get -> object
CsvHelper.CsvFieldReader
CsvHelper.CsvFieldReader.CsvFieldReader(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> void
CsvHelper.CsvFieldReader.CsvFieldReader(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
CsvHelper.CsvHelperException
CsvHelper.CsvHelperException.CsvHelperException() -> void
CsvHelper.CsvHelperException.CsvHelperException(CsvHelper.ReadingContext context) -> void
CsvHelper.CsvHelperException.CsvHelperException(CsvHelper.ReadingContext context, string message) -> void
CsvHelper.CsvHelperException.CsvHelperException(CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.CsvHelperException.CsvHelperException(CsvHelper.WritingContext context) -> void
CsvHelper.CsvHelperException.CsvHelperException(CsvHelper.WritingContext context, string message) -> void
CsvHelper.CsvHelperException.CsvHelperException(CsvHelper.WritingContext context, string message, System.Exception innerException) -> void
CsvHelper.CsvHelperException.CsvHelperException(string message) -> void
CsvHelper.CsvHelperException.CsvHelperException(string message, System.Exception innerException) -> void
CsvHelper.CsvHelperException.ReadingContext.get -> CsvHelper.ReadingContext
CsvHelper.CsvHelperException.WritingContext.get -> CsvHelper.WritingContext
CsvHelper.CsvParser
CsvHelper.CsvParser.CsvParser(CsvHelper.IFieldReader fieldReader) -> void
CsvHelper.CsvParser.CsvParser(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> void
CsvHelper.CsvParser.CsvParser(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
CsvHelper.CsvParser.CsvParser(System.IO.TextReader reader, System.Globalization.CultureInfo culture) -> void
CsvHelper.CsvParser.CsvParser(System.IO.TextReader reader, System.Globalization.CultureInfo culture, bool leaveOpen) -> void
CsvHelper.CsvReader
CsvHelper.CsvReader.CsvReader(CsvHelper.IParser parser) -> void
CsvHelper.CsvReader.CsvReader(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> void
CsvHelper.CsvReader.CsvReader(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
CsvHelper.CsvReader.CsvReader(System.IO.TextReader reader, System.Globalization.CultureInfo culture) -> void
CsvHelper.CsvReader.CsvReader(System.IO.TextReader reader, System.Globalization.CultureInfo culture, bool leaveOpen) -> void
CsvHelper.CsvReader.Dispose() -> void
CsvHelper.CsvSerializer
CsvHelper.CsvSerializer.CsvSerializer(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration) -> void
CsvHelper.CsvSerializer.CsvSerializer(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
CsvHelper.CsvSerializer.CsvSerializer(System.IO.TextWriter writer, System.Globalization.CultureInfo cultureInfo) -> void
CsvHelper.CsvSerializer.CsvSerializer(System.IO.TextWriter writer, System.Globalization.CultureInfo cultureInfo, bool leaveOpen) -> void
CsvHelper.CsvWriter
CsvHelper.CsvWriter.CsvWriter(CsvHelper.ISerializer serializer) -> void
CsvHelper.CsvWriter.CsvWriter(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration) -> void
CsvHelper.CsvWriter.CsvWriter(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
CsvHelper.CsvWriter.CsvWriter(System.IO.TextWriter writer, System.Globalization.CultureInfo cultureInfo) -> void
CsvHelper.CsvWriter.CsvWriter(System.IO.TextWriter writer, System.Globalization.CultureInfo cultureInfo, bool leaveOpen) -> void
CsvHelper.CsvWriter.Dispose() -> void
CsvHelper.CsvWriter.DisposeAsync() -> System.Threading.Tasks.ValueTask
CsvHelper.Expressions.DynamicRecordCreator
CsvHelper.Expressions.DynamicRecordCreator.DynamicRecordCreator(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.DynamicRecordWriter
CsvHelper.Expressions.DynamicRecordWriter.DynamicRecordWriter(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.ExpandoObjectRecordWriter
CsvHelper.Expressions.ExpandoObjectRecordWriter.ExpandoObjectRecordWriter(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.ExpressionManager
CsvHelper.Expressions.ExpressionManager.ExpressionManager(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.ExpressionManager.ExpressionManager(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.ObjectRecordCreator
CsvHelper.Expressions.ObjectRecordCreator.ObjectRecordCreator(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.ObjectRecordWriter
CsvHelper.Expressions.ObjectRecordWriter.ObjectRecordWriter(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.PrimitiveRecordCreator
CsvHelper.Expressions.PrimitiveRecordCreator.PrimitiveRecordCreator(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.PrimitiveRecordWriter
CsvHelper.Expressions.PrimitiveRecordWriter.PrimitiveRecordWriter(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.RecordCreator
CsvHelper.Expressions.RecordCreator.Create(System.Type recordType) -> object
CsvHelper.Expressions.RecordCreator.Create<T>() -> T
CsvHelper.Expressions.RecordCreator.ExpressionManager.get -> CsvHelper.Expressions.ExpressionManager
CsvHelper.Expressions.RecordCreator.Reader.get -> CsvHelper.CsvReader
CsvHelper.Expressions.RecordCreator.RecordCreator(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.RecordCreatorFactory
CsvHelper.Expressions.RecordCreatorFactory.RecordCreatorFactory(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.RecordHydrator
CsvHelper.Expressions.RecordHydrator.Hydrate<T>(T record) -> void
CsvHelper.Expressions.RecordHydrator.RecordHydrator(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.RecordManager
CsvHelper.Expressions.RecordManager.Create(System.Type recordType) -> object
CsvHelper.Expressions.RecordManager.Create<T>() -> T
CsvHelper.Expressions.RecordManager.Hydrate<T>(T record) -> void
CsvHelper.Expressions.RecordManager.RecordManager(CsvHelper.CsvReader reader) -> void
CsvHelper.Expressions.RecordManager.RecordManager(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.RecordManager.Write<T>(T record) -> void
CsvHelper.Expressions.RecordWriter
CsvHelper.Expressions.RecordWriter.ExpressionManager.get -> CsvHelper.Expressions.ExpressionManager
CsvHelper.Expressions.RecordWriter.GetWriteDelegate<T>(T record) -> System.Action<T>
CsvHelper.Expressions.RecordWriter.RecordWriter(CsvHelper.CsvWriter writer) -> void
CsvHelper.Expressions.RecordWriter.Write<T>(T record) -> void
CsvHelper.Expressions.RecordWriter.Writer.get -> CsvHelper.CsvWriter
CsvHelper.Expressions.RecordWriterFactory
CsvHelper.Expressions.RecordWriterFactory.RecordWriterFactory(CsvHelper.CsvWriter writer) -> void
CsvHelper.Factory
CsvHelper.Factory.CreateClassMapBuilder<T>() -> CsvHelper.Configuration.IHasMap<T>
CsvHelper.Factory.Factory() -> void
CsvHelper.FieldValidationException
CsvHelper.FieldValidationException.Field.get -> string
CsvHelper.FieldValidationException.FieldValidationException(CsvHelper.ReadingContext context, string field) -> void
CsvHelper.FieldValidationException.FieldValidationException(CsvHelper.ReadingContext context, string field, string message) -> void
CsvHelper.FieldValidationException.FieldValidationException(CsvHelper.ReadingContext context, string field, string message, System.Exception innerException) -> void
CsvHelper.HeaderValidationException
CsvHelper.HeaderValidationException.HeaderNameIndex.get -> int?
CsvHelper.HeaderValidationException.HeaderNames.get -> string[]
CsvHelper.HeaderValidationException.HeaderValidationException(CsvHelper.ReadingContext context, string[] headerNames, int? headerNameIndex) -> void
CsvHelper.HeaderValidationException.HeaderValidationException(CsvHelper.ReadingContext context, string[] headerNames, int? headerNameIndex, string message) -> void
CsvHelper.HeaderValidationException.HeaderValidationException(CsvHelper.ReadingContext context, string[] headerNames, int? headerNameIndex, string message, System.Exception innerException) -> void
CsvHelper.IFactory
CsvHelper.IFactory.CreateClassMapBuilder<T>() -> CsvHelper.Configuration.IHasMap<T>
CsvHelper.IFactory.CreateParser(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> CsvHelper.IParser
CsvHelper.IFactory.CreateParser(System.IO.TextReader reader, System.Globalization.CultureInfo cultureInfo) -> CsvHelper.IParser
CsvHelper.IFactory.CreateReader(CsvHelper.IParser parser) -> CsvHelper.IReader
CsvHelper.IFactory.CreateReader(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> CsvHelper.IReader
CsvHelper.IFactory.CreateReader(System.IO.TextReader reader, System.Globalization.CultureInfo cultureInfo) -> CsvHelper.IReader
CsvHelper.IFactory.CreateWriter(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration) -> CsvHelper.IWriter
CsvHelper.IFactory.CreateWriter(System.IO.TextWriter writer, System.Globalization.CultureInfo cultureInfo) -> CsvHelper.IWriter
CsvHelper.IFieldReader
CsvHelper.IFieldReader.AppendField() -> void
CsvHelper.IFieldReader.Context.get -> CsvHelper.ReadingContext
CsvHelper.IFieldReader.FillBuffer() -> bool
CsvHelper.IFieldReader.FillBufferAsync() -> System.Threading.Tasks.Task<bool>
CsvHelper.IFieldReader.GetChar() -> int
CsvHelper.IFieldReader.GetField() -> string
CsvHelper.IFieldReader.IsBufferEmpty.get -> bool
CsvHelper.IFieldReader.SetBufferPosition(int offset = 0) -> void
CsvHelper.IFieldReader.SetFieldEnd(int offset = 0) -> void
CsvHelper.IFieldReader.SetFieldStart(int offset = 0) -> void
CsvHelper.IFieldReader.SetRawRecordEnd(int offset) -> void
CsvHelper.IFieldReader.SetRawRecordStart(int offset) -> void
CsvHelper.IObjectResolver
CsvHelper.IObjectResolver.CanResolve.get -> System.Func<System.Type, bool>
CsvHelper.IObjectResolver.Resolve(System.Type type, params object[] constructorArgs) -> object
CsvHelper.IObjectResolver.Resolve<T>(params object[] constructorArgs) -> T
CsvHelper.IObjectResolver.ResolveFunction.get -> System.Func<System.Type, object[], object>
CsvHelper.IObjectResolver.UseFallback.get -> bool
CsvHelper.IParser
CsvHelper.IParser.Configuration.get -> CsvHelper.Configuration.IParserConfiguration
CsvHelper.IParser.Context.get -> CsvHelper.ReadingContext
CsvHelper.IParser.FieldReader.get -> CsvHelper.IFieldReader
CsvHelper.IParser.Read() -> string[]
CsvHelper.IParser.ReadAsync() -> System.Threading.Tasks.Task<string[]>
CsvHelper.IReader
CsvHelper.IReader.EnumerateRecords<T>(T record) -> System.Collections.Generic.IEnumerable<T>
CsvHelper.IReader.EnumerateRecordsAsync<T>(T record) -> System.Collections.Generic.IAsyncEnumerable<T>
CsvHelper.IReader.GetRecords(System.Type type) -> System.Collections.Generic.IEnumerable<object>
CsvHelper.IReader.GetRecords<T>() -> System.Collections.Generic.IEnumerable<T>
CsvHelper.IReader.GetRecords<T>(T anonymousTypeDefinition) -> System.Collections.Generic.IEnumerable<T>
CsvHelper.IReader.GetRecordsAsync(System.Type type) -> System.Collections.Generic.IAsyncEnumerable<object>
CsvHelper.IReader.GetRecordsAsync<T>() -> System.Collections.Generic.IAsyncEnumerable<T>
CsvHelper.IReader.GetRecordsAsync<T>(T anonymousTypeDefinition) -> System.Collections.Generic.IAsyncEnumerable<T>
CsvHelper.IReader.Parser.get -> CsvHelper.IParser
CsvHelper.IReader.Read() -> bool
CsvHelper.IReader.ReadAsync() -> System.Threading.Tasks.Task<bool>
CsvHelper.IReader.ReadHeader() -> bool
CsvHelper.IReaderRow
CsvHelper.IReaderRow.Configuration.get -> CsvHelper.Configuration.IReaderConfiguration
CsvHelper.IReaderRow.Context.get -> CsvHelper.ReadingContext
CsvHelper.IReaderRow.GetField(System.Type type, int index) -> object
CsvHelper.IReaderRow.GetField(System.Type type, int index, CsvHelper.TypeConversion.ITypeConverter converter) -> object
CsvHelper.IReaderRow.GetField(System.Type type, string name) -> object
CsvHelper.IReaderRow.GetField(System.Type type, string name, CsvHelper.TypeConversion.ITypeConverter converter) -> object
CsvHelper.IReaderRow.GetField(System.Type type, string name, int index) -> object
CsvHelper.IReaderRow.GetField(System.Type type, string name, int index, CsvHelper.TypeConversion.ITypeConverter converter) -> object
CsvHelper.IReaderRow.GetField(int index) -> string
CsvHelper.IReaderRow.GetField(string name) -> string
CsvHelper.IReaderRow.GetField(string name, int index) -> string
CsvHelper.IReaderRow.GetField<T, TConverter>(int index) -> T
CsvHelper.IReaderRow.GetField<T, TConverter>(string name) -> T
CsvHelper.IReaderRow.GetField<T, TConverter>(string name, int index) -> T
CsvHelper.IReaderRow.GetField<T>(int index) -> T
CsvHelper.IReaderRow.GetField<T>(int index, CsvHelper.TypeConversion.ITypeConverter converter) -> T
CsvHelper.IReaderRow.GetField<T>(string name) -> T
CsvHelper.IReaderRow.GetField<T>(string name, CsvHelper.TypeConversion.ITypeConverter converter) -> T
CsvHelper.IReaderRow.GetField<T>(string name, int index) -> T
CsvHelper.IReaderRow.GetField<T>(string name, int index, CsvHelper.TypeConversion.ITypeConverter converter) -> T
CsvHelper.IReaderRow.GetRecord(System.Type type) -> object
CsvHelper.IReaderRow.GetRecord<T>() -> T
CsvHelper.IReaderRow.GetRecord<T>(T anonymousTypeDefinition) -> T
CsvHelper.IReaderRow.TryGetField(System.Type type, int index, CsvHelper.TypeConversion.ITypeConverter converter, out object field) -> bool
CsvHelper.IReaderRow.TryGetField(System.Type type, int index, out object field) -> bool
CsvHelper.IReaderRow.TryGetField(System.Type type, string name, CsvHelper.TypeConversion.ITypeConverter converter, out object field) -> bool
CsvHelper.IReaderRow.TryGetField(System.Type type, string name, int index, CsvHelper.TypeConversion.ITypeConverter converter, out object field) -> bool
CsvHelper.IReaderRow.TryGetField(System.Type type, string name, int index, out object field) -> bool
CsvHelper.IReaderRow.TryGetField(System.Type type, string name, out object field) -> bool
CsvHelper.IReaderRow.TryGetField<T, TConverter>(int index, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T, TConverter>(string name, int index, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T, TConverter>(string name, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T>(int index, CsvHelper.TypeConversion.ITypeConverter converter, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T>(int index, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T>(string name, CsvHelper.TypeConversion.ITypeConverter converter, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T>(string name, int index, CsvHelper.TypeConversion.ITypeConverter converter, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T>(string name, int index, out T field) -> bool
CsvHelper.IReaderRow.TryGetField<T>(string name, out T field) -> bool
CsvHelper.IReaderRow.this[int index].get -> string
CsvHelper.IReaderRow.this[string name, int index].get -> string
CsvHelper.IReaderRow.this[string name].get -> string
CsvHelper.ISerializer
CsvHelper.ISerializer.Configuration.get -> CsvHelper.Configuration.ISerializerConfiguration
CsvHelper.ISerializer.Context.get -> CsvHelper.WritingContext
CsvHelper.ISerializer.Write(string[] record) -> void
CsvHelper.ISerializer.WriteAsync(string[] record) -> System.Threading.Tasks.Task
CsvHelper.ISerializer.WriteLine() -> void
CsvHelper.ISerializer.WriteLineAsync() -> System.Threading.Tasks.Task
CsvHelper.IWriter
CsvHelper.IWriter.Flush() -> void
CsvHelper.IWriter.FlushAsync() -> System.Threading.Tasks.Task
CsvHelper.IWriter.NextRecord() -> void
CsvHelper.IWriter.NextRecordAsync() -> System.Threading.Tasks.Task
CsvHelper.IWriter.WriteRecords(System.Collections.IEnumerable records) -> void
CsvHelper.IWriter.WriteRecords<T>(System.Collections.Generic.IEnumerable<T> records) -> void
CsvHelper.IWriter.WriteRecordsAsync(System.Collections.IEnumerable records) -> System.Threading.Tasks.Task
CsvHelper.IWriter.WriteRecordsAsync<T>(System.Collections.Generic.IEnumerable<T> records) -> System.Threading.Tasks.Task
CsvHelper.IWriterRow
CsvHelper.IWriterRow.Configuration.get -> CsvHelper.Configuration.IWriterConfiguration
CsvHelper.IWriterRow.Context.get -> CsvHelper.WritingContext
CsvHelper.IWriterRow.WriteComment(string comment) -> void
CsvHelper.IWriterRow.WriteConvertedField(string field) -> void
CsvHelper.IWriterRow.WriteField(string field) -> void
CsvHelper.IWriterRow.WriteField(string field, bool shouldQuote) -> void
CsvHelper.IWriterRow.WriteField<T, TConverter>(T field) -> void
CsvHelper.IWriterRow.WriteField<T>(T field) -> void
CsvHelper.IWriterRow.WriteField<T>(T field, CsvHelper.TypeConversion.ITypeConverter converter) -> void
CsvHelper.IWriterRow.WriteHeader(System.Type type) -> void
CsvHelper.IWriterRow.WriteHeader<T>() -> void
CsvHelper.IWriterRow.WriteRecord<T>(T record) -> void
CsvHelper.MissingFieldException
CsvHelper.MissingFieldException.MissingFieldException(CsvHelper.ReadingContext context) -> void
CsvHelper.MissingFieldException.MissingFieldException(CsvHelper.ReadingContext context, string message) -> void
CsvHelper.MissingFieldException.MissingFieldException(CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.ObjectResolver
CsvHelper.ObjectResolver.CanResolve.get -> System.Func<System.Type, bool>
CsvHelper.ObjectResolver.ObjectResolver() -> void
CsvHelper.ObjectResolver.ObjectResolver(System.Func<System.Type, bool> canResolve, System.Func<System.Type, object[], object> resolveFunction, bool useFallback = true) -> void
CsvHelper.ObjectResolver.Resolve(System.Type type, params object[] constructorArgs) -> object
CsvHelper.ObjectResolver.Resolve<T>(params object[] constructorArgs) -> T
CsvHelper.ObjectResolver.ResolveFunction.get -> System.Func<System.Type, object[], object>
CsvHelper.ObjectResolver.UseFallback.get -> bool
CsvHelper.ParserException
CsvHelper.ParserException.ParserException(CsvHelper.ReadingContext context) -> void
CsvHelper.ParserException.ParserException(CsvHelper.ReadingContext context, string message) -> void
CsvHelper.ParserException.ParserException(CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.ReaderException
CsvHelper.ReaderException.ReaderException(CsvHelper.ReadingContext context) -> void
CsvHelper.ReaderException.ReaderException(CsvHelper.ReadingContext context, string message) -> void
CsvHelper.ReaderException.ReaderException(CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.ReadingContext
CsvHelper.ReadingContext.Buffer -> char[]
CsvHelper.ReadingContext.BufferPosition -> int
CsvHelper.ReadingContext.BytePosition -> long
CsvHelper.ReadingContext.CharPosition -> long
CsvHelper.ReadingContext.CharsRead -> int
CsvHelper.ReadingContext.ColumnCount -> int
CsvHelper.ReadingContext.CreateRecordFuncs -> System.Collections.Generic.Dictionary<System.Type, System.Delegate>
CsvHelper.ReadingContext.CurrentIndex -> int
CsvHelper.ReadingContext.Field.get -> string
CsvHelper.ReadingContext.FieldBuilder -> System.Text.StringBuilder
CsvHelper.ReadingContext.FieldEndPosition -> int
CsvHelper.ReadingContext.FieldStartPosition -> int
CsvHelper.ReadingContext.HasBeenRead -> bool
CsvHelper.ReadingContext.HeaderRecord -> string[]
CsvHelper.ReadingContext.HydrateRecordActions -> System.Collections.Generic.Dictionary<System.Type, System.Delegate>
CsvHelper.ReadingContext.IsFieldBad -> bool
CsvHelper.ReadingContext.LeaveOpen -> bool
CsvHelper.ReadingContext.NamedIndexCache -> System.Collections.Generic.Dictionary<string, (string, int)>
CsvHelper.ReadingContext.NamedIndexes -> System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<int>>
CsvHelper.ReadingContext.ParserConfiguration.get -> CsvHelper.Configuration.IParserConfiguration
CsvHelper.ReadingContext.RawRecord.get -> string
CsvHelper.ReadingContext.RawRecordBuilder -> System.Text.StringBuilder
CsvHelper.ReadingContext.RawRecordEndPosition -> int
CsvHelper.ReadingContext.RawRecordStartPosition -> int
CsvHelper.ReadingContext.RawRow -> int
CsvHelper.ReadingContext.Reader -> System.IO.TextReader
CsvHelper.ReadingContext.ReaderConfiguration.get -> CsvHelper.Configuration.IReaderConfiguration
CsvHelper.ReadingContext.ReadingContext(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
CsvHelper.ReadingContext.Record -> string[]
CsvHelper.ReadingContext.RecordBuilder -> CsvHelper.RecordBuilder
CsvHelper.ReadingContext.ReusableMemberMapData -> CsvHelper.Configuration.MemberMapData
CsvHelper.ReadingContext.Row -> int
CsvHelper.ReadingContext.TypeConverterOptionsCache -> System.Collections.Generic.Dictionary<System.Type, CsvHelper.TypeConversion.TypeConverterOptions>
CsvHelper.RecordBuilder
CsvHelper.RecordBuilder.Capacity.get -> int
CsvHelper.RecordBuilder.Length.get -> int
CsvHelper.RecordBuilder.RecordBuilder() -> void
CsvHelper.RecordBuilder.RecordBuilder(int capacity) -> void
CsvHelper.ReflectionExtensions
CsvHelper.TypeConversion.ArrayConverter
CsvHelper.TypeConversion.ArrayConverter.ArrayConverter() -> void
CsvHelper.TypeConversion.BigIntegerConverter
CsvHelper.TypeConversion.BigIntegerConverter.BigIntegerConverter() -> void
CsvHelper.TypeConversion.BooleanConverter
CsvHelper.TypeConversion.BooleanConverter.BooleanConverter() -> void
CsvHelper.TypeConversion.ByteArrayConverter
CsvHelper.TypeConversion.ByteArrayConverter.ByteArrayConverter(CsvHelper.TypeConversion.ByteArrayConverterOptions options = CsvHelper.TypeConversion.ByteArrayConverterOptions.Hexadecimal | CsvHelper.TypeConversion.ByteArrayConverterOptions.HexInclude0x) -> void
CsvHelper.TypeConversion.ByteArrayConverterOptions
CsvHelper.TypeConversion.ByteArrayConverterOptions.Base64 = 2 -> CsvHelper.TypeConversion.ByteArrayConverterOptions
CsvHelper.TypeConversion.ByteArrayConverterOptions.HexDashes = 4 -> CsvHelper.TypeConversion.ByteArrayConverterOptions
CsvHelper.TypeConversion.ByteArrayConverterOptions.HexInclude0x = 8 -> CsvHelper.TypeConversion.ByteArrayConverterOptions
CsvHelper.TypeConversion.ByteArrayConverterOptions.Hexadecimal = 1 -> CsvHelper.TypeConversion.ByteArrayConverterOptions
CsvHelper.TypeConversion.ByteArrayConverterOptions.None = 0 -> CsvHelper.TypeConversion.ByteArrayConverterOptions
CsvHelper.TypeConversion.ByteConverter
CsvHelper.TypeConversion.ByteConverter.ByteConverter() -> void
CsvHelper.TypeConversion.CharConverter
CsvHelper.TypeConversion.CharConverter.CharConverter() -> void
CsvHelper.TypeConversion.CollectionGenericConverter
CsvHelper.TypeConversion.CollectionGenericConverter.CollectionGenericConverter() -> void
CsvHelper.TypeConversion.DateTimeConverter
CsvHelper.TypeConversion.DateTimeConverter.DateTimeConverter() -> void
CsvHelper.TypeConversion.DateTimeOffsetConverter
CsvHelper.TypeConversion.DateTimeOffsetConverter.DateTimeOffsetConverter() -> void
CsvHelper.TypeConversion.DecimalConverter
CsvHelper.TypeConversion.DecimalConverter.DecimalConverter() -> void
CsvHelper.TypeConversion.DefaultTypeConverter
CsvHelper.TypeConversion.DefaultTypeConverter.DefaultTypeConverter() -> void
CsvHelper.TypeConversion.DoubleConverter
CsvHelper.TypeConversion.DoubleConverter.DoubleConverter() -> void
CsvHelper.TypeConversion.EnumConverter
CsvHelper.TypeConversion.EnumConverter.EnumConverter(System.Type type) -> void
CsvHelper.TypeConversion.EnumerableConverter
CsvHelper.TypeConversion.EnumerableConverter.EnumerableConverter() -> void
CsvHelper.TypeConversion.GuidConverter
CsvHelper.TypeConversion.GuidConverter.GuidConverter() -> void
CsvHelper.TypeConversion.IDictionaryConverter
CsvHelper.TypeConversion.IDictionaryConverter.IDictionaryConverter() -> void
CsvHelper.TypeConversion.IDictionaryGenericConverter
CsvHelper.TypeConversion.IDictionaryGenericConverter.IDictionaryGenericConverter() -> void
CsvHelper.TypeConversion.IEnumerableConverter
CsvHelper.TypeConversion.IEnumerableConverter.IEnumerableConverter() -> void
CsvHelper.TypeConversion.IEnumerableGenericConverter
CsvHelper.TypeConversion.IEnumerableGenericConverter.IEnumerableGenericConverter() -> void
CsvHelper.TypeConversion.ITypeConverter
CsvHelper.TypeConversion.ITypeConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
CsvHelper.TypeConversion.ITypeConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
CsvHelper.TypeConversion.Int16Converter
CsvHelper.TypeConversion.Int16Converter.Int16Converter() -> void
CsvHelper.TypeConversion.Int32Converter
CsvHelper.TypeConversion.Int32Converter.Int32Converter() -> void
CsvHelper.TypeConversion.Int64Converter
CsvHelper.TypeConversion.Int64Converter.Int64Converter() -> void
CsvHelper.TypeConversion.NullableConverter
CsvHelper.TypeConversion.NullableConverter.NullableConverter(System.Type type, CsvHelper.TypeConversion.TypeConverterCache typeConverterFactory) -> void
CsvHelper.TypeConversion.NullableConverter.NullableType.get -> System.Type
CsvHelper.TypeConversion.NullableConverter.UnderlyingType.get -> System.Type
CsvHelper.TypeConversion.NullableConverter.UnderlyingTypeConverter.get -> CsvHelper.TypeConversion.ITypeConverter
CsvHelper.TypeConversion.SByteConverter
CsvHelper.TypeConversion.SByteConverter.SByteConverter() -> void
CsvHelper.TypeConversion.SingleConverter
CsvHelper.TypeConversion.SingleConverter.SingleConverter() -> void
CsvHelper.TypeConversion.StringConverter
CsvHelper.TypeConversion.StringConverter.StringConverter() -> void
CsvHelper.TypeConversion.TimeSpanConverter
CsvHelper.TypeConversion.TimeSpanConverter.TimeSpanConverter() -> void
CsvHelper.TypeConversion.TypeConverter
CsvHelper.TypeConversion.TypeConverter.TypeConverter() -> void
CsvHelper.TypeConversion.TypeConverterCache
CsvHelper.TypeConversion.TypeConverterCache.AddConverter(System.Type type, CsvHelper.TypeConversion.ITypeConverter typeConverter) -> void
CsvHelper.TypeConversion.TypeConverterCache.AddConverter<T>(CsvHelper.TypeConversion.ITypeConverter typeConverter) -> void
CsvHelper.TypeConversion.TypeConverterCache.GetConverter(System.Reflection.MemberInfo member) -> CsvHelper.TypeConversion.ITypeConverter
CsvHelper.TypeConversion.TypeConverterCache.GetConverter(System.Type type) -> CsvHelper.TypeConversion.ITypeConverter
CsvHelper.TypeConversion.TypeConverterCache.GetConverter<T>() -> CsvHelper.TypeConversion.ITypeConverter
CsvHelper.TypeConversion.TypeConverterCache.RemoveConverter(System.Type type) -> void
CsvHelper.TypeConversion.TypeConverterCache.RemoveConverter<T>() -> void
CsvHelper.TypeConversion.TypeConverterCache.TypeConverterCache() -> void
CsvHelper.TypeConversion.TypeConverterException
CsvHelper.TypeConversion.TypeConverterException.MemberMapData.get -> CsvHelper.Configuration.MemberMapData
CsvHelper.TypeConversion.TypeConverterException.Text.get -> string
CsvHelper.TypeConversion.TypeConverterException.TypeConverter.get -> CsvHelper.TypeConversion.ITypeConverter
CsvHelper.TypeConversion.TypeConverterException.TypeConverterException(CsvHelper.TypeConversion.ITypeConverter typeConverter, CsvHelper.Configuration.MemberMapData memberMapData, object value, CsvHelper.WritingContext context) -> void
CsvHelper.TypeConversion.TypeConverterException.TypeConverterException(CsvHelper.TypeConversion.ITypeConverter typeConverter, CsvHelper.Configuration.MemberMapData memberMapData, object value, CsvHelper.WritingContext context, string message) -> void
CsvHelper.TypeConversion.TypeConverterException.TypeConverterException(CsvHelper.TypeConversion.ITypeConverter typeConverter, CsvHelper.Configuration.MemberMapData memberMapData, object value, CsvHelper.WritingContext context, string message, System.Exception innerException) -> void
CsvHelper.TypeConversion.TypeConverterException.TypeConverterException(CsvHelper.TypeConversion.ITypeConverter typeConverter, CsvHelper.Configuration.MemberMapData memberMapData, string text, CsvHelper.ReadingContext context) -> void
CsvHelper.TypeConversion.TypeConverterException.TypeConverterException(CsvHelper.TypeConversion.ITypeConverter typeConverter, CsvHelper.Configuration.MemberMapData memberMapData, string text, CsvHelper.ReadingContext context, string message) -> void
CsvHelper.TypeConversion.TypeConverterException.TypeConverterException(CsvHelper.TypeConversion.ITypeConverter typeConverter, CsvHelper.Configuration.MemberMapData memberMapData, string text, CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.TypeConversion.TypeConverterException.Value.get -> object
CsvHelper.TypeConversion.TypeConverterOptions
CsvHelper.TypeConversion.TypeConverterOptions.BooleanFalseValues.get -> System.Collections.Generic.List<string>
CsvHelper.TypeConversion.TypeConverterOptions.BooleanTrueValues.get -> System.Collections.Generic.List<string>
CsvHelper.TypeConversion.TypeConverterOptions.CultureInfo.get -> System.Globalization.CultureInfo
CsvHelper.TypeConversion.TypeConverterOptions.CultureInfo.set -> void
CsvHelper.TypeConversion.TypeConverterOptions.DateTimeStyle.get -> System.Globalization.DateTimeStyles?
CsvHelper.TypeConversion.TypeConverterOptions.DateTimeStyle.set -> void
CsvHelper.TypeConversion.TypeConverterOptions.Formats.get -> string[]
CsvHelper.TypeConversion.TypeConverterOptions.Formats.set -> void
CsvHelper.TypeConversion.TypeConverterOptions.NullValues.get -> System.Collections.Generic.List<string>
CsvHelper.TypeConversion.TypeConverterOptions.NumberStyle.get -> System.Globalization.NumberStyles?
CsvHelper.TypeConversion.TypeConverterOptions.NumberStyle.set -> void
CsvHelper.TypeConversion.TypeConverterOptions.TimeSpanStyle.get -> System.Globalization.TimeSpanStyles?
CsvHelper.TypeConversion.TypeConverterOptions.TimeSpanStyle.set -> void
CsvHelper.TypeConversion.TypeConverterOptions.TypeConverterOptions() -> void
CsvHelper.TypeConversion.TypeConverterOptions.UriKind.get -> System.UriKind?
CsvHelper.TypeConversion.TypeConverterOptions.UriKind.set -> void
CsvHelper.TypeConversion.TypeConverterOptionsCache
CsvHelper.TypeConversion.TypeConverterOptionsCache.AddOptions(System.Type type, CsvHelper.TypeConversion.TypeConverterOptions options) -> void
CsvHelper.TypeConversion.TypeConverterOptionsCache.AddOptions<T>(CsvHelper.TypeConversion.TypeConverterOptions options) -> void
CsvHelper.TypeConversion.TypeConverterOptionsCache.GetOptions(System.Type type) -> CsvHelper.TypeConversion.TypeConverterOptions
CsvHelper.TypeConversion.TypeConverterOptionsCache.GetOptions<T>() -> CsvHelper.TypeConversion.TypeConverterOptions
CsvHelper.TypeConversion.TypeConverterOptionsCache.RemoveOptions(System.Type type) -> void
CsvHelper.TypeConversion.TypeConverterOptionsCache.RemoveOptions<T>() -> void
CsvHelper.TypeConversion.TypeConverterOptionsCache.TypeConverterOptionsCache() -> void
CsvHelper.TypeConversion.UInt16Converter
CsvHelper.TypeConversion.UInt16Converter.UInt16Converter() -> void
CsvHelper.TypeConversion.UInt32Converter
CsvHelper.TypeConversion.UInt32Converter.UInt32Converter() -> void
CsvHelper.TypeConversion.UInt64Converter
CsvHelper.TypeConversion.UInt64Converter.UInt64Converter() -> void
CsvHelper.TypeConversion.UriConverter
CsvHelper.TypeConversion.UriConverter.UriConverter() -> void
CsvHelper.ValidationException
CsvHelper.ValidationException.ValidationException(CsvHelper.ReadingContext context) -> void
CsvHelper.ValidationException.ValidationException(CsvHelper.ReadingContext context, string message) -> void
CsvHelper.ValidationException.ValidationException(CsvHelper.ReadingContext context, string message, System.Exception innerException) -> void
CsvHelper.WriterException
CsvHelper.WriterException.WriterException(CsvHelper.WritingContext context) -> void
CsvHelper.WriterException.WriterException(CsvHelper.WritingContext context, string message) -> void
CsvHelper.WriterException.WriterException(CsvHelper.WritingContext context, string message, System.Exception innerException) -> void
CsvHelper.WritingContext
CsvHelper.WritingContext.ClearCache(CsvHelper.Caches cache) -> void
CsvHelper.WritingContext.ReusableMemberMapData.get -> CsvHelper.Configuration.MemberMapData
CsvHelper.WritingContext.ReusableMemberMapData.set -> void
CsvHelper.WritingContext.TypeActions.get -> System.Collections.Generic.Dictionary<int, System.Delegate>
CsvHelper.WritingContext.TypeConverterOptionsCache.get -> System.Collections.Generic.Dictionary<System.Type, CsvHelper.TypeConversion.TypeConverterOptions>
CsvHelper.WritingContext.WritingContext(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration, bool leaveOpen) -> void
ParquetClassLibrary.All
ParquetClassLibrary.AssemblyInfo
ParquetClassLibrary.AssemblyInfo.AssemblyInfo() -> void
ParquetClassLibrary.Beings.BeingModel
ParquetClassLibrary.Beings.BeingModel.AvoidsIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingModel.BeingModel(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inNativeBiomeID = null, ParquetClassLibrary.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inSeeksIDs = null) -> void
ParquetClassLibrary.Beings.BeingModel.NativeBiomeID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.BeingModel.PrimaryBehaviorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.BeingModel.SeeksIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus
ParquetClassLibrary.Beings.BeingStatus.BeingDefinition.get -> ParquetClassLibrary.Beings.BeingModel
ParquetClassLibrary.Beings.BeingStatus.BeingStatus(ParquetClassLibrary.Beings.BeingModel inBeingDefinition, ParquetClassLibrary.ModelID inCurrentBehavior, ParquetClassLibrary.Location inPosition, ParquetClassLibrary.Location inSpawnAt, int inBiomeTimeRemaining, float inBuildingSpeed, float inModificationSpeed, float inGatheringSpeed, float inMovementSpeed, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownBeings = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownParquets = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownRoomRecipes = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownCraftingRecipes = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inQuests = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inInventory = null) -> void
ParquetClassLibrary.Beings.BeingStatus.BiomeTimeRemaining.get -> int
ParquetClassLibrary.Beings.BeingStatus.BiomeTimeRemaining.set -> void
ParquetClassLibrary.Beings.BeingStatus.BuildingSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.BuildingSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.CurrentBehaviorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.BeingStatus.CurrentBehaviorID.set -> void
ParquetClassLibrary.Beings.BeingStatus.GatheringSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.GatheringSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.Inventory.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownBeings.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownCraftingRecipes.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownParquets.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownRoomRecipes.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.ModificationSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.ModificationSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.MovementSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.MovementSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.Position.get -> ParquetClassLibrary.Location
ParquetClassLibrary.Beings.BeingStatus.Position.set -> void
ParquetClassLibrary.Beings.BeingStatus.Quests.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.Revision.get -> int
ParquetClassLibrary.Beings.BeingStatus.RoomAssignment.get -> ParquetClassLibrary.Location
ParquetClassLibrary.Beings.BeingStatus.RoomAssignment.set -> void
ParquetClassLibrary.Beings.BeingStatus.SpawnAt.get -> ParquetClassLibrary.Location
ParquetClassLibrary.Beings.BeingStatus.SpawnAt.set -> void
ParquetClassLibrary.Beings.CharacterModel
ParquetClassLibrary.Beings.CharacterModel.CharacterModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inNativeBiomeID = null, ParquetClassLibrary.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inSeeksIDs = null, string inPronouns = "they/them", string inStoryCharacterID = "", System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inStartingQuestIDs = null, ParquetClassLibrary.ModelID? inStartingDialogueID = null, ParquetClassLibrary.Items.Inventory inStartingInventory = null) -> void
ParquetClassLibrary.Beings.CharacterModel.FamilyName.get -> string
ParquetClassLibrary.Beings.CharacterModel.PersonalName.get -> string
ParquetClassLibrary.Beings.CharacterModel.PronounKey.get -> string
ParquetClassLibrary.Beings.CharacterModel.StartingDialogueID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.CharacterModel.StartingInventory.get -> ParquetClassLibrary.Items.Inventory
ParquetClassLibrary.Beings.CharacterModel.StartingQuestIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.CharacterModel.StoryCharacterID.get -> string
ParquetClassLibrary.Beings.CritterModel
ParquetClassLibrary.Beings.CritterModel.CritterModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inNativeBiomeID = null, ParquetClassLibrary.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inSeeksIDs = null) -> void
ParquetClassLibrary.Beings.PronounGroup
ParquetClassLibrary.Beings.PronounGroup.Determiner.get -> string
ParquetClassLibrary.Beings.PronounGroup.FillInPronouns(System.Text.StringBuilder inText) -> System.Text.StringBuilder
ParquetClassLibrary.Beings.PronounGroup.FillInPronouns(string inText) -> System.Text.StringBuilder
ParquetClassLibrary.Beings.PronounGroup.GetKey() -> string
ParquetClassLibrary.Beings.PronounGroup.Objective.get -> string
ParquetClassLibrary.Beings.PronounGroup.Possessive.get -> string
ParquetClassLibrary.Beings.PronounGroup.PronounGroup(string inSubjective, string inObjective, string inDeterminer, string inPossessive, string inReflexive) -> void
ParquetClassLibrary.Beings.PronounGroup.Reflexive.get -> string
ParquetClassLibrary.Beings.PronounGroup.Subjective.get -> string
ParquetClassLibrary.Biomes.BiomeConfiguration
ParquetClassLibrary.Biomes.BiomeRecipe
ParquetClassLibrary.Biomes.BiomeRecipe.BiomeRecipe(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inTier = 0, bool inIsRoomBased = false, bool inIsLiquidBased = false, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inParquetCriteria = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inEntryRequirements = null) -> void
ParquetClassLibrary.Biomes.BiomeRecipe.EntryRequirements.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Biomes.BiomeRecipe.IsLiquidBased.get -> bool
ParquetClassLibrary.Biomes.BiomeRecipe.IsRoomBased.get -> bool
ParquetClassLibrary.Biomes.BiomeRecipe.ParquetCriteria.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Biomes.BiomeRecipe.Tier.get -> int
ParquetClassLibrary.Crafts.CraftConfiguration
ParquetClassLibrary.Crafts.CraftingRecipe
ParquetClassLibrary.Crafts.CraftingRecipe.CraftingRecipe(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inProducts = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inIngredients = null, ParquetClassLibrary.Crafts.StrikePanelGrid inPanelPattern = null) -> void
ParquetClassLibrary.Crafts.CraftingRecipe.Ingredients.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Crafts.CraftingRecipe.PanelPattern.get -> ParquetClassLibrary.Crafts.StrikePanelGrid
ParquetClassLibrary.Crafts.CraftingRecipe.Products.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Crafts.StrikePanel
ParquetClassLibrary.Crafts.StrikePanel.Clone() -> ParquetClassLibrary.Crafts.StrikePanel
ParquetClassLibrary.Crafts.StrikePanel.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Crafts.StrikePanel.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Crafts.StrikePanel.Equals(ParquetClassLibrary.Crafts.StrikePanel inStrikePanel) -> bool
ParquetClassLibrary.Crafts.StrikePanel.IdealRange.get -> ParquetClassLibrary.Range<int>
ParquetClassLibrary.Crafts.StrikePanel.IdealRange.set -> void
ParquetClassLibrary.Crafts.StrikePanel.StrikePanel() -> void
ParquetClassLibrary.Crafts.StrikePanel.StrikePanel(ParquetClassLibrary.Range<int> inWorkingRange, ParquetClassLibrary.Range<int> inIdealRange) -> void
ParquetClassLibrary.Crafts.StrikePanel.WorkingRange.get -> ParquetClassLibrary.Range<int>
ParquetClassLibrary.Crafts.StrikePanel.WorkingRange.set -> void
ParquetClassLibrary.Crafts.StrikePanelArrayExtensions
ParquetClassLibrary.Crafts.StrikePanelGrid
ParquetClassLibrary.Crafts.StrikePanelGrid.Columns.get -> int
ParquetClassLibrary.Crafts.StrikePanelGrid.Count.get -> int
ParquetClassLibrary.Crafts.StrikePanelGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Crafts.StrikePanelGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Crafts.StrikePanelGrid.Rows.get -> int
ParquetClassLibrary.Crafts.StrikePanelGrid.StrikePanelGrid() -> void
ParquetClassLibrary.Crafts.StrikePanelGrid.StrikePanelGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.Crafts.StrikePanelGrid.this[int y, int x].get -> ParquetClassLibrary.Crafts.StrikePanel
ParquetClassLibrary.Delimiters
ParquetClassLibrary.EditorSupport.IMutablMapRegion
ParquetClassLibrary.EditorSupport.IMutablMapRegion.BackgroundColor.get -> string
ParquetClassLibrary.EditorSupport.IMutablMapRegion.BackgroundColor.set -> void
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionAboveID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionAboveID.set -> void
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionBelowID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionBelowID.set -> void
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheEastID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheEastID.set -> void
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheNorthID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheNorthID.set -> void
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheSouthID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheSouthID.set -> void
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheWestID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutablMapRegion.RegionToTheWestID.set -> void
ParquetClassLibrary.EditorSupport.IMutableBeingModel
ParquetClassLibrary.EditorSupport.IMutableBeingModel.AvoidsIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IMutableBeingModel.NativeBiomeID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableBeingModel.NativeBiomeID.set -> void
ParquetClassLibrary.EditorSupport.IMutableBeingModel.PrimaryBehaviorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableBeingModel.PrimaryBehaviorID.set -> void
ParquetClassLibrary.EditorSupport.IMutableBeingModel.SeeksIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.EntryRequirements.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.IsLiquidBased.get -> bool
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.IsLiquidBased.set -> void
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.IsRoomBased.get -> bool
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.IsRoomBased.set -> void
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.ParquetCriteria.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.Tier.get -> int
ParquetClassLibrary.EditorSupport.IMutableBiomeRecipe.Tier.set -> void
ParquetClassLibrary.EditorSupport.IMutableBlockModel
ParquetClassLibrary.EditorSupport.IMutableBlockModel.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableBlockModel.CollectibleID.set -> void
ParquetClassLibrary.EditorSupport.IMutableBlockModel.GatherEffect.get -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.EditorSupport.IMutableBlockModel.GatherEffect.set -> void
ParquetClassLibrary.EditorSupport.IMutableBlockModel.GatherTool.get -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.EditorSupport.IMutableBlockModel.GatherTool.set -> void
ParquetClassLibrary.EditorSupport.IMutableBlockModel.IsFlammable.get -> bool
ParquetClassLibrary.EditorSupport.IMutableBlockModel.IsFlammable.set -> void
ParquetClassLibrary.EditorSupport.IMutableBlockModel.IsLiquid.get -> bool
ParquetClassLibrary.EditorSupport.IMutableBlockModel.IsLiquid.set -> void
ParquetClassLibrary.EditorSupport.IMutableBlockModel.MaxToughness.get -> int
ParquetClassLibrary.EditorSupport.IMutableBlockModel.MaxToughness.set -> void
ParquetClassLibrary.EditorSupport.IMutableCharacterModel
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.FamilyName.get -> string
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.FamilyName.set -> void
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.PersonalName.get -> string
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.PersonalName.set -> void
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.Pronouns.get -> string
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.Pronouns.set -> void
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.StartingDialogueID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.StartingDialogueID.set -> void
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.StartingQuestIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.StoryCharacterID.get -> string
ParquetClassLibrary.EditorSupport.IMutableCharacterModel.StoryCharacterID.set -> void
ParquetClassLibrary.EditorSupport.IMutableCollectibleModel
ParquetClassLibrary.EditorSupport.IMutableCollectibleModel.CollectionEffect.get -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.EditorSupport.IMutableCollectibleModel.CollectionEffect.set -> void
ParquetClassLibrary.EditorSupport.IMutableCollectibleModel.EffectAmount.get -> int
ParquetClassLibrary.EditorSupport.IMutableCollectibleModel.EffectAmount.set -> void
ParquetClassLibrary.EditorSupport.IMutableCraftingRecipe
ParquetClassLibrary.EditorSupport.IMutableCraftingRecipe.Ingredients.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IMutableCraftingRecipe.PanelPattern.get -> ParquetClassLibrary.Crafts.StrikePanelGrid
ParquetClassLibrary.EditorSupport.IMutableCraftingRecipe.Products.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IMutableCritterModel
ParquetClassLibrary.EditorSupport.IMutableFloorModel
ParquetClassLibrary.EditorSupport.IMutableFloorModel.ModTool.get -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.EditorSupport.IMutableFloorModel.ModTool.set -> void
ParquetClassLibrary.EditorSupport.IMutableFloorModel.TrenchName.get -> string
ParquetClassLibrary.EditorSupport.IMutableFloorModel.TrenchName.set -> void
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.Entry.get -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.Entry.set -> void
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.IsEnclosing.get -> bool
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.IsEnclosing.set -> void
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.IsFlammable.get -> bool
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.IsFlammable.set -> void
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.IsWalkable.get -> bool
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.IsWalkable.set -> void
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.SwapID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableFurnishingModel.SwapID.set -> void
ParquetClassLibrary.EditorSupport.IMutableGameModel
ParquetClassLibrary.EditorSupport.IMutableGameModel.EpisodeNumber.get -> int
ParquetClassLibrary.EditorSupport.IMutableGameModel.EpisodeNumber.set -> void
ParquetClassLibrary.EditorSupport.IMutableGameModel.EpisodeTitle.get -> string
ParquetClassLibrary.EditorSupport.IMutableGameModel.EpisodeTitle.set -> void
ParquetClassLibrary.EditorSupport.IMutableGameModel.FirstScriptID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableGameModel.FirstScriptID.set -> void
ParquetClassLibrary.EditorSupport.IMutableGameModel.IsEpisode.get -> bool
ParquetClassLibrary.EditorSupport.IMutableGameModel.IsEpisode.set -> void
ParquetClassLibrary.EditorSupport.IMutableGameModel.PlayerCharacterID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableGameModel.PlayerCharacterID.set -> void
ParquetClassLibrary.EditorSupport.IMutableInteractionModel
ParquetClassLibrary.EditorSupport.IMutableInteractionModel.OutcomesIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IMutableInteractionModel.PrerequisitesIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IMutableInteractionModel.StepsIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IMutableItemModel
ParquetClassLibrary.EditorSupport.IMutableItemModel.EffectWhenUsedID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableItemModel.EffectWhenUsedID.set -> void
ParquetClassLibrary.EditorSupport.IMutableItemModel.EffectWhileHeldID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableItemModel.EffectWhileHeldID.set -> void
ParquetClassLibrary.EditorSupport.IMutableItemModel.ItemTags.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IMutableItemModel.ParquetID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableItemModel.ParquetID.set -> void
ParquetClassLibrary.EditorSupport.IMutableItemModel.Price.get -> int
ParquetClassLibrary.EditorSupport.IMutableItemModel.Price.set -> void
ParquetClassLibrary.EditorSupport.IMutableItemModel.Rarity.get -> int
ParquetClassLibrary.EditorSupport.IMutableItemModel.Rarity.set -> void
ParquetClassLibrary.EditorSupport.IMutableItemModel.StackMax.get -> int
ParquetClassLibrary.EditorSupport.IMutableItemModel.StackMax.set -> void
ParquetClassLibrary.EditorSupport.IMutableItemModel.Subtype.get -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.EditorSupport.IMutableItemModel.Subtype.set -> void
ParquetClassLibrary.EditorSupport.IMutableModel
ParquetClassLibrary.EditorSupport.IMutableModel.Comment.get -> string
ParquetClassLibrary.EditorSupport.IMutableModel.Comment.set -> void
ParquetClassLibrary.EditorSupport.IMutableModel.Description.get -> string
ParquetClassLibrary.EditorSupport.IMutableModel.Description.set -> void
ParquetClassLibrary.EditorSupport.IMutableModel.ID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableModel.ID.set -> void
ParquetClassLibrary.EditorSupport.IMutableModel.Name.get -> string
ParquetClassLibrary.EditorSupport.IMutableModel.Name.set -> void
ParquetClassLibrary.EditorSupport.IMutableModelCollection<TModel>
ParquetClassLibrary.EditorSupport.IMutableModelCollection<TModel>.Add(TModel inModel) -> void
ParquetClassLibrary.EditorSupport.IMutableModelCollection<TModel>.Clear() -> void
ParquetClassLibrary.EditorSupport.IMutableModelCollection<TModel>.Remove(ParquetClassLibrary.ModelID inID) -> void
ParquetClassLibrary.EditorSupport.IMutableModelCollection<TModel>.Remove(TModel inModel) -> void
ParquetClassLibrary.EditorSupport.IMutableModelCollection<TModel>.Replace(TModel inModel) -> void
ParquetClassLibrary.EditorSupport.IMutableParquetModel
ParquetClassLibrary.EditorSupport.IMutableParquetModel.AddsToBiome.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IMutableParquetModel.AddsToRoom.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IMutableParquetModel.ItemID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMutableParquetModel.ItemID.set -> void
ParquetClassLibrary.EditorSupport.IMutablePronounGroup
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Determiner.get -> string
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Determiner.set -> void
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Objective.get -> string
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Objective.set -> void
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Possessive.get -> string
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Possessive.set -> void
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Reflexive.get -> string
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Reflexive.set -> void
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Subjective.get -> string
ParquetClassLibrary.EditorSupport.IMutablePronounGroup.Subjective.set -> void
ParquetClassLibrary.EditorSupport.IMutableRoomRecipe
ParquetClassLibrary.EditorSupport.IMutableRoomRecipe.MinimumWalkableSpaces.get -> int
ParquetClassLibrary.EditorSupport.IMutableRoomRecipe.MinimumWalkableSpaces.set -> void
ParquetClassLibrary.EditorSupport.IMutableRoomRecipe.OptionallyRequiredFurnishings.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IMutableRoomRecipe.OptionallyRequiredPerimeterBlocks.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IMutableRoomRecipe.OptionallyRequiredWalkableFloors.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IMutableScriptModel
ParquetClassLibrary.EditorSupport.IMutableScriptModel.Nodes.get -> System.Collections.Generic.IList<ParquetClassLibrary.Scripts.ScriptNode>
ParquetClassLibrary.EditorSupport.MapAnalysis
ParquetClassLibrary.EmptyTolerantEnumConverter
ParquetClassLibrary.EmptyTolerantEnumConverter.EmptyTolerantEnumConverter(System.Type inType) -> void
ParquetClassLibrary.Games.GameModel
ParquetClassLibrary.Games.GameModel.EpisodeNumber.get -> int
ParquetClassLibrary.Games.GameModel.EpisodeTitle.get -> string
ParquetClassLibrary.Games.GameModel.FirstScriptID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Games.GameModel.GameModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, bool inIsEpisode = false, string inEpisodeTitle = "", int inEpisodeNumber = 0, ParquetClassLibrary.ModelID? inPlayerCharacterID = null, ParquetClassLibrary.ModelID? inFirstScriptID = null) -> void
ParquetClassLibrary.Games.GameModel.IsEpisode.get -> bool
ParquetClassLibrary.Games.GameModel.PlayerCharacterID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.GridConverter<TElement, TGrid>
ParquetClassLibrary.GridConverter<TElement, TGrid>.GridConverter() -> void
ParquetClassLibrary.IGrid<TElement>
ParquetClassLibrary.IGrid<TElement>.Columns.get -> int
ParquetClassLibrary.IGrid<TElement>.Rows.get -> int
ParquetClassLibrary.IGrid<TElement>.this[int y, int x].get -> TElement
ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Axe = 2 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Bucket = 4 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.None = 0 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Pick = 1 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Shovel = 3 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.Inventory
ParquetClassLibrary.Items.Inventory.Add(ParquetClassLibrary.Items.InventorySlot inSlot) -> void
ParquetClassLibrary.Items.Inventory.Capacity.get -> int
ParquetClassLibrary.Items.Inventory.Clear() -> void
ParquetClassLibrary.Items.Inventory.Contains(ParquetClassLibrary.Items.InventorySlot inSlot) -> bool
ParquetClassLibrary.Items.Inventory.Contains(ParquetClassLibrary.ModelID inItemID) -> int
ParquetClassLibrary.Items.Inventory.CopyTo(ParquetClassLibrary.Items.InventorySlot[] inArray, int inArrayIndex) -> void
ParquetClassLibrary.Items.Inventory.Count.get -> int
ParquetClassLibrary.Items.Inventory.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Items.InventorySlot>
ParquetClassLibrary.Items.Inventory.Give(ParquetClassLibrary.Items.InventorySlot inSlot) -> int
ParquetClassLibrary.Items.Inventory.Give(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> int
ParquetClassLibrary.Items.Inventory.Has(ParquetClassLibrary.Items.InventorySlot inSlot) -> bool
ParquetClassLibrary.Items.Inventory.Has(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> bool
ParquetClassLibrary.Items.Inventory.Has(System.Collections.Generic.IEnumerable<(ParquetClassLibrary.ModelID, int)> inItems) -> bool
ParquetClassLibrary.Items.Inventory.Has(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.InventorySlot> inSlots) -> bool
ParquetClassLibrary.Items.Inventory.Inventory() -> void
ParquetClassLibrary.Items.Inventory.Inventory(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.InventorySlot> inSlots, int inCapacity) -> void
ParquetClassLibrary.Items.Inventory.Inventory(int inCapacity) -> void
ParquetClassLibrary.Items.Inventory.IsReadOnly.get -> bool
ParquetClassLibrary.Items.Inventory.Remove(ParquetClassLibrary.Items.InventorySlot inSlot) -> bool
ParquetClassLibrary.Items.Inventory.Take(ParquetClassLibrary.Items.InventorySlot inSlot) -> int
ParquetClassLibrary.Items.Inventory.Take(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> int
ParquetClassLibrary.Items.InventoryCob
ParquetClassLibrary.Items.InventoryCob.Capacity.get -> int
ParquetClassLibrary.Items.InventoryCob.Contains(ParquetClassLibrary.ModelID inItemID) -> int
ParquetClassLibrary.Items.InventoryCob.Count.get -> int
ParquetClassLibrary.Items.InventoryCob.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Items.InventorySlot>
ParquetClassLibrary.Items.InventoryCob.Give(ParquetClassLibrary.Items.InventorySlot inSlot) -> int
ParquetClassLibrary.Items.InventoryCob.Give(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> int
ParquetClassLibrary.Items.InventoryCob.Has(ParquetClassLibrary.Items.InventorySlot inSlot) -> bool
ParquetClassLibrary.Items.InventoryCob.Has(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> bool
ParquetClassLibrary.Items.InventoryCob.Has(System.Collections.Generic.IEnumerable<(ParquetClassLibrary.ModelID, int)> inItems) -> bool
ParquetClassLibrary.Items.InventoryCob.Has(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.InventorySlot> inSlots) -> bool
ParquetClassLibrary.Items.InventoryCob.InventoryCob() -> void
ParquetClassLibrary.Items.InventoryCob.InventoryCob(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.InventorySlot> inSlots, int inCapacity) -> void
ParquetClassLibrary.Items.InventoryCob.InventoryCob(int inCapacity) -> void
ParquetClassLibrary.Items.InventoryCob.Take(ParquetClassLibrary.Items.InventorySlot inSlot) -> int
ParquetClassLibrary.Items.InventoryCob.Take(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> int
ParquetClassLibrary.Items.InventorySlot
ParquetClassLibrary.Items.InventorySlot.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Items.InventorySlot.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Items.InventorySlot.Count.get -> int
ParquetClassLibrary.Items.InventorySlot.Give(int inHowMany = 1) -> int
ParquetClassLibrary.Items.InventorySlot.InventorySlot() -> void
ParquetClassLibrary.Items.InventorySlot.InventorySlot(ParquetClassLibrary.ModelID inItemToStore, int inHowMany = 1) -> void
ParquetClassLibrary.Items.InventorySlot.ItemID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.InventorySlot.Take(int inHowMany = 1) -> int
ParquetClassLibrary.Items.ItemModel
ParquetClassLibrary.Items.ItemModel.EffectWhenUsedID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.ItemModel.EffectWhileHeldID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.ItemModel.ItemModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.Items.ItemType inSubtype = ParquetClassLibrary.Items.ItemType.Other, int inPrice = 0, int inRarity = 0, int inStackMax = 999, ParquetClassLibrary.ModelID? inEffectWhileHeldID = null, ParquetClassLibrary.ModelID? inEffectWhenUsedID = null, ParquetClassLibrary.ModelID? inParquetID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inItemTags = null) -> void
ParquetClassLibrary.Items.ItemModel.ItemTags.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Items.ItemModel.ParquetID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.ItemModel.Price.get -> int
ParquetClassLibrary.Items.ItemModel.Rarity.get -> int
ParquetClassLibrary.Items.ItemModel.StackMax.get -> int
ParquetClassLibrary.Items.ItemModel.Subtype.get -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Consumable = 1 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Equipment = 2 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.KeyItem = 3 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Material = 4 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Other = 0 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Storage = 5 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.ToolForGathering = 6 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.ToolForModification = 7 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Items.ModificationTool.Hammer = 2 -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Items.ModificationTool.None = 0 -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Items.ModificationTool.Shovel = 1 -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Location
ParquetClassLibrary.Location.Equals(ParquetClassLibrary.Location inLocation) -> bool
ParquetClassLibrary.Location.Location() -> void
ParquetClassLibrary.Location.Position.get -> ParquetClassLibrary.Vector2D
ParquetClassLibrary.Location.RegionID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.ChunkDetail
ParquetClassLibrary.Maps.ChunkDetail.BaseComposition.get -> ParquetClassLibrary.ModelTag
ParquetClassLibrary.Maps.ChunkDetail.BaseTopography.get -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkDetail.ChunkDetail() -> void
ParquetClassLibrary.Maps.ChunkDetail.ChunkDetail(ParquetClassLibrary.Maps.ChunkTopography inBaseTopography, ParquetClassLibrary.ModelTag inBaseComposition, ParquetClassLibrary.Maps.ChunkTopography inModifierTopography, ParquetClassLibrary.ModelTag inModifierComposition) -> void
ParquetClassLibrary.Maps.ChunkDetail.Clone() -> ParquetClassLibrary.Maps.ChunkDetail
ParquetClassLibrary.Maps.ChunkDetail.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Maps.ChunkDetail.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Maps.ChunkDetail.Equals(ParquetClassLibrary.Maps.ChunkDetail inChunkType) -> bool
ParquetClassLibrary.Maps.ChunkDetail.ModifierComposition.get -> ParquetClassLibrary.ModelTag
ParquetClassLibrary.Maps.ChunkDetail.ModifierTopography.get -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Central = 4 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Clustered = 3 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.East = 7 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Empty = 0 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.North = 5 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.NorthEast = 6 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.NorthWest = 12 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Scattered = 2 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Solid = 1 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.South = 9 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.SouthEast = 8 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.SouthWest = 10 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.West = 11 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.MapAnalysis
ParquetClassLibrary.Maps.MapChunkModel
ParquetClassLibrary.Maps.MapChunkModel.Details.get -> ParquetClassLibrary.Maps.ChunkDetail
ParquetClassLibrary.Maps.MapChunkModel.Generate() -> ParquetClassLibrary.Maps.MapChunkModel
ParquetClassLibrary.Maps.MapChunkModel.IsFilledOut.get -> bool
ParquetClassLibrary.Maps.MapChunkModel.MapChunkModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0, bool inIsFilledOut = false, ParquetClassLibrary.Maps.ChunkDetail inDetails = null, ParquetClassLibrary.Parquets.ParquetStackGrid inParquetDefinitions = null) -> void
ParquetClassLibrary.Maps.MapModel
ParquetClassLibrary.Maps.MapModel.GetSubregion() -> ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Maps.MapModel.GetSubregion(ParquetClassLibrary.Vector2D inUpperLeft, ParquetClassLibrary.Vector2D inLowerRight) -> ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Maps.MapModel.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Maps.MapModel.MapModel(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0) -> void
ParquetClassLibrary.Maps.MapModel.ParquetsCount.get -> int
ParquetClassLibrary.Maps.MapModel.Revision.get -> int
ParquetClassLibrary.Maps.MapModel.Revision.set -> void
ParquetClassLibrary.Maps.MapRegionModel
ParquetClassLibrary.Maps.MapRegionModel.BackgroundColor.get -> string
ParquetClassLibrary.Maps.MapRegionModel.GetBiome() -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.MapRegionModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0, string inBackgroundColor = "#FFFFFFFF", ParquetClassLibrary.ModelID? inRegionToTheNorth = null, ParquetClassLibrary.ModelID? inRegionToTheEast = null, ParquetClassLibrary.ModelID? inRegionToTheSouth = null, ParquetClassLibrary.ModelID? inRegionToTheWest = null, ParquetClassLibrary.ModelID? inRegionAbove = null, ParquetClassLibrary.ModelID? inRegionBelow = null, ParquetClassLibrary.Parquets.ParquetStatusGrid inParquetStatuses = null, ParquetClassLibrary.Parquets.ParquetStackGrid inParquetDefinitions = null) -> void
ParquetClassLibrary.Maps.MapRegionModel.ParquetStatuses.get -> ParquetClassLibrary.Parquets.ParquetStatusGrid
ParquetClassLibrary.Maps.MapRegionModel.RegionAbove.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionBelow.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheEast.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheNorth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheSouth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheWest.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.Rooms.get -> ParquetClassLibrary.Rooms.RoomCollection
ParquetClassLibrary.Maps.MapRegionSketch
ParquetClassLibrary.Maps.MapRegionSketch.BackgroundColor.get -> string
ParquetClassLibrary.Maps.MapRegionSketch.Chunks.get -> ParquetClassLibrary.ModelIDGrid
ParquetClassLibrary.Maps.MapRegionSketch.MapRegionSketch(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0, string inBackgroundColor = "#FFFFFFFF", ParquetClassLibrary.ModelID? inRegionToTheNorth = null, ParquetClassLibrary.ModelID? inRegionToTheEast = null, ParquetClassLibrary.ModelID? inRegionToTheSouth = null, ParquetClassLibrary.ModelID? inRegionToTheWest = null, ParquetClassLibrary.ModelID? inRegionAbove = null, ParquetClassLibrary.ModelID? inRegionBelow = null, ParquetClassLibrary.ModelIDGrid inChunks = null) -> void
ParquetClassLibrary.Maps.MapRegionSketch.RegionAbove.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionBelow.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheEast.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheNorth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheSouth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheWest.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.Stitch() -> ParquetClassLibrary.Maps.MapRegionModel
ParquetClassLibrary.Model
ParquetClassLibrary.Model.Comment.get -> string
ParquetClassLibrary.Model.Description.get -> string
ParquetClassLibrary.Model.Equals(ParquetClassLibrary.Model inModel) -> bool
ParquetClassLibrary.Model.ID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Model.Model(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment) -> void
ParquetClassLibrary.Model.Name.get -> string
ParquetClassLibrary.ModelCollection
ParquetClassLibrary.ModelCollection.Get(ParquetClassLibrary.ModelID inID) -> ParquetClassLibrary.Model
ParquetClassLibrary.ModelCollection.ModelCollection(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection.ModelCollection(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection<TModel>
ParquetClassLibrary.ModelCollection<TModel>.Bounds.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
ParquetClassLibrary.ModelCollection<TModel>.Contains(ParquetClassLibrary.Model inModel) -> bool
ParquetClassLibrary.ModelCollection<TModel>.Contains(ParquetClassLibrary.ModelID inID) -> bool
ParquetClassLibrary.ModelCollection<TModel>.Count.get -> int
ParquetClassLibrary.ModelCollection<TModel>.Get<TTarget>(ParquetClassLibrary.ModelID inID) -> TTarget
ParquetClassLibrary.ModelCollection<TModel>.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Model>
ParquetClassLibrary.ModelCollection<TModel>.GetOrNull(ParquetClassLibrary.ModelID inID) -> TModel
ParquetClassLibrary.ModelCollection<TModel>.GetRecordsForType<TModelInner>(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds) -> ParquetClassLibrary.ModelCollection<TModel>
ParquetClassLibrary.ModelCollection<TModel>.GetRecordsForType<TModelInner>(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBounds) -> ParquetClassLibrary.ModelCollection<TModel>
ParquetClassLibrary.ModelCollection<TModel>.ModelCollection(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection<TModel>.ModelCollection(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection<TModel>.PutRecordsForType<TModelInner>() -> void
ParquetClassLibrary.ModelID
ParquetClassLibrary.ModelID.CompareTo(ParquetClassLibrary.ModelID inIDentifier) -> int
ParquetClassLibrary.ModelID.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.ModelID.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.ModelID.Equals(ParquetClassLibrary.ModelID inIDentifier) -> bool
ParquetClassLibrary.ModelID.IsValidForRange(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inRange) -> bool
ParquetClassLibrary.ModelID.IsValidForRange(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inRanges) -> bool
ParquetClassLibrary.ModelID.ModelID() -> void
ParquetClassLibrary.ModelIDGrid
ParquetClassLibrary.ModelIDGrid.Columns.get -> int
ParquetClassLibrary.ModelIDGrid.Count.get -> int
ParquetClassLibrary.ModelIDGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.ModelIDGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.ModelIDGrid.ModelIDGrid() -> void
ParquetClassLibrary.ModelIDGrid.ModelIDGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.ModelIDGrid.Rows.get -> int
ParquetClassLibrary.ModelIDGrid.this[int y, int x].get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.ModelTag
ParquetClassLibrary.ModelTag.CompareTo(ParquetClassLibrary.ModelTag inTag) -> int
ParquetClassLibrary.ModelTag.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.ModelTag.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.ModelTag.ModelTag() -> void
ParquetClassLibrary.Parquets.BlockModel
ParquetClassLibrary.Parquets.BlockModel.BlockModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, ParquetClassLibrary.Items.GatheringTool inGatherTool = ParquetClassLibrary.Items.GatheringTool.None, ParquetClassLibrary.Parquets.GatheringEffect inGatherEffect = ParquetClassLibrary.Parquets.GatheringEffect.None, ParquetClassLibrary.ModelID? inCollectibleID = null, bool inIsFlammable = false, bool inIsLiquid = false, int inMaxToughness = 10) -> void
ParquetClassLibrary.Parquets.BlockModel.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.BlockModel.GatherEffect.get -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.BlockModel.GatherTool.get -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Parquets.BlockModel.IsFlammable.get -> bool
ParquetClassLibrary.Parquets.BlockModel.IsLiquid.get -> bool
ParquetClassLibrary.Parquets.BlockModel.MaxToughness.get -> int
ParquetClassLibrary.Parquets.CollectibleModel
ParquetClassLibrary.Parquets.CollectibleModel.CollectibleModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, ParquetClassLibrary.Parquets.CollectingEffect inCollectionEffect = ParquetClassLibrary.Parquets.CollectingEffect.None, int inEffectAmount = 0) -> void
ParquetClassLibrary.Parquets.CollectibleModel.CollectionEffect.get -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectibleModel.EffectAmount.get -> int
ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectingEffect.BiomeTime = 2 -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectingEffect.Item = 1 -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectingEffect.None = 0 -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.Down = 3 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.None = 0 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.Room = 1 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.Up = 2 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.FloorModel
ParquetClassLibrary.Parquets.FloorModel.FloorModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, ParquetClassLibrary.Items.ModificationTool inModTool = ParquetClassLibrary.Items.ModificationTool.None, string inTrenchName = "dark hole") -> void
ParquetClassLibrary.Parquets.FloorModel.ModTool.get -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Parquets.FloorModel.TrenchName.get -> string
ParquetClassLibrary.Parquets.FurnishingModel
ParquetClassLibrary.Parquets.FurnishingModel.Entry.get -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.FurnishingModel.FurnishingModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, bool inIsWalkable = false, ParquetClassLibrary.Parquets.EntryType inEntry = ParquetClassLibrary.Parquets.EntryType.None, bool inIsEnclosing = false, bool inIsFlammable = false, ParquetClassLibrary.ModelID? inSwapID = null) -> void
ParquetClassLibrary.Parquets.FurnishingModel.IsEnclosing.get -> bool
ParquetClassLibrary.Parquets.FurnishingModel.IsFlammable.get -> bool
ParquetClassLibrary.Parquets.FurnishingModel.IsWalkable.get -> bool
ParquetClassLibrary.Parquets.FurnishingModel.SwapID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.GatheringEffect.Collectible = 2 -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.GatheringEffect.Item = 1 -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.GatheringEffect.None = 0 -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.IParquetStack
ParquetClassLibrary.Parquets.IParquetStack.BlockID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.FloorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.FurnishingID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.IsEmpty.get -> bool
ParquetClassLibrary.Parquets.ParquetModel
ParquetClassLibrary.Parquets.ParquetModel.AddsToBiome.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Parquets.ParquetModel.AddsToRoom.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Parquets.ParquetModel.ItemID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetModel.ParquetModel(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null) -> void
ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Parquets.ParquetStack.BlockID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.BlockID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.Clone() -> ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Parquets.ParquetStack.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.CollectibleID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Parquets.ParquetStack.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Parquets.ParquetStack.Count.get -> int
ParquetClassLibrary.Parquets.ParquetStack.Equals(ParquetClassLibrary.Parquets.ParquetStack inStack) -> bool
ParquetClassLibrary.Parquets.ParquetStack.FloorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.FloorID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.FurnishingID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.FurnishingID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.IsEmpty.get -> bool
ParquetClassLibrary.Parquets.ParquetStack.IsEnclosing.get -> bool
ParquetClassLibrary.Parquets.ParquetStack.ParquetStack() -> void
ParquetClassLibrary.Parquets.ParquetStack.ParquetStack(ParquetClassLibrary.ModelID inFloor, ParquetClassLibrary.ModelID inBlock, ParquetClassLibrary.ModelID inFurnishing, ParquetClassLibrary.ModelID inCollectible) -> void
ParquetClassLibrary.Parquets.ParquetStackArrayExtensions
ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Parquets.ParquetStackGrid.Columns.get -> int
ParquetClassLibrary.Parquets.ParquetStackGrid.Count.get -> int
ParquetClassLibrary.Parquets.ParquetStackGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Parquets.ParquetStackGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Parquets.ParquetStackGrid.ParquetStackGrid() -> void
ParquetClassLibrary.Parquets.ParquetStackGrid.ParquetStackGrid(ParquetClassLibrary.Parquets.ParquetStack[,] inParquetStackArray) -> void
ParquetClassLibrary.Parquets.ParquetStackGrid.ParquetStackGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.Parquets.ParquetStackGrid.Rows.get -> int
ParquetClassLibrary.Parquets.ParquetStackGrid.this[int y, int x].get -> ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Parquets.ParquetStatus
ParquetClassLibrary.Parquets.ParquetStatus.Clone() -> ParquetClassLibrary.Parquets.ParquetStatus
ParquetClassLibrary.Parquets.ParquetStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Parquets.ParquetStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Parquets.ParquetStatus.Equals(ParquetClassLibrary.Parquets.ParquetStatus inStatus) -> bool
ParquetClassLibrary.Parquets.ParquetStatus.IsTrench.get -> bool
ParquetClassLibrary.Parquets.ParquetStatus.IsTrench.set -> void
ParquetClassLibrary.Parquets.ParquetStatus.ParquetStatus() -> void
ParquetClassLibrary.Parquets.ParquetStatus.ParquetStatus(bool inIsTrench = false, int inToughness = 10, int inMaxToughness = 10) -> void
ParquetClassLibrary.Parquets.ParquetStatus.Toughness.get -> int
ParquetClassLibrary.Parquets.ParquetStatus.Toughness.set -> void
ParquetClassLibrary.Parquets.ParquetStatusArrayExtensions
ParquetClassLibrary.Parquets.ParquetStatusGrid
ParquetClassLibrary.Parquets.ParquetStatusGrid.Columns.get -> int
ParquetClassLibrary.Parquets.ParquetStatusGrid.Count.get -> int
ParquetClassLibrary.Parquets.ParquetStatusGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Parquets.ParquetStatusGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Parquets.ParquetStatusGrid.ParquetStatusGrid() -> void
ParquetClassLibrary.Parquets.ParquetStatusGrid.ParquetStatusGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.Parquets.ParquetStatusGrid.Rows.get -> int
ParquetClassLibrary.Parquets.ParquetStatusGrid.this[int y, int x].get -> ParquetClassLibrary.Parquets.ParquetStatus
ParquetClassLibrary.Precondition
ParquetClassLibrary.Range<TElement>
ParquetClassLibrary.Range<TElement>.ContainsRange(ParquetClassLibrary.Range<TElement> inRange) -> bool
ParquetClassLibrary.Range<TElement>.ContainsValue(TElement inValue) -> bool
ParquetClassLibrary.Range<TElement>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Range<TElement>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Range<TElement>.Equals(ParquetClassLibrary.Range<TElement> inRange) -> bool
ParquetClassLibrary.Range<TElement>.IsValid() -> bool
ParquetClassLibrary.Range<TElement>.Maximum.get -> TElement
ParquetClassLibrary.Range<TElement>.Minimum.get -> TElement
ParquetClassLibrary.Range<TElement>.Range(TElement inMinimum, TElement inMaximum) -> void
ParquetClassLibrary.RangeCollectionExtensions
ParquetClassLibrary.RecipeElement
ParquetClassLibrary.RecipeElement.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.RecipeElement.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.RecipeElement.ElementAmount.get -> int
ParquetClassLibrary.RecipeElement.ElementTag.get -> ParquetClassLibrary.ModelTag
ParquetClassLibrary.RecipeElement.Equals(ParquetClassLibrary.RecipeElement inElement) -> bool
ParquetClassLibrary.RecipeElement.RecipeElement() -> void
ParquetClassLibrary.RecipeElement.RecipeElement(int inElementAmount, ParquetClassLibrary.ModelTag inElementTag) -> void
ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Content.get -> ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Rooms.MapSpace.EastNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Equals(ParquetClassLibrary.Rooms.MapSpace inSpace) -> bool
ParquetClassLibrary.Rooms.MapSpace.IsEmpty.get -> bool
ParquetClassLibrary.Rooms.MapSpace.IsEnclosing.get -> bool
ParquetClassLibrary.Rooms.MapSpace.MapSpace(ParquetClassLibrary.Vector2D inPosition, ParquetClassLibrary.Parquets.ParquetStack inContent, ParquetClassLibrary.Parquets.ParquetStackGrid inSubregion) -> void
ParquetClassLibrary.Rooms.MapSpace.MapSpace(int inX, int inY, ParquetClassLibrary.Parquets.ParquetStack inContent, ParquetClassLibrary.Parquets.ParquetStackGrid inSubregion) -> void
ParquetClassLibrary.Rooms.MapSpace.Neighbor(ParquetClassLibrary.Vector2D inOffset) -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Neighbors() -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Rooms.MapSpace>
ParquetClassLibrary.Rooms.MapSpace.NorthNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Position.get -> ParquetClassLibrary.Vector2D
ParquetClassLibrary.Rooms.MapSpace.SouthNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Subregion.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Rooms.MapSpace.WestNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpaceCollection
ParquetClassLibrary.Rooms.MapSpaceCollection.Contains(ParquetClassLibrary.Rooms.MapSpace inSpace) -> bool
ParquetClassLibrary.Rooms.MapSpaceCollection.Count.get -> int
ParquetClassLibrary.Rooms.MapSpaceCollection.First.get -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpaceCollection.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Rooms.MapSpaceCollection.MapSpaceCollection(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Rooms.MapSpace> inSpaces) -> void
ParquetClassLibrary.Rooms.MapSpaceCollection.SetEquals(ParquetClassLibrary.Rooms.MapSpaceCollection inEqualTo) -> bool
ParquetClassLibrary.Rooms.Room
ParquetClassLibrary.Rooms.Room.ContainsPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Rooms.Room.Equals(ParquetClassLibrary.Rooms.Room inRoom) -> bool
ParquetClassLibrary.Rooms.Room.FurnishingTags.get -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Rooms.Room.Perimeter.get -> ParquetClassLibrary.Rooms.MapSpaceCollection
ParquetClassLibrary.Rooms.Room.Position.get -> ParquetClassLibrary.Vector2D
ParquetClassLibrary.Rooms.Room.RecipeID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Rooms.Room.Room(ParquetClassLibrary.Rooms.MapSpaceCollection inWalkableArea, ParquetClassLibrary.Rooms.MapSpaceCollection inPerimeter) -> void
ParquetClassLibrary.Rooms.Room.WalkableArea.get -> ParquetClassLibrary.Rooms.MapSpaceCollection
ParquetClassLibrary.Rooms.RoomCollection
ParquetClassLibrary.Rooms.RoomCollection.Contains(ParquetClassLibrary.Rooms.Room inRoom) -> bool
ParquetClassLibrary.Rooms.RoomCollection.Count.get -> int
ParquetClassLibrary.Rooms.RoomCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Rooms.Room>
ParquetClassLibrary.Rooms.RoomCollection.GetRoomAt(ParquetClassLibrary.Vector2D inPosition) -> ParquetClassLibrary.Rooms.Room
ParquetClassLibrary.Rooms.RoomConfiguration
ParquetClassLibrary.Rooms.RoomRecipe
ParquetClassLibrary.Rooms.RoomRecipe.Matches(ParquetClassLibrary.Rooms.Room inRoom) -> bool
ParquetClassLibrary.Rooms.RoomRecipe.MinimumWalkableSpaces.get -> int
ParquetClassLibrary.Rooms.RoomRecipe.OptionallyRequiredFurnishings.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Rooms.RoomRecipe.OptionallyRequiredPerimeterBlocks.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Rooms.RoomRecipe.OptionallyRequiredWalkableFloors.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Rooms.RoomRecipe.Priority.get -> int
ParquetClassLibrary.Rooms.RoomRecipe.RoomRecipe(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int? inMinimumWalkableSpaces = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inOptionallyRequiredFurnishings = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inOptionallyRequiredWalkableFloors = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inOptionallyRequiredPerimeterBlocks = null) -> void
ParquetClassLibrary.Scripts.Commands
ParquetClassLibrary.Scripts.InteractionModel
ParquetClassLibrary.Scripts.InteractionModel.InteractionModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inPrerequisitesIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inStepsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inOutcomesIDs = null) -> void
ParquetClassLibrary.Scripts.InteractionModel.OutcomesIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Scripts.InteractionModel.PrerequisitesIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Scripts.InteractionModel.StepsIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Scripts.InteractionStatus
ParquetClassLibrary.Scripts.InteractionStatus.InteractionDefinition.get -> ParquetClassLibrary.Scripts.InteractionModel
ParquetClassLibrary.Scripts.InteractionStatus.InteractionStatus(ParquetClassLibrary.Scripts.InteractionModel inInteractionDefinition, ParquetClassLibrary.Scripts.RunState inState, int inProgramCounter) -> void
ParquetClassLibrary.Scripts.InteractionStatus.ProgramCounter.get -> int
ParquetClassLibrary.Scripts.InteractionStatus.ProgramCounter.set -> void
ParquetClassLibrary.Scripts.InteractionStatus.Revision.get -> int
ParquetClassLibrary.Scripts.InteractionStatus.State.get -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.InteractionStatus.State.set -> void
ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.RunState.Completed = 2 -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.RunState.InProgress = 1 -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.RunState.Unstarted = 0 -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.ScriptModel
ParquetClassLibrary.Scripts.ScriptModel.GetActions() -> System.Collections.Generic.IEnumerable<System.Action>
ParquetClassLibrary.Scripts.ScriptModel.Nodes.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Scripts.ScriptNode>
ParquetClassLibrary.Scripts.ScriptModel.ScriptModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Scripts.ScriptNode> inNodes = null) -> void
ParquetClassLibrary.Scripts.ScriptNode
ParquetClassLibrary.Scripts.ScriptNode.CompareTo(ParquetClassLibrary.Scripts.ScriptNode inTag) -> int
ParquetClassLibrary.Scripts.ScriptNode.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Scripts.ScriptNode.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Scripts.ScriptNode.GetAction() -> System.Action
ParquetClassLibrary.Scripts.ScriptNode.ScriptNode() -> void
ParquetClassLibrary.SeriesConverter<TElement, TCollection>
ParquetClassLibrary.SeriesConverter<TElement, TCollection>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData, string inDelimiter) -> object
ParquetClassLibrary.SeriesConverter<TElement, TCollection>.SeriesConverter() -> void
ParquetClassLibrary.Vector2D
ParquetClassLibrary.Vector2D.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Vector2D.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Vector2D.Equals(ParquetClassLibrary.Vector2D inVector) -> bool
ParquetClassLibrary.Vector2D.Magnitude.get -> int
ParquetClassLibrary.Vector2D.Vector2D(int inX, int inY) -> void
ParquetClassLibrary.Vector2D.X.get -> int
ParquetClassLibrary.Vector2D.Y.get -> int
abstract CsvHelper.Expressions.RecordCreator.CreateCreateRecordDelegate(System.Type recordType) -> System.Delegate
abstract CsvHelper.Expressions.RecordWriter.CreateWriteDelegate<T>(T record) -> System.Action<T>
abstract ParquetClassLibrary.Maps.MapModel.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
abstract ParquetClassLibrary.Maps.MapModel.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
const CsvHelper.Configuration.NewLines.CR = "\r" -> string
const CsvHelper.Configuration.NewLines.CRLF = "\r\n" -> string
const CsvHelper.Configuration.NewLines.LF = "\n" -> string
const ParquetClassLibrary.Beings.PronounGroup.DefaultKey = "they/them" -> string
const ParquetClassLibrary.Beings.PronounGroup.DeterminerTag = "|their|" -> string
const ParquetClassLibrary.Beings.PronounGroup.ObjectiveTag = "|them|" -> string
const ParquetClassLibrary.Beings.PronounGroup.PossessiveTag = "|theirs|" -> string
const ParquetClassLibrary.Beings.PronounGroup.ReflexiveTag = "|themselves|" -> string
const ParquetClassLibrary.Beings.PronounGroup.SubjectiveTag = "|they|" -> string
const ParquetClassLibrary.Crafts.StrikePanelGrid.PanelsPerPatternHeight = 4 -> int
const ParquetClassLibrary.Crafts.StrikePanelGrid.PanelsPerPatternWidth = 4 -> int
const ParquetClassLibrary.Delimiters.DimensionalDelimiter = "×" -> string
const ParquetClassLibrary.Delimiters.DimensionalTerminator = "≡" -> string
const ParquetClassLibrary.Delimiters.ElementDelimiter = "–" -> string
const ParquetClassLibrary.Delimiters.InternalDelimiter = "·" -> string
const ParquetClassLibrary.Delimiters.NameDelimiter = "§" -> string
const ParquetClassLibrary.Delimiters.PrimaryDelimiter = "," -> string
const ParquetClassLibrary.Delimiters.PronounDelimiter = "|" -> string
const ParquetClassLibrary.Delimiters.SecondaryDelimiter = "∟" -> string
const ParquetClassLibrary.Items.ItemModel.DefaultStackMax = 999 -> int
const ParquetClassLibrary.Maps.MapChunkModel.ParquetsPerChunkDimension = 16 -> int
const ParquetClassLibrary.Maps.MapRegionModel.ParquetsPerRegionDimension = 64 -> int
const ParquetClassLibrary.Maps.MapRegionSketch.ChunksPerRegionDimension = 4 -> int
const ParquetClassLibrary.Parquets.BlockModel.DefaultMaxToughness = 10 -> int
const ParquetClassLibrary.Parquets.BlockModel.LowestPossibleToughness = 0 -> int
const ParquetClassLibrary.Scripts.Commands.Alert = "A" -> string
const ParquetClassLibrary.Scripts.Commands.CallCharacter = "C" -> string
const ParquetClassLibrary.Scripts.Commands.ClearFlag = "!" -> string
const ParquetClassLibrary.Scripts.Commands.GiveItem = "I" -> string
const ParquetClassLibrary.Scripts.Commands.GiveQuest = "Q" -> string
const ParquetClassLibrary.Scripts.Commands.Jump = "J" -> string
const ParquetClassLibrary.Scripts.Commands.JumpIf = "F" -> string
const ParquetClassLibrary.Scripts.Commands.None = "" -> string
const ParquetClassLibrary.Scripts.Commands.Put = "P" -> string
const ParquetClassLibrary.Scripts.Commands.Say = "S" -> string
const ParquetClassLibrary.Scripts.Commands.SetBehavior = "B" -> string
const ParquetClassLibrary.Scripts.Commands.SetDialogue = "D" -> string
const ParquetClassLibrary.Scripts.Commands.SetFlag = "=" -> string
const ParquetClassLibrary.Scripts.Commands.SetPronoun = "R" -> string
const ParquetClassLibrary.Scripts.Commands.ShowLocation = "L" -> string
override CsvHelper.Expressions.DynamicRecordCreator.CreateCreateRecordDelegate(System.Type recordType) -> System.Delegate
override CsvHelper.Expressions.DynamicRecordWriter.CreateWriteDelegate<T>(T record) -> System.Action<T>
override CsvHelper.Expressions.ExpandoObjectRecordWriter.CreateWriteDelegate<T>(T record) -> System.Action<T>
override CsvHelper.Expressions.ObjectRecordCreator.CreateCreateRecordDelegate(System.Type recordType) -> System.Delegate
override CsvHelper.Expressions.ObjectRecordWriter.CreateWriteDelegate<T>(T record) -> System.Action<T>
override CsvHelper.Expressions.PrimitiveRecordCreator.CreateCreateRecordDelegate(System.Type recordType) -> System.Delegate
override CsvHelper.Expressions.PrimitiveRecordWriter.CreateWriteDelegate<T>(T record) -> System.Action<T>
override CsvHelper.TypeConversion.ArrayConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.BigIntegerConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.BigIntegerConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.BooleanConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.ByteArrayConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.ByteArrayConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.ByteConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.CharConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.CollectionGenericConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.DateTimeConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.DateTimeOffsetConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.DecimalConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.DoubleConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.DoubleConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.EnumConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.EnumerableConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.EnumerableConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.GuidConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.IDictionaryConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.IDictionaryConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.IDictionaryGenericConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.IEnumerableConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.IEnumerableConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.IEnumerableGenericConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.Int16Converter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.Int32Converter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.Int64Converter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.NullableConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.NullableConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.SByteConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.SingleConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.SingleConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.StringConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.TimeSpanConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.TypeConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.TypeConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
override CsvHelper.TypeConversion.UInt16Converter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.UInt32Converter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.UInt64Converter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override CsvHelper.TypeConversion.UriConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
override ParquetClassLibrary.Beings.BeingStatus.ToString() -> string
override ParquetClassLibrary.Beings.PronounGroup.ToString() -> string
override ParquetClassLibrary.Biomes.BiomeRecipe.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
override ParquetClassLibrary.Crafts.StrikePanel.Equals(object obj) -> bool
override ParquetClassLibrary.Crafts.StrikePanel.GetHashCode() -> int
override ParquetClassLibrary.Crafts.StrikePanel.ToString() -> string
override ParquetClassLibrary.EmptyTolerantEnumConverter.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override ParquetClassLibrary.Games.GameModel.ToString() -> string
override ParquetClassLibrary.GridConverter<TElement, TGrid>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override ParquetClassLibrary.GridConverter<TElement, TGrid>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override ParquetClassLibrary.Items.Inventory.ToString() -> string
override ParquetClassLibrary.Items.InventoryCob.ToString() -> string
override ParquetClassLibrary.Items.InventorySlot.ToString() -> string
override ParquetClassLibrary.Items.ItemModel.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
override ParquetClassLibrary.Location.Equals(object obj) -> bool
override ParquetClassLibrary.Location.GetHashCode() -> int
override ParquetClassLibrary.Location.ToString() -> string
override ParquetClassLibrary.Maps.ChunkDetail.Equals(object obj) -> bool
override ParquetClassLibrary.Maps.ChunkDetail.GetHashCode() -> int
override ParquetClassLibrary.Maps.ChunkDetail.ToString() -> string
override ParquetClassLibrary.Maps.MapChunkModel.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
override ParquetClassLibrary.Maps.MapChunkModel.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
override ParquetClassLibrary.Maps.MapChunkModel.ToString() -> string
override ParquetClassLibrary.Maps.MapModel.ToString() -> string
override ParquetClassLibrary.Maps.MapRegionModel.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
override ParquetClassLibrary.Maps.MapRegionModel.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
override ParquetClassLibrary.Maps.MapRegionModel.ToString() -> string
override ParquetClassLibrary.Maps.MapRegionSketch.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
override ParquetClassLibrary.Maps.MapRegionSketch.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
override ParquetClassLibrary.Maps.MapRegionSketch.ToString() -> string
override ParquetClassLibrary.Model.Equals(object obj) -> bool
override ParquetClassLibrary.Model.GetHashCode() -> int
override ParquetClassLibrary.Model.ToString() -> string
override ParquetClassLibrary.ModelCollection<TModel>.ToString() -> string
override ParquetClassLibrary.ModelID.Equals(object obj) -> bool
override ParquetClassLibrary.ModelID.GetHashCode() -> int
override ParquetClassLibrary.ModelID.ToString() -> string
override ParquetClassLibrary.ModelTag.ToString() -> string
override ParquetClassLibrary.Parquets.ParquetModel.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
override ParquetClassLibrary.Parquets.ParquetStack.Equals(object obj) -> bool
override ParquetClassLibrary.Parquets.ParquetStack.GetHashCode() -> int
override ParquetClassLibrary.Parquets.ParquetStack.ToString() -> string
override ParquetClassLibrary.Parquets.ParquetStatus.Equals(object obj) -> bool
override ParquetClassLibrary.Parquets.ParquetStatus.GetHashCode() -> int
override ParquetClassLibrary.Parquets.ParquetStatus.ToString() -> string
override ParquetClassLibrary.Range<TElement>.Equals(object obj) -> bool
override ParquetClassLibrary.Range<TElement>.GetHashCode() -> int
override ParquetClassLibrary.Range<TElement>.ToString() -> string
override ParquetClassLibrary.RecipeElement.Equals(object obj) -> bool
override ParquetClassLibrary.RecipeElement.GetHashCode() -> int
override ParquetClassLibrary.RecipeElement.ToString() -> string
override ParquetClassLibrary.Rooms.MapSpace.Equals(object obj) -> bool
override ParquetClassLibrary.Rooms.MapSpace.GetHashCode() -> int
override ParquetClassLibrary.Rooms.MapSpace.ToString() -> string
override ParquetClassLibrary.Rooms.MapSpaceCollection.ToString() -> string
override ParquetClassLibrary.Rooms.Room.Equals(object obj) -> bool
override ParquetClassLibrary.Rooms.Room.GetHashCode() -> int
override ParquetClassLibrary.Rooms.RoomCollection.ToString() -> string
override ParquetClassLibrary.Scripts.InteractionStatus.ToString() -> string
override ParquetClassLibrary.Scripts.ScriptNode.ToString() -> string
override ParquetClassLibrary.SeriesConverter<TElement, TCollection>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override ParquetClassLibrary.SeriesConverter<TElement, TCollection>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override ParquetClassLibrary.Vector2D.Equals(object obj) -> bool
override ParquetClassLibrary.Vector2D.GetHashCode() -> int
override ParquetClassLibrary.Vector2D.ToString() -> string
static CsvHelper.Configuration.ConfigurationFunctions.BadDataFound(CsvHelper.ReadingContext context) -> void
static CsvHelper.Configuration.ConfigurationFunctions.GetConstructor(System.Type type) -> System.Reflection.ConstructorInfo
static CsvHelper.Configuration.ConfigurationFunctions.HeaderValidated(bool isValid, string[] headerNames, int headerNameIndex, CsvHelper.ReadingContext context) -> void
static CsvHelper.Configuration.ConfigurationFunctions.MissingFieldFound(string[] headerNames, int index, CsvHelper.ReadingContext context) -> void
static CsvHelper.Configuration.ConfigurationFunctions.PrepareHeaderForMatch(string header, int index) -> string
static CsvHelper.Configuration.ConfigurationFunctions.ReadingExceptionOccurred(CsvHelper.CsvHelperException exception) -> bool
static CsvHelper.Configuration.ConfigurationFunctions.ShouldQuote(string field, CsvHelper.WritingContext context) -> bool
static CsvHelper.Configuration.ConfigurationFunctions.ShouldSkipRecord(string[] record) -> bool
static CsvHelper.Configuration.ConfigurationFunctions.ShouldUseConstructorParameters(System.Type type) -> bool
static CsvHelper.Configuration.MemberMap.CreateGeneric(System.Type classType, System.Reflection.MemberInfo member) -> CsvHelper.Configuration.MemberMap
static CsvHelper.ObjectResolver.Current.get -> CsvHelper.IObjectResolver
static CsvHelper.ObjectResolver.Current.set -> void
static CsvHelper.ReflectionExtensions.GetConstructorWithMostParameters(this System.Type type) -> System.Reflection.ConstructorInfo
static CsvHelper.ReflectionExtensions.GetMemberExpression(this System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression) -> System.Linq.Expressions.MemberExpression
static CsvHelper.ReflectionExtensions.HasConstructor(this System.Type type) -> bool
static CsvHelper.ReflectionExtensions.HasParameterlessConstructor(this System.Type type) -> bool
static CsvHelper.ReflectionExtensions.IsAnonymous(this System.Type type) -> bool
static CsvHelper.ReflectionExtensions.IsUserDefinedStruct(this System.Type type) -> bool
static CsvHelper.ReflectionExtensions.MemberType(this System.Reflection.MemberInfo member) -> System.Type
static CsvHelper.TypeConversion.TypeConverterOptions.Merge(params CsvHelper.TypeConversion.TypeConverterOptions[] sources) -> CsvHelper.TypeConversion.TypeConverterOptions
static ParquetClassLibrary.All.Beings.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Beings.BeingModel>
static ParquetClassLibrary.All.Biomes.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Biomes.BiomeRecipe>
static ParquetClassLibrary.All.Blocks.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.BlockModel>
static ParquetClassLibrary.All.Characters.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Beings.CharacterModel>
static ParquetClassLibrary.All.Clear() -> void
static ParquetClassLibrary.All.Collectibles.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.CollectibleModel>
static ParquetClassLibrary.All.CollectionsHaveBeenInitialized.get -> bool
static ParquetClassLibrary.All.CraftingRecipes.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Crafts.CraftingRecipe>
static ParquetClassLibrary.All.Critters.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Beings.CritterModel>
static ParquetClassLibrary.All.Floors.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.FloorModel>
static ParquetClassLibrary.All.Furnishings.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.FurnishingModel>
static ParquetClassLibrary.All.Games.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Games.GameModel>
static ParquetClassLibrary.All.GetIDRangeForType(ParquetClassLibrary.Model inModel) -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.All.GetIDRangeForType(ParquetClassLibrary.ModelID inID) -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.All.GetIDRangeForType(System.Type inModelType) -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.All.InitializeCollections(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.PronounGroup> inPronouns, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.CharacterModel> inCharacters, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.CritterModel> inCritters, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Biomes.BiomeRecipe> inBiomes, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Crafts.CraftingRecipe> inCraftingRecipes, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Games.GameModel> inGames, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Scripts.InteractionModel> inInteractions, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Maps.MapModel> inMaps, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.FloorModel> inFloors, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.BlockModel> inBlocks, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.FurnishingModel> inFurnishings, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.CollectibleModel> inCollectibles, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Rooms.RoomRecipe> inRoomRecipes, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Scripts.ScriptModel> inScripts, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.ItemModel> inItems) -> void
static ParquetClassLibrary.All.Interactions.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Scripts.InteractionModel>
static ParquetClassLibrary.All.Items.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Items.ItemModel>
static ParquetClassLibrary.All.LoadFromCSVs() -> bool
static ParquetClassLibrary.All.Maps.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Maps.MapModel>
static ParquetClassLibrary.All.Parquets.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.ParquetModel>
static ParquetClassLibrary.All.ProjectDirectory.get -> string
static ParquetClassLibrary.All.ProjectDirectory.set -> void
static ParquetClassLibrary.All.PronounGroups.get -> System.Collections.Generic.IReadOnlyCollection<ParquetClassLibrary.Beings.PronounGroup>
static ParquetClassLibrary.All.RoomRecipes.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Rooms.RoomRecipe>
static ParquetClassLibrary.All.SaveToCSVs() -> bool
static ParquetClassLibrary.All.Scripts.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Scripts.ScriptModel>
static ParquetClassLibrary.Beings.PronounGroup.GetFilePath() -> string
static ParquetClassLibrary.Beings.PronounGroup.GetRecords() -> System.Collections.Generic.HashSet<ParquetClassLibrary.Beings.PronounGroup>
static ParquetClassLibrary.Beings.PronounGroup.PutRecords(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.PronounGroup> inGroups) -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.GetFilePath() -> string
static ParquetClassLibrary.Biomes.BiomeConfiguration.GetRecord() -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.LandThreshold.get -> int
static ParquetClassLibrary.Biomes.BiomeConfiguration.LandThresholdFactor.get -> double
static ParquetClassLibrary.Biomes.BiomeConfiguration.LandThresholdFactor.set -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.LiquidThreshold.get -> int
static ParquetClassLibrary.Biomes.BiomeConfiguration.LiquidThresholdFactor.get -> double
static ParquetClassLibrary.Biomes.BiomeConfiguration.LiquidThresholdFactor.set -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.PutRecord() -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.RoomThreshold.get -> int
static ParquetClassLibrary.Biomes.BiomeConfiguration.RoomThresholdFactor.get -> double
static ParquetClassLibrary.Biomes.BiomeConfiguration.RoomThresholdFactor.set -> void
static ParquetClassLibrary.Biomes.BiomeRecipe.None.get -> ParquetClassLibrary.Biomes.BiomeRecipe
static ParquetClassLibrary.Crafts.CraftConfiguration.GetFilePath() -> string
static ParquetClassLibrary.Crafts.CraftConfiguration.GetRecord() -> void
static ParquetClassLibrary.Crafts.CraftConfiguration.IngredientCount.get -> ParquetClassLibrary.Range<int>
static ParquetClassLibrary.Crafts.CraftConfiguration.IngredientCount.set -> void
static ParquetClassLibrary.Crafts.CraftConfiguration.ProductCount.get -> ParquetClassLibrary.Range<int>
static ParquetClassLibrary.Crafts.CraftConfiguration.ProductCount.set -> void
static ParquetClassLibrary.Crafts.CraftConfiguration.PutRecord() -> void
static ParquetClassLibrary.Crafts.CraftingRecipe.NotCraftable.get -> ParquetClassLibrary.Crafts.CraftingRecipe
static ParquetClassLibrary.Crafts.StrikePanel.operator !=(ParquetClassLibrary.Crafts.StrikePanel inStrikePanel1, ParquetClassLibrary.Crafts.StrikePanel inStrikePanel2) -> bool
static ParquetClassLibrary.Crafts.StrikePanel.operator ==(ParquetClassLibrary.Crafts.StrikePanel inStrikePanel1, ParquetClassLibrary.Crafts.StrikePanel inStrikePanel2) -> bool
static ParquetClassLibrary.Crafts.StrikePanelArrayExtensions.IsValidPosition(this ParquetClassLibrary.Crafts.StrikePanel[,] inStrikePanels, ParquetClassLibrary.Vector2D inPosition) -> bool
static ParquetClassLibrary.Crafts.StrikePanelGrid.Empty.get -> ParquetClassLibrary.Crafts.StrikePanelGrid
static ParquetClassLibrary.EditorSupport.MapAnalysis.CheckExitConsistency<TMapType>(ParquetClassLibrary.ModelID inRegionID) -> System.Collections.Generic.List<string>
static ParquetClassLibrary.Items.Inventory.Empty.get -> ParquetClassLibrary.Items.Inventory
static ParquetClassLibrary.Items.InventoryCob.Empty.get -> ParquetClassLibrary.Items.Inventory
static ParquetClassLibrary.Items.InventorySlot.Empty.get -> ParquetClassLibrary.Items.InventorySlot
static ParquetClassLibrary.Location.operator !=(ParquetClassLibrary.Location inLocation1, ParquetClassLibrary.Location inLocation2) -> bool
static ParquetClassLibrary.Location.operator ==(ParquetClassLibrary.Location inLocation1, ParquetClassLibrary.Location inLocation2) -> bool
static ParquetClassLibrary.Maps.ChunkDetail.operator !=(ParquetClassLibrary.Maps.ChunkDetail inChunkType1, ParquetClassLibrary.Maps.ChunkDetail inChunkType2) -> bool
static ParquetClassLibrary.Maps.ChunkDetail.operator ==(ParquetClassLibrary.Maps.ChunkDetail inChunkType1, ParquetClassLibrary.Maps.ChunkDetail inChunkType2) -> bool
static ParquetClassLibrary.Maps.MapAnalysis.CheckExitConsistency<TMapType>(ParquetClassLibrary.ModelID inRegionID) -> System.Collections.Generic.List<string>
static ParquetClassLibrary.Maps.MapChunkModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Maps.MapChunkModel.Empty.get -> ParquetClassLibrary.Maps.MapChunkModel
static ParquetClassLibrary.Maps.MapRegionModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Maps.MapRegionSketch.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Maps.MapRegionSketch.DimensionsInChunks.get -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Model.operator !=(ParquetClassLibrary.Model inModel1, ParquetClassLibrary.Model inModel2) -> bool
static ParquetClassLibrary.Model.operator ==(ParquetClassLibrary.Model inModel1, ParquetClassLibrary.Model inModel2) -> bool
static ParquetClassLibrary.ModelCollection.GetFilePath<TModel>() -> string
static ParquetClassLibrary.ModelID.implicit operator ParquetClassLibrary.ModelID(int inValue) -> ParquetClassLibrary.ModelID
static ParquetClassLibrary.ModelID.implicit operator int(ParquetClassLibrary.ModelID inIDentifier) -> int
static ParquetClassLibrary.ModelID.operator !=(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator <(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator <=(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator ==(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator >(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator >=(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelIDGrid.Empty.get -> ParquetClassLibrary.ModelIDGrid
static ParquetClassLibrary.ModelTag.implicit operator ParquetClassLibrary.ModelTag(string inValue) -> ParquetClassLibrary.ModelTag
static ParquetClassLibrary.ModelTag.implicit operator string(ParquetClassLibrary.ModelTag inTag) -> string
static ParquetClassLibrary.Parquets.BlockModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.CollectibleModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.FloorModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.FurnishingModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.ParquetStack.Empty.get -> ParquetClassLibrary.Parquets.ParquetStack
static ParquetClassLibrary.Parquets.ParquetStack.operator !=(ParquetClassLibrary.Parquets.ParquetStack inStack1, ParquetClassLibrary.Parquets.ParquetStack inStack2) -> bool
static ParquetClassLibrary.Parquets.ParquetStack.operator ==(ParquetClassLibrary.Parquets.ParquetStack inStack1, ParquetClassLibrary.Parquets.ParquetStack inStack2) -> bool
static ParquetClassLibrary.Parquets.ParquetStackArrayExtensions.IsValidPosition(this ParquetClassLibrary.Parquets.ParquetStack[,] inSubregion, ParquetClassLibrary.Vector2D inPosition) -> bool
static ParquetClassLibrary.Parquets.ParquetStackGrid.Empty.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
static ParquetClassLibrary.Parquets.ParquetStatus.Unused.get -> ParquetClassLibrary.Parquets.ParquetStatus
static ParquetClassLibrary.Parquets.ParquetStatus.operator !=(ParquetClassLibrary.Parquets.ParquetStatus inStatus1, ParquetClassLibrary.Parquets.ParquetStatus inStatus2) -> bool
static ParquetClassLibrary.Parquets.ParquetStatus.operator ==(ParquetClassLibrary.Parquets.ParquetStatus inStatus1, ParquetClassLibrary.Parquets.ParquetStatus inStatus2) -> bool
static ParquetClassLibrary.Parquets.ParquetStatusArrayExtensions.IsValidPosition(this ParquetClassLibrary.Parquets.ParquetStatus[,] inSubregion, ParquetClassLibrary.Vector2D inPosition) -> bool
static ParquetClassLibrary.Parquets.ParquetStatusGrid.Empty.get -> ParquetClassLibrary.Parquets.ParquetStatusGrid
static ParquetClassLibrary.Precondition.AreInRange(System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inEnumerable, ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.AreInRange(System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inEnumerable, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBoundsCollection, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.ModelID inID, ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.ModelID inID, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBoundsCollection, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inInnerBounds, ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inOuterBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inInnerBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBoundsCollection, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(int inInt, ParquetClassLibrary.Range<int> inBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsNotNone(ParquetClassLibrary.ModelID inID, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.IsNotNull(object inReference, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.IsNotNullOrEmpty(string inString, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsNotNullOrEmpty<TElement>(System.Collections.Generic.IEnumerable<TElement> inEnumerable, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsOfType<TToCheck, TTarget>(string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.MustBeNonNegative(int inNumber, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.MustBePositive(int inNumber, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Range<TElement>.operator !=(ParquetClassLibrary.Range<TElement> inRange1, ParquetClassLibrary.Range<TElement> inRange2) -> bool
static ParquetClassLibrary.Range<TElement>.operator ==(ParquetClassLibrary.Range<TElement> inRange1, ParquetClassLibrary.Range<TElement> inRange2) -> bool
static ParquetClassLibrary.RangeCollectionExtensions.ContainsRange<TElement>(this System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<TElement>> inRangeCollection, ParquetClassLibrary.Range<TElement> inRange) -> bool
static ParquetClassLibrary.RangeCollectionExtensions.ContainsValue<TElement>(this System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<TElement>> inRangeCollection, TElement inValue) -> bool
static ParquetClassLibrary.RangeCollectionExtensions.IsValid<TElement>(this System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<TElement>> inRangeCollection) -> bool
static ParquetClassLibrary.RecipeElement.operator !=(ParquetClassLibrary.RecipeElement inElement1, ParquetClassLibrary.RecipeElement inElement2) -> bool
static ParquetClassLibrary.RecipeElement.operator ==(ParquetClassLibrary.RecipeElement inElement1, ParquetClassLibrary.RecipeElement inElement2) -> bool
static ParquetClassLibrary.Rooms.MapSpace.operator !=(ParquetClassLibrary.Rooms.MapSpace inSpace1, ParquetClassLibrary.Rooms.MapSpace inSpace2) -> bool
static ParquetClassLibrary.Rooms.MapSpace.operator ==(ParquetClassLibrary.Rooms.MapSpace inSpace1, ParquetClassLibrary.Rooms.MapSpace inSpace2) -> bool
static ParquetClassLibrary.Rooms.MapSpaceCollection.Empty.get -> ParquetClassLibrary.Rooms.MapSpaceCollection
static ParquetClassLibrary.Rooms.MapSpaceCollection.implicit operator ParquetClassLibrary.Rooms.MapSpaceCollection(System.Collections.Generic.HashSet<ParquetClassLibrary.Rooms.MapSpace> inSpaces) -> ParquetClassLibrary.Rooms.MapSpaceCollection
static ParquetClassLibrary.Rooms.MapSpaceCollection.implicit operator System.Collections.Generic.HashSet<ParquetClassLibrary.Rooms.MapSpace>(ParquetClassLibrary.Rooms.MapSpaceCollection inSpaces) -> System.Collections.Generic.HashSet<ParquetClassLibrary.Rooms.MapSpace>
static ParquetClassLibrary.Rooms.Room.operator !=(ParquetClassLibrary.Rooms.Room inRoom1, ParquetClassLibrary.Rooms.Room inRoom2) -> bool
static ParquetClassLibrary.Rooms.Room.operator ==(ParquetClassLibrary.Rooms.Room inRoom1, ParquetClassLibrary.Rooms.Room inRoom2) -> bool
static ParquetClassLibrary.Rooms.RoomCollection.CreateFromSubregion(ParquetClassLibrary.Parquets.ParquetStackGrid inSubregion) -> ParquetClassLibrary.Rooms.RoomCollection
static ParquetClassLibrary.Rooms.RoomConfiguration.GetFilePath() -> string
static ParquetClassLibrary.Rooms.RoomConfiguration.GetRecord() -> void
static ParquetClassLibrary.Rooms.RoomConfiguration.MaxWalkableSpaces.get -> int
static ParquetClassLibrary.Rooms.RoomConfiguration.MaxWalkableSpaces.set -> void
static ParquetClassLibrary.Rooms.RoomConfiguration.MinPerimeterSpaces.get -> int
static ParquetClassLibrary.Rooms.RoomConfiguration.MinWalkableSpaces.get -> int
static ParquetClassLibrary.Rooms.RoomConfiguration.MinWalkableSpaces.set -> void
static ParquetClassLibrary.Rooms.RoomConfiguration.PutRecord() -> void
static ParquetClassLibrary.Scripts.ScriptNode.implicit operator ParquetClassLibrary.Scripts.ScriptNode(string inValue) -> ParquetClassLibrary.Scripts.ScriptNode
static ParquetClassLibrary.Scripts.ScriptNode.implicit operator string(ParquetClassLibrary.Scripts.ScriptNode inNode) -> string
static ParquetClassLibrary.Vector2D.operator !=(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> bool
static ParquetClassLibrary.Vector2D.operator *(int inScalar, ParquetClassLibrary.Vector2D inVector) -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Vector2D.operator +(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Vector2D.operator -(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Vector2D.operator ==(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> bool
static readonly ParquetClassLibrary.All.AllDefinedIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.BeingIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.BiomeIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.BlockIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CharacterIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CollectibleIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CraftingRecipeIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CritterIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.FloorIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.FurnishingIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.GameIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.InteractionIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.ItemIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.MapChunkIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.MapIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.MapRegionIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.ParquetIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.RoomRecipeIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.ScriptIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.AssemblyInfo.LibraryVersion -> string
static readonly ParquetClassLibrary.Beings.PronounGroup.DefaultGroup -> ParquetClassLibrary.Beings.PronounGroup
static readonly ParquetClassLibrary.Crafts.StrikePanel.Unused -> ParquetClassLibrary.Crafts.StrikePanel
static readonly ParquetClassLibrary.Maps.ChunkDetail.None -> ParquetClassLibrary.Maps.ChunkDetail
static readonly ParquetClassLibrary.Maps.MapRegionModel.Empty -> ParquetClassLibrary.Maps.MapRegionModel
static readonly ParquetClassLibrary.Maps.MapRegionSketch.Empty -> ParquetClassLibrary.Maps.MapRegionSketch
static readonly ParquetClassLibrary.ModelCollection.Default -> ParquetClassLibrary.ModelCollection
static readonly ParquetClassLibrary.ModelCollection<TModel>.Default -> ParquetClassLibrary.ModelCollection<TModel>
static readonly ParquetClassLibrary.ModelID.None -> ParquetClassLibrary.ModelID
static readonly ParquetClassLibrary.ModelTag.None -> ParquetClassLibrary.ModelTag
static readonly ParquetClassLibrary.Range<TElement>.None -> ParquetClassLibrary.Range<TElement>
static readonly ParquetClassLibrary.RecipeElement.None -> ParquetClassLibrary.RecipeElement
static readonly ParquetClassLibrary.Rooms.MapSpace.Empty -> ParquetClassLibrary.Rooms.MapSpace
static readonly ParquetClassLibrary.Scripts.ScriptNode.None -> ParquetClassLibrary.Scripts.ScriptNode
static readonly ParquetClassLibrary.Vector2D.East -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.North -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.South -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.Unit -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.West -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.Zero -> ParquetClassLibrary.Vector2D
virtual CsvHelper.Configuration.ClassMap.AutoMap(CsvHelper.Configuration.CsvConfiguration configuration) -> void
virtual CsvHelper.Configuration.ClassMap.AutoMap(System.Globalization.CultureInfo culture) -> void
virtual CsvHelper.Configuration.ClassMap.ClassType.get -> System.Type
virtual CsvHelper.Configuration.ClassMap.GetMaxIndex() -> int
virtual CsvHelper.Configuration.ClassMap.Map() -> CsvHelper.Configuration.MemberMap<object, object>
virtual CsvHelper.Configuration.ClassMap.MemberMaps.get -> CsvHelper.Configuration.MemberMapCollection
virtual CsvHelper.Configuration.ClassMap.ParameterMaps.get -> System.Collections.Generic.List<CsvHelper.Configuration.ParameterMap>
virtual CsvHelper.Configuration.ClassMap.ReIndex(int indexStart = 0) -> int
virtual CsvHelper.Configuration.ClassMap.ReferenceMaps.get -> CsvHelper.Configuration.MemberReferenceMapCollection
virtual CsvHelper.Configuration.ClassMap.References(System.Type classMapType, System.Reflection.MemberInfo member, params object[] constructorArgs) -> CsvHelper.Configuration.MemberReferenceMap
virtual CsvHelper.Configuration.ClassMap<TClass>.Map<TMember>(System.Linq.Expressions.Expression<System.Func<TClass, TMember>> expression, bool useExistingMap = true) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.ClassMap<TClass>.References<TClassMap>(System.Linq.Expressions.Expression<System.Func<TClass, object>> expression, params object[] constructorArgs) -> CsvHelper.Configuration.MemberReferenceMap
virtual CsvHelper.Configuration.ClassMapCollection.Find<T>() -> CsvHelper.Configuration.ClassMap<T>
virtual CsvHelper.Configuration.ClassMapCollection.this[System.Type type].get -> CsvHelper.Configuration.ClassMap
virtual CsvHelper.Configuration.CsvConfiguration.AllowComments.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.AllowComments.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.AutoMap(System.Type type) -> CsvHelper.Configuration.ClassMap
virtual CsvHelper.Configuration.CsvConfiguration.AutoMap<T>() -> CsvHelper.Configuration.ClassMap<T>
virtual CsvHelper.Configuration.CsvConfiguration.BadDataFound.get -> System.Action<CsvHelper.ReadingContext>
virtual CsvHelper.Configuration.CsvConfiguration.BadDataFound.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.BufferSize.get -> int
virtual CsvHelper.Configuration.CsvConfiguration.BufferSize.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.Comment.get -> char
virtual CsvHelper.Configuration.CsvConfiguration.Comment.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.CountBytes.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.CountBytes.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.CultureInfo.get -> System.Globalization.CultureInfo
virtual CsvHelper.Configuration.CsvConfiguration.CultureInfo.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.Delimiter.get -> string
virtual CsvHelper.Configuration.CsvConfiguration.Delimiter.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.DetectColumnCountChanges.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.DetectColumnCountChanges.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.DoubleQuoteString.get -> string
virtual CsvHelper.Configuration.CsvConfiguration.DynamicPropertySort.get -> System.Collections.Generic.IComparer<string>
virtual CsvHelper.Configuration.CsvConfiguration.DynamicPropertySort.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.Encoding.get -> System.Text.Encoding
virtual CsvHelper.Configuration.CsvConfiguration.Encoding.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.Escape.get -> char
virtual CsvHelper.Configuration.CsvConfiguration.Escape.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.GetConstructor.get -> System.Func<System.Type, System.Reflection.ConstructorInfo>
virtual CsvHelper.Configuration.CsvConfiguration.GetConstructor.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.HasHeaderRecord.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.HasHeaderRecord.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.HeaderValidated.get -> System.Action<bool, string[], int, CsvHelper.ReadingContext>
virtual CsvHelper.Configuration.CsvConfiguration.HeaderValidated.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.IgnoreBlankLines.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.IgnoreBlankLines.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.IgnoreQuotes.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.IgnoreQuotes.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.IgnoreReferences.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.IgnoreReferences.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.IncludePrivateMembers.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.IncludePrivateMembers.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.InjectionCharacters.get -> char[]
virtual CsvHelper.Configuration.CsvConfiguration.InjectionCharacters.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.InjectionEscapeCharacter.get -> char
virtual CsvHelper.Configuration.CsvConfiguration.InjectionEscapeCharacter.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.LineBreakInQuotedFieldIsBadData.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.LineBreakInQuotedFieldIsBadData.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.Maps.get -> CsvHelper.Configuration.ClassMapCollection
virtual CsvHelper.Configuration.CsvConfiguration.MemberTypes.get -> CsvHelper.Configuration.MemberTypes
virtual CsvHelper.Configuration.CsvConfiguration.MemberTypes.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.MissingFieldFound.get -> System.Action<string[], int, CsvHelper.ReadingContext>
virtual CsvHelper.Configuration.CsvConfiguration.MissingFieldFound.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.NewLine.get -> CsvHelper.Configuration.NewLine
virtual CsvHelper.Configuration.CsvConfiguration.NewLine.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.NewLineString.get -> string
virtual CsvHelper.Configuration.CsvConfiguration.NewLineString.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.PrepareHeaderForMatch.get -> System.Func<string, int, string>
virtual CsvHelper.Configuration.CsvConfiguration.PrepareHeaderForMatch.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.Quote.get -> char
virtual CsvHelper.Configuration.CsvConfiguration.Quote.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.QuoteString.get -> string
virtual CsvHelper.Configuration.CsvConfiguration.ReadingExceptionOccurred.get -> System.Func<CsvHelper.CsvHelperException, bool>
virtual CsvHelper.Configuration.CsvConfiguration.ReadingExceptionOccurred.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.ReferenceHeaderPrefix.get -> System.Func<System.Type, string, string>
virtual CsvHelper.Configuration.CsvConfiguration.ReferenceHeaderPrefix.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.RegisterClassMap(CsvHelper.Configuration.ClassMap map) -> void
virtual CsvHelper.Configuration.CsvConfiguration.RegisterClassMap(System.Type classMapType) -> CsvHelper.Configuration.ClassMap
virtual CsvHelper.Configuration.CsvConfiguration.RegisterClassMap<TMap>() -> TMap
virtual CsvHelper.Configuration.CsvConfiguration.SanitizeForInjection.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.SanitizeForInjection.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.ShouldSkipRecord.get -> System.Func<string[], bool>
virtual CsvHelper.Configuration.CsvConfiguration.ShouldSkipRecord.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.ShouldUseConstructorParameters.get -> System.Func<System.Type, bool>
virtual CsvHelper.Configuration.CsvConfiguration.ShouldUseConstructorParameters.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.TrimOptions.get -> CsvHelper.Configuration.TrimOptions
virtual CsvHelper.Configuration.CsvConfiguration.TrimOptions.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.TypeConverterCache.get -> CsvHelper.TypeConversion.TypeConverterCache
virtual CsvHelper.Configuration.CsvConfiguration.TypeConverterCache.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.TypeConverterOptionsCache.get -> CsvHelper.TypeConversion.TypeConverterOptionsCache
virtual CsvHelper.Configuration.CsvConfiguration.TypeConverterOptionsCache.set -> void
virtual CsvHelper.Configuration.CsvConfiguration.UnregisterClassMap() -> void
virtual CsvHelper.Configuration.CsvConfiguration.UnregisterClassMap(System.Type classMapType) -> void
virtual CsvHelper.Configuration.CsvConfiguration.UnregisterClassMap<TMap>() -> void
virtual CsvHelper.Configuration.CsvConfiguration.UseNewObjectForNullReferenceMembers.get -> bool
virtual CsvHelper.Configuration.CsvConfiguration.UseNewObjectForNullReferenceMembers.set -> void
virtual CsvHelper.Configuration.MapTypeConverterOption.BooleanValues(bool isTrue, bool clearValues = true, params string[] booleanValues) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo cultureInfo) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles dateTimeStyle) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.Format(params string[] formats) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.NullValues(bool clearValues, params string[] nullValues) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.NullValues(params string[] nullValues) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles numberStyle) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.TimespanStyles(System.Globalization.TimeSpanStyles timeSpanStyles) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MapTypeConverterOption.UriKind(System.UriKind uriKind) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Constant(object constantValue) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Data.get -> CsvHelper.Configuration.MemberMapData
virtual CsvHelper.Configuration.MemberMap.Data.set -> void
virtual CsvHelper.Configuration.MemberMap.Default(object defaultValue) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Default(string defaultValue) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Ignore() -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Ignore(bool ignore) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Index(int index, int indexEnd = -1) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.Name(params string[] names) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.NameIndex(int index) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter typeConverter) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.TypeConverter<TConverter>() -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap.TypeConverterOption.get -> CsvHelper.Configuration.MapTypeConverterOption
virtual CsvHelper.Configuration.MemberMap.TypeConverterOption.set -> void
virtual CsvHelper.Configuration.MemberMap.Validate(System.Func<string, bool> validateExpression) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Constant(TMember constantValue) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.ConvertUsing(System.Func<CsvHelper.IReaderRow, TMember> convertExpression) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.ConvertUsing(System.Func<TClass, string> convertExpression) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Default(TMember defaultValue) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Default(string defaultValue) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Ignore() -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Ignore(bool ignore) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Index(int index, int indexEnd = -1) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Name(params string[] names) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.NameIndex(int index) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Optional() -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.TypeConverter(CsvHelper.TypeConversion.ITypeConverter typeConverter) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.TypeConverter<TConverter>() -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMap<TClass, TMember>.Validate(System.Func<string, bool> validateExpression) -> CsvHelper.Configuration.MemberMap<TClass, TMember>
virtual CsvHelper.Configuration.MemberMapCollection.Add(CsvHelper.Configuration.MemberMap item) -> void
virtual CsvHelper.Configuration.MemberMapCollection.AddMembers(CsvHelper.Configuration.ClassMap mapping) -> void
virtual CsvHelper.Configuration.MemberMapCollection.AddRange(System.Collections.Generic.ICollection<CsvHelper.Configuration.MemberMap> collection) -> void
virtual CsvHelper.Configuration.MemberMapCollection.Clear() -> void
virtual CsvHelper.Configuration.MemberMapCollection.Contains(CsvHelper.Configuration.MemberMap item) -> bool
virtual CsvHelper.Configuration.MemberMapCollection.CopyTo(CsvHelper.Configuration.MemberMap[] array, int arrayIndex) -> void
virtual CsvHelper.Configuration.MemberMapCollection.Count.get -> int
virtual CsvHelper.Configuration.MemberMapCollection.Find(System.Reflection.MemberInfo member) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMapCollection.Find<T>(System.Linq.Expressions.Expression<System.Func<T, object>> expression) -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMapCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<CsvHelper.Configuration.MemberMap>
virtual CsvHelper.Configuration.MemberMapCollection.IndexOf(CsvHelper.Configuration.MemberMap item) -> int
virtual CsvHelper.Configuration.MemberMapCollection.Insert(int index, CsvHelper.Configuration.MemberMap item) -> void
virtual CsvHelper.Configuration.MemberMapCollection.IsReadOnly.get -> bool
virtual CsvHelper.Configuration.MemberMapCollection.Remove(CsvHelper.Configuration.MemberMap item) -> bool
virtual CsvHelper.Configuration.MemberMapCollection.RemoveAt(int index) -> void
virtual CsvHelper.Configuration.MemberMapCollection.this[int index].get -> CsvHelper.Configuration.MemberMap
virtual CsvHelper.Configuration.MemberMapCollection.this[int index].set -> void
virtual CsvHelper.Configuration.MemberMapData.Constant.get -> object
virtual CsvHelper.Configuration.MemberMapData.Constant.set -> void
virtual CsvHelper.Configuration.MemberMapData.Default.get -> object
virtual CsvHelper.Configuration.MemberMapData.Default.set -> void
virtual CsvHelper.Configuration.MemberMapData.Ignore.get -> bool
virtual CsvHelper.Configuration.MemberMapData.Ignore.set -> void
virtual CsvHelper.Configuration.MemberMapData.Index.get -> int
virtual CsvHelper.Configuration.MemberMapData.Index.set -> void
virtual CsvHelper.Configuration.MemberMapData.IndexEnd.get -> int
virtual CsvHelper.Configuration.MemberMapData.IndexEnd.set -> void
virtual CsvHelper.Configuration.MemberMapData.IsConstantSet.get -> bool
virtual CsvHelper.Configuration.MemberMapData.IsConstantSet.set -> void
virtual CsvHelper.Configuration.MemberMapData.IsDefaultSet.get -> bool
virtual CsvHelper.Configuration.MemberMapData.IsDefaultSet.set -> void
virtual CsvHelper.Configuration.MemberMapData.IsIndexSet.get -> bool
virtual CsvHelper.Configuration.MemberMapData.IsIndexSet.set -> void
virtual CsvHelper.Configuration.MemberMapData.IsNameSet.get -> bool
virtual CsvHelper.Configuration.MemberMapData.IsNameSet.set -> void
virtual CsvHelper.Configuration.MemberMapData.IsOptional.get -> bool
virtual CsvHelper.Configuration.MemberMapData.IsOptional.set -> void
virtual CsvHelper.Configuration.MemberMapData.Member.get -> System.Reflection.MemberInfo
virtual CsvHelper.Configuration.MemberMapData.NameIndex.get -> int
virtual CsvHelper.Configuration.MemberMapData.NameIndex.set -> void
virtual CsvHelper.Configuration.MemberMapData.Names.get -> CsvHelper.Configuration.MemberNameCollection
virtual CsvHelper.Configuration.MemberMapData.ReadingConvertExpression.get -> System.Linq.Expressions.Expression
virtual CsvHelper.Configuration.MemberMapData.ReadingConvertExpression.set -> void
virtual CsvHelper.Configuration.MemberMapData.TypeConverter.get -> CsvHelper.TypeConversion.ITypeConverter
virtual CsvHelper.Configuration.MemberMapData.TypeConverter.set -> void
virtual CsvHelper.Configuration.MemberMapData.TypeConverterOptions.get -> CsvHelper.TypeConversion.TypeConverterOptions
virtual CsvHelper.Configuration.MemberMapData.TypeConverterOptions.set -> void
virtual CsvHelper.Configuration.MemberMapData.ValidateExpression.get -> System.Linq.Expressions.Expression
virtual CsvHelper.Configuration.MemberMapData.ValidateExpression.set -> void
virtual CsvHelper.Configuration.MemberMapData.WritingConvertExpression.get -> System.Linq.Expressions.Expression
virtual CsvHelper.Configuration.MemberMapData.WritingConvertExpression.set -> void
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Add(CsvHelper.Configuration.MemberReferenceMap item) -> void
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Clear() -> void
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Contains(CsvHelper.Configuration.MemberReferenceMap item) -> bool
virtual CsvHelper.Configuration.MemberReferenceMapCollection.CopyTo(CsvHelper.Configuration.MemberReferenceMap[] array, int arrayIndex) -> void
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Count.get -> int
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Find(System.Reflection.MemberInfo member) -> CsvHelper.Configuration.MemberReferenceMap
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Find<T>(System.Linq.Expressions.Expression<System.Func<T, object>> expression) -> CsvHelper.Configuration.MemberReferenceMap
virtual CsvHelper.Configuration.MemberReferenceMapCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<CsvHelper.Configuration.MemberReferenceMap>
virtual CsvHelper.Configuration.MemberReferenceMapCollection.IndexOf(CsvHelper.Configuration.MemberReferenceMap item) -> int
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Insert(int index, CsvHelper.Configuration.MemberReferenceMap item) -> void
virtual CsvHelper.Configuration.MemberReferenceMapCollection.IsReadOnly.get -> bool
virtual CsvHelper.Configuration.MemberReferenceMapCollection.Remove(CsvHelper.Configuration.MemberReferenceMap item) -> bool
virtual CsvHelper.Configuration.MemberReferenceMapCollection.RemoveAt(int index) -> void
virtual CsvHelper.Configuration.MemberReferenceMapCollection.this[int index].get -> CsvHelper.Configuration.MemberReferenceMap
virtual CsvHelper.Configuration.MemberReferenceMapCollection.this[int index].set -> void
virtual CsvHelper.Configuration.MemberReferenceMapData.Member.get -> System.Reflection.MemberInfo
virtual CsvHelper.Configuration.MemberReferenceMapData.Prefix.get -> string
virtual CsvHelper.Configuration.MemberReferenceMapData.Prefix.set -> void
virtual CsvHelper.Configuration.ParameterMap.ConstructorTypeMap.get -> CsvHelper.Configuration.ClassMap
virtual CsvHelper.Configuration.ParameterMap.ConstructorTypeMap.set -> void
virtual CsvHelper.Configuration.ParameterMap.Data.get -> CsvHelper.Configuration.ParameterMapData
virtual CsvHelper.Configuration.ParameterMap.Data.set -> void
virtual CsvHelper.Configuration.ParameterMap.ReferenceMap.get -> CsvHelper.Configuration.ParameterReferenceMap
virtual CsvHelper.Configuration.ParameterMap.ReferenceMap.set -> void
virtual CsvHelper.Configuration.ParameterMapData.Index.get -> int
virtual CsvHelper.Configuration.ParameterMapData.Index.set -> void
virtual CsvHelper.Configuration.ParameterMapData.Name.get -> string
virtual CsvHelper.Configuration.ParameterMapData.Name.set -> void
virtual CsvHelper.Configuration.ParameterMapData.Parameter.get -> System.Reflection.ParameterInfo
virtual CsvHelper.Configuration.ParameterMapData.TypeConverter.get -> CsvHelper.TypeConversion.ITypeConverter
virtual CsvHelper.Configuration.ParameterMapData.TypeConverter.set -> void
virtual CsvHelper.Configuration.ParameterMapData.TypeConverterOptions.get -> CsvHelper.TypeConversion.TypeConverterOptions
virtual CsvHelper.Configuration.ParameterMapData.TypeConverterOptions.set -> void
virtual CsvHelper.Configuration.ParameterReferenceMapData.Parameter.get -> System.Reflection.ParameterInfo
virtual CsvHelper.Configuration.ParameterReferenceMapData.Prefix.get -> string
virtual CsvHelper.Configuration.ParameterReferenceMapData.Prefix.set -> void
virtual CsvHelper.CsvFieldReader.AppendField() -> void
virtual CsvHelper.CsvFieldReader.Context.get -> CsvHelper.ReadingContext
virtual CsvHelper.CsvFieldReader.Dispose() -> void
virtual CsvHelper.CsvFieldReader.Dispose(bool disposing) -> void
virtual CsvHelper.CsvFieldReader.FillBuffer() -> bool
virtual CsvHelper.CsvFieldReader.FillBufferAsync() -> System.Threading.Tasks.Task<bool>
virtual CsvHelper.CsvFieldReader.GetChar() -> int
virtual CsvHelper.CsvFieldReader.GetField() -> string
virtual CsvHelper.CsvFieldReader.IsBufferEmpty.get -> bool
virtual CsvHelper.CsvFieldReader.SetBufferPosition(int offset = 0) -> void
virtual CsvHelper.CsvFieldReader.SetFieldEnd(int offset = 0) -> void
virtual CsvHelper.CsvFieldReader.SetFieldStart(int offset = 0) -> void
virtual CsvHelper.CsvFieldReader.SetRawRecordEnd(int offset) -> void
virtual CsvHelper.CsvFieldReader.SetRawRecordStart(int offset) -> void
virtual CsvHelper.CsvParser.Configuration.get -> CsvHelper.Configuration.IParserConfiguration
virtual CsvHelper.CsvParser.Context.get -> CsvHelper.ReadingContext
virtual CsvHelper.CsvParser.Dispose() -> void
virtual CsvHelper.CsvParser.Dispose(bool disposing) -> void
virtual CsvHelper.CsvParser.FieldReader.get -> CsvHelper.IFieldReader
virtual CsvHelper.CsvParser.Read() -> string[]
virtual CsvHelper.CsvParser.ReadAsync() -> System.Threading.Tasks.Task<string[]>
virtual CsvHelper.CsvParser.ReadBlankLine() -> void
virtual CsvHelper.CsvParser.ReadBlankLineAsync() -> System.Threading.Tasks.Task
virtual CsvHelper.CsvParser.ReadDelimiter() -> bool
virtual CsvHelper.CsvParser.ReadDelimiterAsync() -> System.Threading.Tasks.Task<bool>
virtual CsvHelper.CsvParser.ReadField() -> bool
virtual CsvHelper.CsvParser.ReadFieldAsync() -> System.Threading.Tasks.Task<bool>
virtual CsvHelper.CsvParser.ReadLine() -> string[]
virtual CsvHelper.CsvParser.ReadLineAsync() -> System.Threading.Tasks.Task<string[]>
virtual CsvHelper.CsvParser.ReadLineEnding() -> int
virtual CsvHelper.CsvParser.ReadLineEndingAsync() -> System.Threading.Tasks.Task<int>
virtual CsvHelper.CsvParser.ReadQuotedField() -> bool
virtual CsvHelper.CsvParser.ReadQuotedFieldAsync() -> System.Threading.Tasks.Task<bool>
virtual CsvHelper.CsvParser.ReadSpaces() -> bool
virtual CsvHelper.CsvParser.ReadSpacesAsync() -> System.Threading.Tasks.Task<bool>
virtual CsvHelper.CsvReader.CanRead(CsvHelper.Configuration.MemberMap memberMap) -> bool
virtual CsvHelper.CsvReader.CanRead(CsvHelper.Configuration.MemberReferenceMap memberReferenceMap) -> bool
virtual CsvHelper.CsvReader.CheckHasBeenRead() -> void
virtual CsvHelper.CsvReader.Configuration.get -> CsvHelper.Configuration.IReaderConfiguration
virtual CsvHelper.CsvReader.Context.get -> CsvHelper.ReadingContext
virtual CsvHelper.CsvReader.Dispose(bool disposing) -> void
virtual CsvHelper.CsvReader.EnumerateRecords<T>(T record) -> System.Collections.Generic.IEnumerable<T>
virtual CsvHelper.CsvReader.EnumerateRecordsAsync<T>(T record) -> System.Collections.Generic.IAsyncEnumerable<T>
virtual CsvHelper.CsvReader.GetField(System.Type type, int index) -> object
virtual CsvHelper.CsvReader.GetField(System.Type type, int index, CsvHelper.TypeConversion.ITypeConverter converter) -> object
virtual CsvHelper.CsvReader.GetField(System.Type type, string name) -> object
virtual CsvHelper.CsvReader.GetField(System.Type type, string name, CsvHelper.TypeConversion.ITypeConverter converter) -> object
virtual CsvHelper.CsvReader.GetField(System.Type type, string name, int index) -> object
virtual CsvHelper.CsvReader.GetField(System.Type type, string name, int index, CsvHelper.TypeConversion.ITypeConverter converter) -> object
virtual CsvHelper.CsvReader.GetField(int index) -> string
virtual CsvHelper.CsvReader.GetField(string name) -> string
virtual CsvHelper.CsvReader.GetField(string name, int index) -> string
virtual CsvHelper.CsvReader.GetField<T, TConverter>(int index) -> T
virtual CsvHelper.CsvReader.GetField<T, TConverter>(string name) -> T
virtual CsvHelper.CsvReader.GetField<T, TConverter>(string name, int index) -> T
virtual CsvHelper.CsvReader.GetField<T>(int index) -> T
virtual CsvHelper.CsvReader.GetField<T>(int index, CsvHelper.TypeConversion.ITypeConverter converter) -> T
virtual CsvHelper.CsvReader.GetField<T>(string name) -> T
virtual CsvHelper.CsvReader.GetField<T>(string name, CsvHelper.TypeConversion.ITypeConverter converter) -> T
virtual CsvHelper.CsvReader.GetField<T>(string name, int index) -> T
virtual CsvHelper.CsvReader.GetField<T>(string name, int index, CsvHelper.TypeConversion.ITypeConverter converter) -> T
virtual CsvHelper.CsvReader.GetFieldIndex(string name, int index = 0, bool isTryGet = false) -> int
virtual CsvHelper.CsvReader.GetFieldIndex(string[] names, int index = 0, bool isTryGet = false, bool isOptional = false) -> int
virtual CsvHelper.CsvReader.GetRecord(System.Type type) -> object
virtual CsvHelper.CsvReader.GetRecord<T>() -> T
virtual CsvHelper.CsvReader.GetRecord<T>(T anonymousTypeDefinition) -> T
virtual CsvHelper.CsvReader.GetRecords(System.Type type) -> System.Collections.Generic.IEnumerable<object>
virtual CsvHelper.CsvReader.GetRecords<T>() -> System.Collections.Generic.IEnumerable<T>
virtual CsvHelper.CsvReader.GetRecords<T>(T anonymousTypeDefinition) -> System.Collections.Generic.IEnumerable<T>
virtual CsvHelper.CsvReader.GetRecordsAsync(System.Type type) -> System.Collections.Generic.IAsyncEnumerable<object>
virtual CsvHelper.CsvReader.GetRecordsAsync<T>() -> System.Collections.Generic.IAsyncEnumerable<T>
virtual CsvHelper.CsvReader.GetRecordsAsync<T>(T anonymousTypeDefinition) -> System.Collections.Generic.IAsyncEnumerable<T>
virtual CsvHelper.CsvReader.ParseNamedIndexes() -> void
virtual CsvHelper.CsvReader.Parser.get -> CsvHelper.IParser
virtual CsvHelper.CsvReader.Read() -> bool
virtual CsvHelper.CsvReader.ReadAsync() -> System.Threading.Tasks.Task<bool>
virtual CsvHelper.CsvReader.ReadHeader() -> bool
virtual CsvHelper.CsvReader.TryGetField(System.Type type, int index, CsvHelper.TypeConversion.ITypeConverter converter, out object field) -> bool
virtual CsvHelper.CsvReader.TryGetField(System.Type type, int index, out object field) -> bool
virtual CsvHelper.CsvReader.TryGetField(System.Type type, string name, CsvHelper.TypeConversion.ITypeConverter converter, out object field) -> bool
virtual CsvHelper.CsvReader.TryGetField(System.Type type, string name, int index, CsvHelper.TypeConversion.ITypeConverter converter, out object field) -> bool
virtual CsvHelper.CsvReader.TryGetField(System.Type type, string name, int index, out object field) -> bool
virtual CsvHelper.CsvReader.TryGetField(System.Type type, string name, out object field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T, TConverter>(int index, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T, TConverter>(string name, int index, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T, TConverter>(string name, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T>(int index, CsvHelper.TypeConversion.ITypeConverter converter, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T>(int index, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T>(string name, CsvHelper.TypeConversion.ITypeConverter converter, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T>(string name, int index, CsvHelper.TypeConversion.ITypeConverter converter, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T>(string name, int index, out T field) -> bool
virtual CsvHelper.CsvReader.TryGetField<T>(string name, out T field) -> bool
virtual CsvHelper.CsvReader.ValidateHeader(CsvHelper.Configuration.ClassMap map) -> void
virtual CsvHelper.CsvReader.ValidateHeader(System.Type type) -> void
virtual CsvHelper.CsvReader.ValidateHeader<T>() -> void
virtual CsvHelper.CsvReader.this[int index].get -> string
virtual CsvHelper.CsvReader.this[string name, int index].get -> string
virtual CsvHelper.CsvReader.this[string name].get -> string
virtual CsvHelper.CsvSerializer.Configuration.get -> CsvHelper.Configuration.ISerializerConfiguration
virtual CsvHelper.CsvSerializer.Context.get -> CsvHelper.WritingContext
virtual CsvHelper.CsvSerializer.Dispose() -> void
virtual CsvHelper.CsvSerializer.Dispose(bool disposing) -> void
virtual CsvHelper.CsvSerializer.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual CsvHelper.CsvSerializer.DisposeAsync(bool disposing) -> System.Threading.Tasks.ValueTask
virtual CsvHelper.CsvSerializer.SanitizeForInjection(string field) -> string
virtual CsvHelper.CsvSerializer.Write(string[] record) -> void
virtual CsvHelper.CsvSerializer.WriteAsync(string[] record) -> System.Threading.Tasks.Task
virtual CsvHelper.CsvSerializer.WriteLine() -> void
virtual CsvHelper.CsvSerializer.WriteLineAsync() -> System.Threading.Tasks.Task
virtual CsvHelper.CsvWriter.CanWrite(CsvHelper.Configuration.MemberMap memberMap) -> bool
virtual CsvHelper.CsvWriter.Configuration.get -> CsvHelper.Configuration.IWriterConfiguration
virtual CsvHelper.CsvWriter.Context.get -> CsvHelper.WritingContext
virtual CsvHelper.CsvWriter.Dispose(bool disposing) -> void
virtual CsvHelper.CsvWriter.DisposeAsync(bool disposing) -> System.Threading.Tasks.ValueTask
virtual CsvHelper.CsvWriter.Flush() -> void
virtual CsvHelper.CsvWriter.FlushAsync() -> System.Threading.Tasks.Task
virtual CsvHelper.CsvWriter.GetTypeForRecord<T>(T record) -> System.Type
virtual CsvHelper.CsvWriter.NextRecord() -> void
virtual CsvHelper.CsvWriter.NextRecordAsync() -> System.Threading.Tasks.Task
virtual CsvHelper.CsvWriter.WriteComment(string comment) -> void
virtual CsvHelper.CsvWriter.WriteConvertedField(string field) -> void
virtual CsvHelper.CsvWriter.WriteDynamicHeader(System.Dynamic.IDynamicMetaObjectProvider record) -> void
virtual CsvHelper.CsvWriter.WriteField(string field) -> void
virtual CsvHelper.CsvWriter.WriteField(string field, bool shouldQuote) -> void
virtual CsvHelper.CsvWriter.WriteField<T, TConverter>(T field) -> void
virtual CsvHelper.CsvWriter.WriteField<T>(T field) -> void
virtual CsvHelper.CsvWriter.WriteField<T>(T field, CsvHelper.TypeConversion.ITypeConverter converter) -> void
virtual CsvHelper.CsvWriter.WriteHeader(System.Type type) -> void
virtual CsvHelper.CsvWriter.WriteHeader<T>() -> void
virtual CsvHelper.CsvWriter.WriteRecord<T>(T record) -> void
virtual CsvHelper.CsvWriter.WriteRecords(System.Collections.IEnumerable records) -> void
virtual CsvHelper.CsvWriter.WriteRecords<T>(System.Collections.Generic.IEnumerable<T> records) -> void
virtual CsvHelper.CsvWriter.WriteRecordsAsync(System.Collections.IEnumerable records) -> System.Threading.Tasks.Task
virtual CsvHelper.CsvWriter.WriteRecordsAsync<T>(System.Collections.Generic.IEnumerable<T> records) -> System.Threading.Tasks.Task
virtual CsvHelper.Expressions.DynamicRecordCreator.CreateDynamicRecord() -> dynamic
virtual CsvHelper.Expressions.ExpressionManager.CreateConstructorArgumentExpressionsForMapping(CsvHelper.Configuration.ClassMap map, System.Collections.Generic.List<System.Linq.Expressions.Expression> argumentExpressions) -> void
virtual CsvHelper.Expressions.ExpressionManager.CreateDefaultExpression(CsvHelper.Configuration.MemberMap memberMap, System.Linq.Expressions.Expression fieldExpression) -> System.Linq.Expressions.Expression
virtual CsvHelper.Expressions.ExpressionManager.CreateGetFieldExpression(CsvHelper.Configuration.MemberMap memberMap) -> System.Linq.Expressions.Expression
virtual CsvHelper.Expressions.ExpressionManager.CreateGetMemberExpression(System.Linq.Expressions.Expression recordExpression, CsvHelper.Configuration.ClassMap mapping, CsvHelper.Configuration.MemberMap memberMap) -> System.Linq.Expressions.Expression
virtual CsvHelper.Expressions.ExpressionManager.CreateInstanceAndAssignMembers(System.Type recordType, System.Collections.Generic.List<System.Linq.Expressions.MemberAssignment> assignments) -> System.Linq.Expressions.BlockExpression
virtual CsvHelper.Expressions.ExpressionManager.CreateMemberAssignmentsForMapping(CsvHelper.Configuration.ClassMap mapping, System.Collections.Generic.List<System.Linq.Expressions.MemberAssignment> assignments) -> void
virtual CsvHelper.Expressions.ExpressionManager.CreateTypeConverterExpression(CsvHelper.Configuration.MemberMap memberMap, System.Linq.Expressions.Expression fieldExpression) -> System.Linq.Expressions.Expression
virtual CsvHelper.Expressions.RecordCreator.GetCreateRecordDelegate(System.Type recordType) -> System.Delegate
virtual CsvHelper.Expressions.RecordCreatorFactory.MakeRecordCreator(System.Type recordType) -> CsvHelper.Expressions.RecordCreator
virtual CsvHelper.Expressions.RecordHydrator.CreateHydrateRecordAction<T>() -> System.Action<T>
virtual CsvHelper.Expressions.RecordHydrator.GetHydrateRecordAction<T>() -> System.Action<T>
virtual CsvHelper.Expressions.RecordWriter.CombineDelegates<T>(System.Collections.Generic.IEnumerable<System.Action<T>> delegates) -> System.Action<T>
virtual CsvHelper.Expressions.RecordWriterFactory.MakeRecordWriter<T>(T record) -> CsvHelper.Expressions.RecordWriter
virtual CsvHelper.Factory.CreateParser(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> CsvHelper.IParser
virtual CsvHelper.Factory.CreateParser(System.IO.TextReader reader, System.Globalization.CultureInfo cultureInfo) -> CsvHelper.IParser
virtual CsvHelper.Factory.CreateReader(CsvHelper.IParser parser) -> CsvHelper.IReader
virtual CsvHelper.Factory.CreateReader(System.IO.TextReader reader, CsvHelper.Configuration.CsvConfiguration configuration) -> CsvHelper.IReader
virtual CsvHelper.Factory.CreateReader(System.IO.TextReader reader, System.Globalization.CultureInfo cultureInfo) -> CsvHelper.IReader
virtual CsvHelper.Factory.CreateWriter(System.IO.TextWriter writer, CsvHelper.Configuration.CsvConfiguration configuration) -> CsvHelper.IWriter
virtual CsvHelper.Factory.CreateWriter(System.IO.TextWriter writer, System.Globalization.CultureInfo cultureInfo) -> CsvHelper.IWriter
virtual CsvHelper.ReadingContext.ClearCache(CsvHelper.Caches cache) -> void
virtual CsvHelper.ReadingContext.Dispose() -> void
virtual CsvHelper.ReadingContext.Dispose(bool disposing) -> void
virtual CsvHelper.RecordBuilder.Add(string field) -> CsvHelper.RecordBuilder
virtual CsvHelper.RecordBuilder.Clear() -> CsvHelper.RecordBuilder
virtual CsvHelper.RecordBuilder.ToArray() -> string[]
virtual CsvHelper.TypeConversion.DefaultTypeConverter.ConvertFromString(string text, CsvHelper.IReaderRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> object
virtual CsvHelper.TypeConversion.DefaultTypeConverter.ConvertToString(object value, CsvHelper.IWriterRow row, CsvHelper.Configuration.MemberMapData memberMapData) -> string
virtual CsvHelper.WritingContext.Dispose() -> void
virtual CsvHelper.WritingContext.Dispose(bool disposing) -> void
virtual CsvHelper.WritingContext.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual CsvHelper.WritingContext.DisposeAsync(bool disposing) -> System.Threading.Tasks.ValueTask
virtual CsvHelper.WritingContext.HasHeaderBeenWritten.get -> bool
virtual CsvHelper.WritingContext.HasHeaderBeenWritten.set -> void
virtual CsvHelper.WritingContext.HasRecordBeenWritten.get -> bool
virtual CsvHelper.WritingContext.HasRecordBeenWritten.set -> void
virtual CsvHelper.WritingContext.LeaveOpen.get -> bool
virtual CsvHelper.WritingContext.LeaveOpen.set -> void
virtual CsvHelper.WritingContext.Record.get -> System.Collections.Generic.List<string>
virtual CsvHelper.WritingContext.Row.get -> int
virtual CsvHelper.WritingContext.Row.set -> void
virtual CsvHelper.WritingContext.SerializerConfiguration.get -> CsvHelper.Configuration.ISerializerConfiguration
virtual CsvHelper.WritingContext.Writer.get -> System.IO.TextWriter
virtual CsvHelper.WritingContext.WriterConfiguration.get -> CsvHelper.Configuration.IWriterConfiguration
virtual ParquetClassLibrary.Model.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
