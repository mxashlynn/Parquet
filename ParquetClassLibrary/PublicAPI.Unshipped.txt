abstract Parquet.Pack<T>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
abstract Parquet.Pack<T>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
abstract Parquet.Pack<T>.DeepClone<TDerived>() -> TDerived
abstract Parquet.Pack<T>.Equals<TDerived>(TDerived inPack) -> bool
abstract Parquet.Status<T>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
abstract Parquet.Status<T>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
abstract Parquet.Status<T>.DeepClone<TDerived>() -> TDerived
abstract Parquet.Status<T>.Equals<TDerived>(TDerived inStatus) -> bool
const Parquet.Beings.PronounGroup.DefaultKey = "they/them" -> string
const Parquet.Beings.PronounGroup.DeterminerTag = "|their|" -> string
const Parquet.Beings.PronounGroup.ObjectiveTag = "|them|" -> string
const Parquet.Beings.PronounGroup.PossessiveTag = "|theirs|" -> string
const Parquet.Beings.PronounGroup.ReflexiveTag = "|themselves|" -> string
const Parquet.Beings.PronounGroup.SubjectiveTag = "|they|" -> string
const Parquet.Crafts.StrikePanelGrid.PanelsPerPatternHeight = 4 -> int
const Parquet.Crafts.StrikePanelGrid.PanelsPerPatternWidth = 4 -> int
const Parquet.Delimiters.DimensionalDelimiter = "×" -> string
const Parquet.Delimiters.DimensionalTerminator = "≡" -> string
const Parquet.Delimiters.ElementDelimiter = "–" -> string
const Parquet.Delimiters.InternalDelimiter = "·" -> string
const Parquet.Delimiters.NameDelimiter = "§" -> string
const Parquet.Delimiters.PackDelimiter = "⚭" -> string
const Parquet.Delimiters.PrimaryDelimiter = "," -> string
const Parquet.Delimiters.PronounDelimiter = "|" -> string
const Parquet.Delimiters.SecondaryDelimiter = "❟" -> string
const Parquet.Delimiters.TertiaryDelimiter = "❠" -> string
const Parquet.Items.ItemModel.DefaultStackMax = 999 -> int
const Parquet.LibraryState.IsDebugMode = true -> bool
const Parquet.Parquets.BlockModel.DefaultMaxToughness = 10 -> int
const Parquet.Parquets.BlockModel.MinToughness = 0 -> int
const Parquet.Regions.MapChunk.ParquetsPerChunkDimension = 16 -> int
const Parquet.Regions.RegionModel.ChunksPerRegionDimension = 4 -> int
const Parquet.Scripts.Commands.Alert = "A" -> string
const Parquet.Scripts.Commands.CallCharacter = "C" -> string
const Parquet.Scripts.Commands.ClearFlag = "!" -> string
const Parquet.Scripts.Commands.GiveItem = "I" -> string
const Parquet.Scripts.Commands.GiveQuest = "Q" -> string
const Parquet.Scripts.Commands.Jump = "J" -> string
const Parquet.Scripts.Commands.JumpIf = "F" -> string
const Parquet.Scripts.Commands.None = "" -> string
const Parquet.Scripts.Commands.Put = "P" -> string
const Parquet.Scripts.Commands.Say = "S" -> string
const Parquet.Scripts.Commands.SetBehavior = "B" -> string
const Parquet.Scripts.Commands.SetDialogue = "D" -> string
const Parquet.Scripts.Commands.SetFlag = "=" -> string
const Parquet.Scripts.Commands.SetPronoun = "R" -> string
const Parquet.Scripts.Commands.ShowLocation = "L" -> string
override abstract Parquet.Pack<T>.Equals(object obj) -> bool
override abstract Parquet.Pack<T>.GetHashCode() -> int
override abstract Parquet.Status<T>.Equals(object obj) -> bool
override abstract Parquet.Status<T>.GetHashCode() -> int
override Parquet.Beings.BeingStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Beings.BeingStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Beings.BeingStatus.DeepClone<T>() -> T
override Parquet.Beings.BeingStatus.Equals(object obj) -> bool
override Parquet.Beings.BeingStatus.Equals<T>(T inStatus) -> bool
override Parquet.Beings.BeingStatus.GetHashCode() -> int
override Parquet.Beings.PronounGroup.ToString() -> string
override Parquet.Biomes.BiomeRecipe.GetAllTags() -> System.Collections.Generic.IEnumerable<Parquet.ModelTag>
override Parquet.Crafts.StrikePanel.Equals(object obj) -> bool
override Parquet.Crafts.StrikePanel.GetHashCode() -> int
override Parquet.Crafts.StrikePanel.ToString() -> string
override Parquet.EmptyTolerantEnumConverter.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Games.GameModel.ToString() -> string
override Parquet.Games.GameStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Games.GameStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Games.GameStatus.DeepClone<T>() -> T
override Parquet.Games.GameStatus.Equals(object obj) -> bool
override Parquet.Games.GameStatus.Equals<T>(T inStatus) -> bool
override Parquet.Games.GameStatus.GetHashCode() -> int
override Parquet.Games.GameStatus.ToString() -> string
override Parquet.GridConverter<TElement, TGrid>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.GridConverter<TElement, TGrid>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Items.Inventory.ToString() -> string
override Parquet.Items.InventorySlot.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Items.InventorySlot.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Items.InventorySlot.DeepClone<T>() -> T
override Parquet.Items.InventorySlot.Equals(object obj) -> bool
override Parquet.Items.InventorySlot.Equals<T>(T inStatus) -> bool
override Parquet.Items.InventorySlot.GetHashCode() -> int
override Parquet.Items.InventorySlot.ToString() -> string
override Parquet.Items.ItemModel.GetAllTags() -> System.Collections.Generic.IEnumerable<Parquet.ModelTag>
override Parquet.Location.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Location.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Location.DeepClone<T>() -> T
override Parquet.Location.Equals(object obj) -> bool
override Parquet.Location.Equals<T>(T inLocation) -> bool
override Parquet.Location.GetHashCode() -> int
override Parquet.Location.ToString() -> string
override Parquet.Model.Equals(object obj) -> bool
override Parquet.Model.GetHashCode() -> int
override Parquet.Model.ToString() -> string
override Parquet.ModelCollection<TModel>.ToString() -> string
override Parquet.ModelID.Equals(object obj) -> bool
override Parquet.ModelID.GetHashCode() -> int
override Parquet.ModelID.ToString() -> string
override Parquet.ModelTag.ToString() -> string
override Parquet.Parquets.BlockStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Parquets.BlockStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Parquets.BlockStatus.DeepClone<T>() -> T
override Parquet.Parquets.BlockStatus.Equals(object obj) -> bool
override Parquet.Parquets.BlockStatus.Equals<T>(T inStatus) -> bool
override Parquet.Parquets.BlockStatus.GetHashCode() -> int
override Parquet.Parquets.BlockStatus.ToString() -> string
override Parquet.Parquets.FloorStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Parquets.FloorStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Parquets.FloorStatus.DeepClone<T>() -> T
override Parquet.Parquets.FloorStatus.Equals(object obj) -> bool
override Parquet.Parquets.FloorStatus.Equals<T>(T inStatus) -> bool
override Parquet.Parquets.FloorStatus.GetHashCode() -> int
override Parquet.Parquets.FloorStatus.ToString() -> string
override Parquet.Parquets.ParquetModel.GetAllTags() -> System.Collections.Generic.IEnumerable<Parquet.ModelTag>
override Parquet.Parquets.ParquetModelPack.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Parquets.ParquetModelPack.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Parquets.ParquetModelPack.DeepClone() -> Parquet.Parquets.ParquetModelPack
override Parquet.Parquets.ParquetModelPack.DeepClone<T>() -> T
override Parquet.Parquets.ParquetModelPack.Equals(object obj) -> bool
override Parquet.Parquets.ParquetModelPack.Equals<T>(T inPack) -> bool
override Parquet.Parquets.ParquetModelPack.GetHashCode() -> int
override Parquet.Parquets.ParquetModelPack.ToString() -> string
override Parquet.Parquets.ParquetStatusPack.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Parquets.ParquetStatusPack.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Parquets.ParquetStatusPack.DeepClone() -> Parquet.Parquets.ParquetStatusPack
override Parquet.Parquets.ParquetStatusPack.DeepClone<T>() -> T
override Parquet.Parquets.ParquetStatusPack.Equals(object obj) -> bool
override Parquet.Parquets.ParquetStatusPack.Equals<T>(T inPack) -> bool
override Parquet.Parquets.ParquetStatusPack.GetHashCode() -> int
override Parquet.Parquets.ParquetStatusPack.ToString() -> string
override Parquet.Range<TElement>.Equals(object obj) -> bool
override Parquet.Range<TElement>.GetHashCode() -> int
override Parquet.Range<TElement>.ToString() -> string
override Parquet.RecipeElement.Equals(object obj) -> bool
override Parquet.RecipeElement.GetHashCode() -> int
override Parquet.RecipeElement.ToString() -> string
override Parquet.Regions.ChunkDetail.Equals(object obj) -> bool
override Parquet.Regions.ChunkDetail.GetHashCode() -> int
override Parquet.Regions.ChunkDetail.ToString() -> string
override Parquet.Regions.MapChunk.ToString() -> string
override Parquet.Regions.RegionModel.ToString() -> string
override Parquet.Rooms.MapSpace.Equals(object obj) -> bool
override Parquet.Rooms.MapSpace.GetHashCode() -> int
override Parquet.Rooms.MapSpace.ToString() -> string
override Parquet.Rooms.Room.Equals(object obj) -> bool
override Parquet.Rooms.Room.GetHashCode() -> int
override Parquet.Scripts.ScriptNode.ToString() -> string
override Parquet.Scripts.ScriptStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.Scripts.ScriptStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Scripts.ScriptStatus.DeepClone<T>() -> T
override Parquet.Scripts.ScriptStatus.Equals(object obj) -> bool
override Parquet.Scripts.ScriptStatus.Equals<T>(T inStatus) -> bool
override Parquet.Scripts.ScriptStatus.GetHashCode() -> int
override Parquet.Scripts.ScriptStatus.ToString() -> string
override Parquet.SeriesConverter<TElement, TCollection>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override Parquet.SeriesConverter<TElement, TCollection>.ConvertToString(object inCollection, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override Parquet.Vector2D.Equals(object obj) -> bool
override Parquet.Vector2D.GetHashCode() -> int
override Parquet.Vector2D.ToString() -> string
Parquet.All
Parquet.AssemblyInfo
Parquet.AssemblyInfo.AssemblyInfo() -> void
Parquet.Beings.BeingModel
Parquet.Beings.BeingModel.AvoidsIDs.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelID>
Parquet.Beings.BeingModel.BeingModel(Parquet.Range<Parquet.ModelID> inBounds, Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inNativeBiomeID = null, Parquet.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inSeeksIDs = null) -> void
Parquet.Beings.BeingModel.NativeBiomeID.get -> Parquet.ModelID
Parquet.Beings.BeingModel.PrimaryBehaviorID.get -> Parquet.ModelID
Parquet.Beings.BeingModel.SeeksIDs.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelID>
Parquet.Beings.BeingStatus
Parquet.Beings.BeingStatus.BeingStatus(Parquet.Location inPosition = null, Parquet.Location inSpawnAt = null, Parquet.Location inRoomAssignment = null, Parquet.ModelID? inCurrentBehavior = null, int inBiomeTimeRemaining = 0, float inBuildingSpeed = 0, float inModificationSpeed = 0, float inGatheringSpeed = 0, float inMovementSpeed = 0, System.Collections.Generic.ICollection<Parquet.ModelID> inKnownBeings = null, System.Collections.Generic.ICollection<Parquet.ModelID> inKnownParquets = null, System.Collections.Generic.ICollection<Parquet.ModelID> inKnownRoomRecipes = null, System.Collections.Generic.ICollection<Parquet.ModelID> inKnownCraftingRecipes = null, System.Collections.Generic.ICollection<Parquet.ModelID> inQuests = null, System.Collections.Generic.ICollection<Parquet.ModelID> inInventory = null) -> void
Parquet.Beings.BeingStatus.BiomeTimeRemaining.get -> int
Parquet.Beings.BeingStatus.BiomeTimeRemaining.set -> void
Parquet.Beings.BeingStatus.BuildingSpeed.get -> float
Parquet.Beings.BeingStatus.BuildingSpeed.set -> void
Parquet.Beings.BeingStatus.CurrentBehaviorID.get -> Parquet.ModelID
Parquet.Beings.BeingStatus.CurrentBehaviorID.set -> void
Parquet.Beings.BeingStatus.GatheringSpeed.get -> float
Parquet.Beings.BeingStatus.GatheringSpeed.set -> void
Parquet.Beings.BeingStatus.Inventory.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.BeingStatus.KnownBeings.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.BeingStatus.KnownCraftingRecipes.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.BeingStatus.KnownParquets.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.BeingStatus.KnownRoomRecipes.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.BeingStatus.ModificationSpeed.get -> float
Parquet.Beings.BeingStatus.ModificationSpeed.set -> void
Parquet.Beings.BeingStatus.MovementSpeed.get -> float
Parquet.Beings.BeingStatus.MovementSpeed.set -> void
Parquet.Beings.BeingStatus.Position.get -> Parquet.Location
Parquet.Beings.BeingStatus.Position.set -> void
Parquet.Beings.BeingStatus.Quests.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.BeingStatus.RoomAssignment.get -> Parquet.Location
Parquet.Beings.BeingStatus.RoomAssignment.set -> void
Parquet.Beings.BeingStatus.SpawnAt.get -> Parquet.Location
Parquet.Beings.BeingStatus.SpawnAt.set -> void
Parquet.Beings.CharacterModel
Parquet.Beings.CharacterModel.CharacterModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inNativeBiomeID = null, Parquet.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inSeeksIDs = null, string inPronounKey = "they/them", string inStoryCharacterID = "", System.Collections.Generic.IEnumerable<Parquet.ModelID> inStartingQuestIDs = null, Parquet.ModelID? inStartingDialogueID = null, Parquet.Items.Inventory inStartingInventory = null) -> void
Parquet.Beings.CharacterModel.FamilyName.get -> string
Parquet.Beings.CharacterModel.PersonalName.get -> string
Parquet.Beings.CharacterModel.PronounKey.get -> string
Parquet.Beings.CharacterModel.StartingDialogueID.get -> Parquet.ModelID
Parquet.Beings.CharacterModel.StartingInventory.get -> Parquet.Items.Inventory
Parquet.Beings.CharacterModel.StartingQuestIDs.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelID>
Parquet.Beings.CharacterModel.StoryCharacterID.get -> string
Parquet.Beings.CritterModel
Parquet.Beings.CritterModel.CritterModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inNativeBiomeID = null, Parquet.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inSeeksIDs = null) -> void
Parquet.Beings.IMutableBeingModel
Parquet.Beings.IMutableBeingModel.AvoidsIDs.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.IMutableBeingModel.NativeBiomeID.get -> Parquet.ModelID
Parquet.Beings.IMutableBeingModel.NativeBiomeID.set -> void
Parquet.Beings.IMutableBeingModel.PrimaryBehaviorID.get -> Parquet.ModelID
Parquet.Beings.IMutableBeingModel.PrimaryBehaviorID.set -> void
Parquet.Beings.IMutableBeingModel.SeeksIDs.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.IMutableCharacterModel
Parquet.Beings.IMutableCharacterModel.FamilyName.get -> string
Parquet.Beings.IMutableCharacterModel.FamilyName.set -> void
Parquet.Beings.IMutableCharacterModel.PersonalName.get -> string
Parquet.Beings.IMutableCharacterModel.PersonalName.set -> void
Parquet.Beings.IMutableCharacterModel.PronounKey.get -> string
Parquet.Beings.IMutableCharacterModel.PronounKey.set -> void
Parquet.Beings.IMutableCharacterModel.StartingDialogueID.get -> Parquet.ModelID
Parquet.Beings.IMutableCharacterModel.StartingDialogueID.set -> void
Parquet.Beings.IMutableCharacterModel.StartingInventory.get -> Parquet.Items.Inventory
Parquet.Beings.IMutableCharacterModel.StartingQuestIDs.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Beings.IMutableCharacterModel.StoryCharacterID.get -> string
Parquet.Beings.IMutableCharacterModel.StoryCharacterID.set -> void
Parquet.Beings.IMutableCritterModel
Parquet.Beings.IMutablePronounGroup
Parquet.Beings.IMutablePronounGroup.Determiner.get -> string
Parquet.Beings.IMutablePronounGroup.Determiner.set -> void
Parquet.Beings.IMutablePronounGroup.Objective.get -> string
Parquet.Beings.IMutablePronounGroup.Objective.set -> void
Parquet.Beings.IMutablePronounGroup.Possessive.get -> string
Parquet.Beings.IMutablePronounGroup.Possessive.set -> void
Parquet.Beings.IMutablePronounGroup.Reflexive.get -> string
Parquet.Beings.IMutablePronounGroup.Reflexive.set -> void
Parquet.Beings.IMutablePronounGroup.Subjective.get -> string
Parquet.Beings.IMutablePronounGroup.Subjective.set -> void
Parquet.Beings.PronounGroup
Parquet.Beings.PronounGroup.Determiner.get -> string
Parquet.Beings.PronounGroup.FillInPronouns(string inText) -> System.Text.StringBuilder
Parquet.Beings.PronounGroup.FillInPronouns(System.Text.StringBuilder inText) -> System.Text.StringBuilder
Parquet.Beings.PronounGroup.Key.get -> string
Parquet.Beings.PronounGroup.Objective.get -> string
Parquet.Beings.PronounGroup.Possessive.get -> string
Parquet.Beings.PronounGroup.PronounGroup(string inSubjective, string inObjective, string inDeterminer, string inPossessive, string inReflexive) -> void
Parquet.Beings.PronounGroup.Reflexive.get -> string
Parquet.Beings.PronounGroup.Subjective.get -> string
Parquet.Biomes.BiomeConfiguration
Parquet.Biomes.BiomeRecipe
Parquet.Biomes.BiomeRecipe.BiomeRecipe(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, int inTier = 0, bool inIsRoomBased = false, bool inIsLiquidBased = false, Parquet.ModelTag inParquetCriteria = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inEntryRequirements = null) -> void
Parquet.Biomes.BiomeRecipe.EntryRequirements.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelTag>
Parquet.Biomes.BiomeRecipe.IsLiquidBased.get -> bool
Parquet.Biomes.BiomeRecipe.IsRoomBased.get -> bool
Parquet.Biomes.BiomeRecipe.ParquetCriteria.get -> Parquet.ModelTag
Parquet.Biomes.BiomeRecipe.Tier.get -> int
Parquet.Biomes.IMutableBiomeRecipe
Parquet.Biomes.IMutableBiomeRecipe.EntryRequirements.get -> System.Collections.Generic.ICollection<Parquet.ModelTag>
Parquet.Biomes.IMutableBiomeRecipe.IsLiquidBased.get -> bool
Parquet.Biomes.IMutableBiomeRecipe.IsLiquidBased.set -> void
Parquet.Biomes.IMutableBiomeRecipe.IsRoomBased.get -> bool
Parquet.Biomes.IMutableBiomeRecipe.IsRoomBased.set -> void
Parquet.Biomes.IMutableBiomeRecipe.ParquetCriteria.get -> Parquet.ModelTag
Parquet.Biomes.IMutableBiomeRecipe.ParquetCriteria.set -> void
Parquet.Biomes.IMutableBiomeRecipe.Tier.get -> int
Parquet.Biomes.IMutableBiomeRecipe.Tier.set -> void
Parquet.Crafts.CraftConfiguration
Parquet.Crafts.CraftingRecipe
Parquet.Crafts.CraftingRecipe.CraftingRecipe(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, System.Collections.Generic.IEnumerable<Parquet.RecipeElement> inProducts = null, System.Collections.Generic.IEnumerable<Parquet.RecipeElement> inIngredients = null, Parquet.IReadOnlyGrid<Parquet.Crafts.StrikePanel> inPanelPattern = null) -> void
Parquet.Crafts.CraftingRecipe.Ingredients.get -> System.Collections.Generic.IReadOnlyList<Parquet.RecipeElement>
Parquet.Crafts.CraftingRecipe.PanelPattern.get -> Parquet.IReadOnlyGrid<Parquet.Crafts.StrikePanel>
Parquet.Crafts.CraftingRecipe.PanelPatternReplace(Parquet.IGrid<Parquet.Crafts.StrikePanel> inReplacement) -> void
Parquet.Crafts.CraftingRecipe.Products.get -> System.Collections.Generic.IReadOnlyList<Parquet.RecipeElement>
Parquet.Crafts.IMutableCraftingRecipe
Parquet.Crafts.IMutableCraftingRecipe.Ingredients.get -> System.Collections.Generic.ICollection<Parquet.RecipeElement>
Parquet.Crafts.IMutableCraftingRecipe.PanelPattern.get -> Parquet.IGrid<Parquet.Crafts.StrikePanel>
Parquet.Crafts.IMutableCraftingRecipe.PanelPatternReplace(Parquet.IGrid<Parquet.Crafts.StrikePanel> inReplacement) -> void
Parquet.Crafts.IMutableCraftingRecipe.Products.get -> System.Collections.Generic.ICollection<Parquet.RecipeElement>
Parquet.Crafts.StrikePanel
Parquet.Crafts.StrikePanel.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.Crafts.StrikePanel.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.Crafts.StrikePanel.DeepClone() -> Parquet.Crafts.StrikePanel
Parquet.Crafts.StrikePanel.Equals(Parquet.Crafts.StrikePanel inStrikePanel) -> bool
Parquet.Crafts.StrikePanel.IdealRange.get -> Parquet.Range<int>
Parquet.Crafts.StrikePanel.IdealRange.set -> void
Parquet.Crafts.StrikePanel.StrikePanel() -> void
Parquet.Crafts.StrikePanel.StrikePanel(Parquet.Range<int> inWorkingRange, Parquet.Range<int> inIdealRange) -> void
Parquet.Crafts.StrikePanel.WorkingRange.get -> Parquet.Range<int>
Parquet.Crafts.StrikePanel.WorkingRange.set -> void
Parquet.Crafts.StrikePanelArrayExtensions
Parquet.Crafts.StrikePanelGrid
Parquet.Crafts.StrikePanelGrid.Columns.get -> int
Parquet.Crafts.StrikePanelGrid.Count.get -> int
Parquet.Crafts.StrikePanelGrid.DeepClone() -> Parquet.IGrid<Parquet.Crafts.StrikePanel>
Parquet.Crafts.StrikePanelGrid.GetEnumerator() -> System.Collections.IEnumerator
Parquet.Crafts.StrikePanelGrid.IsValidPosition(Parquet.Vector2D inPosition) -> bool
Parquet.Crafts.StrikePanelGrid.Rows.get -> int
Parquet.Crafts.StrikePanelGrid.StrikePanelGrid() -> void
Parquet.Crafts.StrikePanelGrid.StrikePanelGrid(int inRowCount, int inColumnCount) -> void
Parquet.Crafts.StrikePanelGrid.StrikePanelGrid(Parquet.IGrid<Parquet.Crafts.StrikePanel> inContent, int inRowCount, int inColumnCount) -> void
Parquet.Crafts.StrikePanelGrid.this[int y, int x].get -> Parquet.Crafts.StrikePanel
Parquet.Delimiters
Parquet.EmptyTolerantEnumConverter
Parquet.EmptyTolerantEnumConverter.EmptyTolerantEnumConverter(System.Type inType) -> void
Parquet.Games.GameModel
Parquet.Games.GameModel.EpisodeNumber.get -> int
Parquet.Games.GameModel.EpisodeTitle.get -> string
Parquet.Games.GameModel.FirstScriptID.get -> Parquet.ModelID
Parquet.Games.GameModel.GameModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, bool inIsEpisode = false, string inEpisodeTitle = "", int inEpisodeNumber = 0, Parquet.ModelID? inPlayerCharacterID = null, Parquet.ModelID? inFirstScriptID = null) -> void
Parquet.Games.GameModel.IsEpisode.get -> bool
Parquet.Games.GameModel.PlayerCharacterID.get -> Parquet.ModelID
Parquet.Games.GameStatus
Parquet.Games.GameStatus.CurrentScriptID.get -> Parquet.ModelID
Parquet.Games.GameStatus.CurrentScriptID.set -> void
Parquet.Games.GameStatus.GameStatus(Parquet.ModelID? inPlayerCharacterID = null, Parquet.ModelID? inFirstScriptID = null) -> void
Parquet.Games.GameStatus.PlayerCharacterID.get -> Parquet.ModelID
Parquet.Games.GameStatus.PlayerCharacterID.set -> void
Parquet.Games.IMutableGameModel
Parquet.Games.IMutableGameModel.EpisodeNumber.get -> int
Parquet.Games.IMutableGameModel.EpisodeNumber.set -> void
Parquet.Games.IMutableGameModel.EpisodeTitle.get -> string
Parquet.Games.IMutableGameModel.EpisodeTitle.set -> void
Parquet.Games.IMutableGameModel.FirstScriptID.get -> Parquet.ModelID
Parquet.Games.IMutableGameModel.FirstScriptID.set -> void
Parquet.Games.IMutableGameModel.IsEpisode.get -> bool
Parquet.Games.IMutableGameModel.IsEpisode.set -> void
Parquet.Games.IMutableGameModel.PlayerCharacterID.get -> Parquet.ModelID
Parquet.Games.IMutableGameModel.PlayerCharacterID.set -> void
Parquet.GridConverter<TElement, TGrid>
Parquet.GridConverter<TElement, TGrid>.GridConverter() -> void
Parquet.IDeeplyCloneable<T>
Parquet.IDeeplyCloneable<T>.DeepClone() -> T
Parquet.IGrid<TElement>
Parquet.IGrid<TElement>.Columns.get -> int
Parquet.IGrid<TElement>.Count.get -> int
Parquet.IGrid<TElement>.Rows.get -> int
Parquet.IGrid<TElement>.this[int y, int x].get -> TElement
Parquet.ILogger
Parquet.ILogger.Log(Parquet.LogLevel inLogLevel, string inMessage, System.Exception inException) -> void
Parquet.IMutableModel
Parquet.IMutableModel.Comment.get -> string
Parquet.IMutableModel.Comment.set -> void
Parquet.IMutableModel.Description.get -> string
Parquet.IMutableModel.Description.set -> void
Parquet.IMutableModel.ID.get -> Parquet.ModelID
Parquet.IMutableModel.ID.set -> void
Parquet.IMutableModel.Name.get -> string
Parquet.IMutableModel.Name.set -> void
Parquet.IMutableModel.Tags.get -> System.Collections.Generic.ICollection<Parquet.ModelTag>
Parquet.IMutableModelCollection<TModel>
Parquet.IMutableModelCollection<TModel>.Remove(Parquet.ModelID inID) -> bool
Parquet.IMutableModelCollection<TModel>.Replace(TModel inModel) -> void
Parquet.IReadOnlyGrid<TElement>
Parquet.IReadOnlyGrid<TElement>.Columns.get -> int
Parquet.IReadOnlyGrid<TElement>.Rows.get -> int
Parquet.IReadOnlyGrid<TElement>.this[int y, int x].get -> TElement
Parquet.Items.GatheringTool
Parquet.Items.GatheringTool.Axe = 2 -> Parquet.Items.GatheringTool
Parquet.Items.GatheringTool.Bucket = 4 -> Parquet.Items.GatheringTool
Parquet.Items.GatheringTool.None = 0 -> Parquet.Items.GatheringTool
Parquet.Items.GatheringTool.Pick = 1 -> Parquet.Items.GatheringTool
Parquet.Items.GatheringTool.Shovel = 3 -> Parquet.Items.GatheringTool
Parquet.Items.IMutableItemModel
Parquet.Items.IMutableItemModel.EffectWhenUsedID.get -> Parquet.ModelID
Parquet.Items.IMutableItemModel.EffectWhenUsedID.set -> void
Parquet.Items.IMutableItemModel.EffectWhileHeldID.get -> Parquet.ModelID
Parquet.Items.IMutableItemModel.EffectWhileHeldID.set -> void
Parquet.Items.IMutableItemModel.ParquetID.get -> Parquet.ModelID
Parquet.Items.IMutableItemModel.ParquetID.set -> void
Parquet.Items.IMutableItemModel.Price.get -> int
Parquet.Items.IMutableItemModel.Price.set -> void
Parquet.Items.IMutableItemModel.Rarity.get -> int
Parquet.Items.IMutableItemModel.Rarity.set -> void
Parquet.Items.IMutableItemModel.StackMax.get -> int
Parquet.Items.IMutableItemModel.StackMax.set -> void
Parquet.Items.IMutableItemModel.Subtype.get -> Parquet.Items.ItemType
Parquet.Items.IMutableItemModel.Subtype.set -> void
Parquet.Items.Inventory
Parquet.Items.Inventory.Add(Parquet.Items.InventorySlot inSlot) -> void
Parquet.Items.Inventory.Capacity.get -> int
Parquet.Items.Inventory.Capacity.set -> void
Parquet.Items.Inventory.Clear() -> void
Parquet.Items.Inventory.Contains(Parquet.Items.InventorySlot inSlot) -> bool
Parquet.Items.Inventory.Contains(Parquet.ModelID inItemID) -> int
Parquet.Items.Inventory.CopyTo(Parquet.Items.InventorySlot[] inArray, int inArrayIndex) -> void
Parquet.Items.Inventory.Count.get -> int
Parquet.Items.Inventory.DeepClone() -> Parquet.Items.Inventory
Parquet.Items.Inventory.GetEnumerator() -> System.Collections.Generic.IEnumerator<Parquet.Items.InventorySlot>
Parquet.Items.Inventory.Give(Parquet.Items.InventorySlot inSlot) -> int
Parquet.Items.Inventory.Give(Parquet.ModelID inItemID, int inHowMany) -> int
Parquet.Items.Inventory.Has(Parquet.Items.InventorySlot inSlot) -> bool
Parquet.Items.Inventory.Has(Parquet.ModelID inItemID, int inHowMany = 1) -> bool
Parquet.Items.Inventory.Has(System.Collections.Generic.IEnumerable<(Parquet.ModelID, int)> inItems) -> bool
Parquet.Items.Inventory.Has(System.Collections.Generic.IEnumerable<Parquet.Items.InventorySlot> inSlots) -> bool
Parquet.Items.Inventory.Inventory() -> void
Parquet.Items.Inventory.Inventory(int inCapacity) -> void
Parquet.Items.Inventory.Inventory(System.Collections.Generic.IEnumerable<Parquet.Items.InventorySlot> inSlots, int inCapacity) -> void
Parquet.Items.Inventory.IsReadOnly.get -> bool
Parquet.Items.Inventory.ItemCount.get -> int
Parquet.Items.Inventory.Remove(Parquet.Items.InventorySlot inSlot) -> bool
Parquet.Items.Inventory.Take(Parquet.Items.InventorySlot inSlot) -> int
Parquet.Items.Inventory.Take(Parquet.ModelID inItemID, int inHowMany) -> int
Parquet.Items.InventoryConfiguration
Parquet.Items.InventorySlot
Parquet.Items.InventorySlot.Count.get -> int
Parquet.Items.InventorySlot.Give(int inHowMany = 1) -> int
Parquet.Items.InventorySlot.InventorySlot() -> void
Parquet.Items.InventorySlot.InventorySlot(Parquet.ModelID inItemToStore, int inHowMany = 1) -> void
Parquet.Items.InventorySlot.ItemID.get -> Parquet.ModelID
Parquet.Items.InventorySlot.Take(int inHowMany = 1) -> int
Parquet.Items.ItemModel
Parquet.Items.ItemModel.EffectWhenUsedID.get -> Parquet.ModelID
Parquet.Items.ItemModel.EffectWhileHeldID.get -> Parquet.ModelID
Parquet.Items.ItemModel.ItemModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.Items.ItemType inSubtype = Parquet.Items.ItemType.Other, int inPrice = 0, int inRarity = 0, int inStackMax = 999, Parquet.ModelID? inEffectWhileHeldID = null, Parquet.ModelID? inEffectWhenUsedID = null, Parquet.ModelID? inParquetID = null) -> void
Parquet.Items.ItemModel.ParquetID.get -> Parquet.ModelID
Parquet.Items.ItemModel.Price.get -> int
Parquet.Items.ItemModel.Rarity.get -> int
Parquet.Items.ItemModel.StackMax.get -> int
Parquet.Items.ItemModel.Subtype.get -> Parquet.Items.ItemType
Parquet.Items.ItemType
Parquet.Items.ItemType.Consumable = 1 -> Parquet.Items.ItemType
Parquet.Items.ItemType.Equipment = 2 -> Parquet.Items.ItemType
Parquet.Items.ItemType.KeyItem = 3 -> Parquet.Items.ItemType
Parquet.Items.ItemType.Material = 4 -> Parquet.Items.ItemType
Parquet.Items.ItemType.Other = 0 -> Parquet.Items.ItemType
Parquet.Items.ItemType.Storage = 5 -> Parquet.Items.ItemType
Parquet.Items.ItemType.ToolForGathering = 6 -> Parquet.Items.ItemType
Parquet.Items.ItemType.ToolForModification = 7 -> Parquet.Items.ItemType
Parquet.Items.ModificationTool
Parquet.Items.ModificationTool.Hammer = 2 -> Parquet.Items.ModificationTool
Parquet.Items.ModificationTool.None = 0 -> Parquet.Items.ModificationTool
Parquet.Items.ModificationTool.Shovel = 1 -> Parquet.Items.ModificationTool
Parquet.LibraryState
Parquet.Location
Parquet.Location.Location(Parquet.ModelID? inRegionID = null, Parquet.Vector2D? inPosition = null) -> void
Parquet.Location.Position.get -> Parquet.Vector2D
Parquet.Location.RegionID.get -> Parquet.ModelID
Parquet.Logger
Parquet.LogLevel
Parquet.LogLevel.Debug = 0 -> Parquet.LogLevel
Parquet.LogLevel.Error = 3 -> Parquet.LogLevel
Parquet.LogLevel.Fatal = 4 -> Parquet.LogLevel
Parquet.LogLevel.Info = 1 -> Parquet.LogLevel
Parquet.LogLevel.Warning = 2 -> Parquet.LogLevel
Parquet.Model
Parquet.Model.Comment.get -> string
Parquet.Model.Description.get -> string
Parquet.Model.Equals(Parquet.Model inModel) -> bool
Parquet.Model.ID.get -> Parquet.ModelID
Parquet.Model.Model(Parquet.Range<Parquet.ModelID> inBounds, Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags) -> void
Parquet.Model.Name.get -> string
Parquet.Model.Tags.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelTag>
Parquet.ModelCollection
Parquet.ModelCollection<TModel>
Parquet.ModelCollection<TModel>.Bounds.get -> System.Collections.Generic.IReadOnlyList<Parquet.Range<Parquet.ModelID>>
Parquet.ModelCollection<TModel>.Contains(Parquet.Model inModel) -> bool
Parquet.ModelCollection<TModel>.Contains(Parquet.ModelID inID) -> bool
Parquet.ModelCollection<TModel>.Count.get -> int
Parquet.ModelCollection<TModel>.GetEnumerator() -> System.Collections.Generic.IEnumerator<Parquet.Model>
Parquet.ModelCollection<TModel>.GetOrNull<TTarget>(Parquet.ModelID inID) -> TTarget
Parquet.ModelCollection<TModel>.GetRecordsForType<TModelInner>(Parquet.Range<Parquet.ModelID> inBounds) -> Parquet.ModelCollection<TModel>
Parquet.ModelCollection<TModel>.GetRecordsForType<TModelInner>(System.Collections.Generic.IEnumerable<Parquet.Range<Parquet.ModelID>> inBounds) -> Parquet.ModelCollection<TModel>
Parquet.ModelCollection<TModel>.ModelCollection(Parquet.Range<Parquet.ModelID> inBounds, System.Collections.Generic.IEnumerable<Parquet.Model> inModels) -> void
Parquet.ModelCollection<TModel>.ModelCollection(System.Collections.Generic.IEnumerable<Parquet.Range<Parquet.ModelID>> inBounds, System.Collections.Generic.IEnumerable<Parquet.Model> inModels) -> void
Parquet.ModelCollection<TModel>.PutRecordsForType<TModelInner>() -> void
Parquet.ModelID
Parquet.ModelID.CompareTo(Parquet.ModelID inIDentifier) -> int
Parquet.ModelID.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.ModelID.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.ModelID.Equals(Parquet.ModelID inIDentifier) -> bool
Parquet.ModelID.IsValidForRange(Parquet.Range<Parquet.ModelID> inRange) -> bool
Parquet.ModelID.IsValidForRange(System.Collections.Generic.IEnumerable<Parquet.Range<Parquet.ModelID>> inRanges) -> bool
Parquet.ModelID.ModelID() -> void
Parquet.ModelIDGrid
Parquet.ModelIDGrid.Columns.get -> int
Parquet.ModelIDGrid.Count.get -> int
Parquet.ModelIDGrid.DeepClone() -> Parquet.IGrid<Parquet.ModelID>
Parquet.ModelIDGrid.GetEnumerator() -> System.Collections.IEnumerator
Parquet.ModelIDGrid.IsValidPosition(Parquet.Vector2D inPosition) -> bool
Parquet.ModelIDGrid.ModelIDGrid() -> void
Parquet.ModelIDGrid.ModelIDGrid(int inRowCount, int inColumnCount) -> void
Parquet.ModelIDGrid.Rows.get -> int
Parquet.ModelIDGrid.this[int y, int x].get -> Parquet.ModelID
Parquet.ModelTag
Parquet.ModelTag.CompareTo(Parquet.ModelTag inTag) -> int
Parquet.ModelTag.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.ModelTag.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.ModelTag.ModelTag() -> void
Parquet.Pack<T>
Parquet.Pack<T>.Equals(Parquet.Pack<T> inPack) -> bool
Parquet.Pack<T>.Pack() -> void
Parquet.PackArrayExtensions
Parquet.Parquets.BlockModel
Parquet.Parquets.BlockModel.BlockModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToRoom = null, Parquet.Items.GatheringTool inGatherTool = Parquet.Items.GatheringTool.None, Parquet.Parquets.GatheringEffect inGatherEffect = Parquet.Parquets.GatheringEffect.None, Parquet.ModelID? inCollectibleID = null, bool inIsFlammable = false, bool inIsLiquid = false, int inMaxToughness = 10) -> void
Parquet.Parquets.BlockModel.CollectibleID.get -> Parquet.ModelID
Parquet.Parquets.BlockModel.GatherEffect.get -> Parquet.Parquets.GatheringEffect
Parquet.Parquets.BlockModel.GatherTool.get -> Parquet.Items.GatheringTool
Parquet.Parquets.BlockModel.IsFlammable.get -> bool
Parquet.Parquets.BlockModel.IsLiquid.get -> bool
Parquet.Parquets.BlockModel.MaxToughness.get -> int
Parquet.Parquets.BlockStatus
Parquet.Parquets.BlockStatus.BlockStatus(int inToughness = 10, int inMaxToughness = 10) -> void
Parquet.Parquets.BlockStatus.Toughness.get -> int
Parquet.Parquets.BlockStatus.Toughness.set -> void
Parquet.Parquets.CollectibleModel
Parquet.Parquets.CollectibleModel.CollectibleModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToRoom = null, Parquet.Parquets.CollectingEffect inCollectionEffect = Parquet.Parquets.CollectingEffect.None, int inEffectAmount = 0) -> void
Parquet.Parquets.CollectibleModel.CollectionEffect.get -> Parquet.Parquets.CollectingEffect
Parquet.Parquets.CollectibleModel.EffectAmount.get -> int
Parquet.Parquets.CollectingEffect
Parquet.Parquets.CollectingEffect.BiomeTime = 2 -> Parquet.Parquets.CollectingEffect
Parquet.Parquets.CollectingEffect.Item = 1 -> Parquet.Parquets.CollectingEffect
Parquet.Parquets.CollectingEffect.None = 0 -> Parquet.Parquets.CollectingEffect
Parquet.Parquets.EntryType
Parquet.Parquets.EntryType.Down = 3 -> Parquet.Parquets.EntryType
Parquet.Parquets.EntryType.None = 0 -> Parquet.Parquets.EntryType
Parquet.Parquets.EntryType.Room = 1 -> Parquet.Parquets.EntryType
Parquet.Parquets.EntryType.Up = 2 -> Parquet.Parquets.EntryType
Parquet.Parquets.FloorModel
Parquet.Parquets.FloorModel.FloorModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToRoom = null, Parquet.Items.ModificationTool inModTool = Parquet.Items.ModificationTool.None, string inTrenchName = "dark hole") -> void
Parquet.Parquets.FloorModel.ModTool.get -> Parquet.Items.ModificationTool
Parquet.Parquets.FloorModel.TrenchName.get -> string
Parquet.Parquets.FloorStatus
Parquet.Parquets.FloorStatus.FloorStatus(bool inIsTrench = false) -> void
Parquet.Parquets.FloorStatus.IsTrench.get -> bool
Parquet.Parquets.FloorStatus.IsTrench.set -> void
Parquet.Parquets.FurnishingModel
Parquet.Parquets.FurnishingModel.Entry.get -> Parquet.Parquets.EntryType
Parquet.Parquets.FurnishingModel.FurnishingModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToRoom = null, bool inIsWalkable = false, Parquet.Parquets.EntryType inEntry = Parquet.Parquets.EntryType.None, bool inIsEnclosing = false, bool inIsFlammable = false, Parquet.ModelID? inSwapID = null) -> void
Parquet.Parquets.FurnishingModel.IsEnclosing.get -> bool
Parquet.Parquets.FurnishingModel.IsFlammable.get -> bool
Parquet.Parquets.FurnishingModel.IsWalkable.get -> bool
Parquet.Parquets.FurnishingModel.SwapID.get -> Parquet.ModelID
Parquet.Parquets.GatheringEffect
Parquet.Parquets.GatheringEffect.Collectible = 2 -> Parquet.Parquets.GatheringEffect
Parquet.Parquets.GatheringEffect.Item = 1 -> Parquet.Parquets.GatheringEffect
Parquet.Parquets.GatheringEffect.None = 0 -> Parquet.Parquets.GatheringEffect
Parquet.Parquets.IMutableBlockModel
Parquet.Parquets.IMutableBlockModel.CollectibleID.get -> Parquet.ModelID
Parquet.Parquets.IMutableBlockModel.CollectibleID.set -> void
Parquet.Parquets.IMutableBlockModel.GatherEffect.get -> Parquet.Parquets.GatheringEffect
Parquet.Parquets.IMutableBlockModel.GatherEffect.set -> void
Parquet.Parquets.IMutableBlockModel.GatherTool.get -> Parquet.Items.GatheringTool
Parquet.Parquets.IMutableBlockModel.GatherTool.set -> void
Parquet.Parquets.IMutableBlockModel.IsFlammable.get -> bool
Parquet.Parquets.IMutableBlockModel.IsFlammable.set -> void
Parquet.Parquets.IMutableBlockModel.IsLiquid.get -> bool
Parquet.Parquets.IMutableBlockModel.IsLiquid.set -> void
Parquet.Parquets.IMutableBlockModel.MaxToughness.get -> int
Parquet.Parquets.IMutableBlockModel.MaxToughness.set -> void
Parquet.Parquets.IMutableCollectibleModel
Parquet.Parquets.IMutableCollectibleModel.CollectionEffect.get -> Parquet.Parquets.CollectingEffect
Parquet.Parquets.IMutableCollectibleModel.CollectionEffect.set -> void
Parquet.Parquets.IMutableCollectibleModel.EffectAmount.get -> int
Parquet.Parquets.IMutableCollectibleModel.EffectAmount.set -> void
Parquet.Parquets.IMutableFloorModel
Parquet.Parquets.IMutableFloorModel.ModTool.get -> Parquet.Items.ModificationTool
Parquet.Parquets.IMutableFloorModel.ModTool.set -> void
Parquet.Parquets.IMutableFloorModel.TrenchName.get -> string
Parquet.Parquets.IMutableFloorModel.TrenchName.set -> void
Parquet.Parquets.IMutableFurnishingModel
Parquet.Parquets.IMutableFurnishingModel.Entry.get -> Parquet.Parquets.EntryType
Parquet.Parquets.IMutableFurnishingModel.Entry.set -> void
Parquet.Parquets.IMutableFurnishingModel.IsEnclosing.get -> bool
Parquet.Parquets.IMutableFurnishingModel.IsEnclosing.set -> void
Parquet.Parquets.IMutableFurnishingModel.IsFlammable.get -> bool
Parquet.Parquets.IMutableFurnishingModel.IsFlammable.set -> void
Parquet.Parquets.IMutableFurnishingModel.IsWalkable.get -> bool
Parquet.Parquets.IMutableFurnishingModel.IsWalkable.set -> void
Parquet.Parquets.IMutableFurnishingModel.SwapID.get -> Parquet.ModelID
Parquet.Parquets.IMutableFurnishingModel.SwapID.set -> void
Parquet.Parquets.IMutableParquetModel
Parquet.Parquets.IMutableParquetModel.AddsToBiome.get -> System.Collections.Generic.ICollection<Parquet.ModelTag>
Parquet.Parquets.IMutableParquetModel.AddsToRoom.get -> System.Collections.Generic.ICollection<Parquet.ModelTag>
Parquet.Parquets.IMutableParquetModel.ItemID.get -> Parquet.ModelID
Parquet.Parquets.IMutableParquetModel.ItemID.set -> void
Parquet.Parquets.IParquetModelPack
Parquet.Parquets.IParquetModelPack.BlockID.get -> Parquet.ModelID
Parquet.Parquets.IParquetModelPack.CollectibleID.get -> Parquet.ModelID
Parquet.Parquets.IParquetModelPack.FloorID.get -> Parquet.ModelID
Parquet.Parquets.IParquetModelPack.FurnishingID.get -> Parquet.ModelID
Parquet.Parquets.IParquetModelPack.IsEmpty.get -> bool
Parquet.Parquets.ParquetModel
Parquet.Parquets.ParquetModel.AddsToBiome.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelTag>
Parquet.Parquets.ParquetModel.AddsToRoom.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelTag>
Parquet.Parquets.ParquetModel.ItemID.get -> Parquet.ModelID
Parquet.Parquets.ParquetModel.ParquetModel(Parquet.Range<Parquet.ModelID> inBounds, Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, Parquet.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inAddsToRoom = null) -> void
Parquet.Parquets.ParquetModelPack
Parquet.Parquets.ParquetModelPack.BlockID.get -> Parquet.ModelID
Parquet.Parquets.ParquetModelPack.BlockID.set -> void
Parquet.Parquets.ParquetModelPack.CollectibleID.get -> Parquet.ModelID
Parquet.Parquets.ParquetModelPack.CollectibleID.set -> void
Parquet.Parquets.ParquetModelPack.Count.get -> int
Parquet.Parquets.ParquetModelPack.FloorID.get -> Parquet.ModelID
Parquet.Parquets.ParquetModelPack.FloorID.set -> void
Parquet.Parquets.ParquetModelPack.FurnishingID.get -> Parquet.ModelID
Parquet.Parquets.ParquetModelPack.FurnishingID.set -> void
Parquet.Parquets.ParquetModelPack.IsEmpty.get -> bool
Parquet.Parquets.ParquetModelPack.IsEnclosing.get -> bool
Parquet.Parquets.ParquetModelPack.ParquetModelPack() -> void
Parquet.Parquets.ParquetModelPack.ParquetModelPack(Parquet.ModelID inFloor, Parquet.ModelID inBlock, Parquet.ModelID inFurnishing, Parquet.ModelID inCollectible) -> void
Parquet.Parquets.ParquetModelPackGrid
Parquet.Parquets.ParquetModelPackGrid.Columns.get -> int
Parquet.Parquets.ParquetModelPackGrid.Count.get -> int
Parquet.Parquets.ParquetModelPackGrid.DeepClone() -> Parquet.IGrid<Parquet.Parquets.ParquetModelPack>
Parquet.Parquets.ParquetModelPackGrid.GetEnumerator() -> System.Collections.IEnumerator
Parquet.Parquets.ParquetModelPackGrid.IsValidPosition(Parquet.Vector2D inPosition) -> bool
Parquet.Parquets.ParquetModelPackGrid.ParquetModelPackGrid() -> void
Parquet.Parquets.ParquetModelPackGrid.ParquetModelPackGrid(int inRowCount, int inColumnCount) -> void
Parquet.Parquets.ParquetModelPackGrid.ParquetModelPackGrid(Parquet.Parquets.ParquetModelPack[,] inParquetPackArray) -> void
Parquet.Parquets.ParquetModelPackGrid.Rows.get -> int
Parquet.Parquets.ParquetModelPackGrid.this[int y, int x].get -> Parquet.Parquets.ParquetModelPack
Parquet.Parquets.ParquetStatus<T>
Parquet.Parquets.ParquetStatus<T>.ParquetStatus() -> void
Parquet.Parquets.ParquetStatusPack
Parquet.Parquets.ParquetStatusPack.CurrentBlockStatus.get -> Parquet.Parquets.BlockStatus
Parquet.Parquets.ParquetStatusPack.CurrentBlockStatus.set -> void
Parquet.Parquets.ParquetStatusPack.CurrentFloorStatus.get -> Parquet.Parquets.FloorStatus
Parquet.Parquets.ParquetStatusPack.CurrentFloorStatus.set -> void
Parquet.Parquets.ParquetStatusPack.ParquetStatusPack() -> void
Parquet.Parquets.ParquetStatusPack.ParquetStatusPack(Parquet.Parquets.FloorStatus inFloorStatus = null, Parquet.Parquets.BlockStatus inBlockStatus = null) -> void
Parquet.Parquets.ParquetStatusPackGrid
Parquet.Parquets.ParquetStatusPackGrid.Columns.get -> int
Parquet.Parquets.ParquetStatusPackGrid.Count.get -> int
Parquet.Parquets.ParquetStatusPackGrid.DeepClone() -> Parquet.IGrid<Parquet.Parquets.ParquetStatusPack>
Parquet.Parquets.ParquetStatusPackGrid.GetEnumerator() -> System.Collections.IEnumerator
Parquet.Parquets.ParquetStatusPackGrid.IsValidPosition(Parquet.Vector2D inPosition) -> bool
Parquet.Parquets.ParquetStatusPackGrid.ParquetStatusPackGrid() -> void
Parquet.Parquets.ParquetStatusPackGrid.ParquetStatusPackGrid(int inRowCount, int inColumnCount) -> void
Parquet.Parquets.ParquetStatusPackGrid.Rows.get -> int
Parquet.Parquets.ParquetStatusPackGrid.this[int y, int x].get -> Parquet.Parquets.ParquetStatusPack
Parquet.Precondition
Parquet.Range<TElement>
Parquet.Range<TElement>.ContainsRange(Parquet.Range<TElement> inRange) -> bool
Parquet.Range<TElement>.ContainsValue(TElement inValue) -> bool
Parquet.Range<TElement>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.Range<TElement>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.Range<TElement>.Equals(Parquet.Range<TElement> inRange) -> bool
Parquet.Range<TElement>.IsValid() -> bool
Parquet.Range<TElement>.Maximum.get -> TElement
Parquet.Range<TElement>.Minimum.get -> TElement
Parquet.Range<TElement>.Range() -> void
Parquet.Range<TElement>.Range(TElement inMinimum, TElement inMaximum) -> void
Parquet.RangeCollectionExtensions
Parquet.RecipeElement
Parquet.RecipeElement.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.RecipeElement.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.RecipeElement.ElementAmount.get -> int
Parquet.RecipeElement.ElementTag.get -> Parquet.ModelTag
Parquet.RecipeElement.Equals(Parquet.RecipeElement inElement) -> bool
Parquet.RecipeElement.RecipeElement() -> void
Parquet.RecipeElement.RecipeElement(int inElementAmount, Parquet.ModelTag inElementTag) -> void
Parquet.Regions.ChunkDetail
Parquet.Regions.ChunkDetail.BaseComposition.get -> Parquet.ModelTag
Parquet.Regions.ChunkDetail.BaseTopography.get -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkDetail.ChunkDetail() -> void
Parquet.Regions.ChunkDetail.ChunkDetail(Parquet.Regions.ChunkTopography inBaseTopography, Parquet.ModelTag inBaseComposition, Parquet.Regions.ChunkTopography inModifierTopography, Parquet.ModelTag inModifierComposition) -> void
Parquet.Regions.ChunkDetail.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.Regions.ChunkDetail.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.Regions.ChunkDetail.DeepClone() -> Parquet.Regions.ChunkDetail
Parquet.Regions.ChunkDetail.Equals(Parquet.Regions.ChunkDetail inChunkType) -> bool
Parquet.Regions.ChunkDetail.ModifierComposition.get -> Parquet.ModelTag
Parquet.Regions.ChunkDetail.ModifierTopography.get -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.Central = 4 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.Clustered = 3 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.East = 7 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.Empty = 0 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.North = 5 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.NorthEast = 6 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.NorthWest = 12 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.Scattered = 2 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.Solid = 1 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.South = 9 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.SouthEast = 8 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.SouthWest = 10 -> Parquet.Regions.ChunkTopography
Parquet.Regions.ChunkTopography.West = 11 -> Parquet.Regions.ChunkTopography
Parquet.Regions.MapAnalysis
Parquet.Regions.MapChunk
Parquet.Regions.MapChunk.Details.get -> Parquet.Regions.ChunkDetail
Parquet.Regions.MapChunk.Details.set -> void
Parquet.Regions.MapChunk.DimensionsInParquets.get -> Parquet.Vector2D
Parquet.Regions.MapChunk.Generate() -> Parquet.Regions.MapChunk
Parquet.Regions.MapChunk.IsFilledOut.get -> bool
Parquet.Regions.MapChunk.MapChunk(bool inIsFilledOut = false, Parquet.Regions.ChunkDetail inDetails = null, Parquet.Parquets.ParquetModelPackGrid inParquetDefinitions = null) -> void
Parquet.Regions.MapChunk.ParquetDefinitions.get -> Parquet.Parquets.ParquetModelPackGrid
Parquet.Regions.MapChunk.ParquetDefinitions.set -> void
Parquet.Regions.MapChunkArrayExtensions
Parquet.Regions.RegionModel
Parquet.Regions.RegionModel.BackgroundColor.get -> string
Parquet.Regions.RegionModel.ExitCount() -> int
Parquet.Regions.RegionModel.MapChunks.get -> Parquet.Regions.MapChunkGrid
Parquet.Regions.RegionModel.RegionAbove.get -> Parquet.ModelID
Parquet.Regions.RegionModel.RegionBelow.get -> Parquet.ModelID
Parquet.Regions.RegionModel.RegionModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, string inBackgroundColor = "#FFFFFFFF", Parquet.ModelID? inRegionToTheNorth = null, Parquet.ModelID? inRegionToTheEast = null, Parquet.ModelID? inRegionToTheSouth = null, Parquet.ModelID? inRegionToTheWest = null, Parquet.ModelID? inRegionAbove = null, Parquet.ModelID? inRegionBelow = null) -> void
Parquet.Regions.RegionModel.RegionToTheEast.get -> Parquet.ModelID
Parquet.Regions.RegionModel.RegionToTheNorth.get -> Parquet.ModelID
Parquet.Regions.RegionModel.RegionToTheSouth.get -> Parquet.ModelID
Parquet.Regions.RegionModel.RegionToTheWest.get -> Parquet.ModelID
Parquet.Rooms.IMutableRoomRecipe
Parquet.Rooms.IMutableRoomRecipe.MinimumWalkableSpaces.get -> int
Parquet.Rooms.IMutableRoomRecipe.MinimumWalkableSpaces.set -> void
Parquet.Rooms.IMutableRoomRecipe.OptionallyRequiredFurnishings.get -> System.Collections.Generic.ICollection<Parquet.RecipeElement>
Parquet.Rooms.IMutableRoomRecipe.OptionallyRequiredPerimeterBlocks.get -> System.Collections.Generic.ICollection<Parquet.RecipeElement>
Parquet.Rooms.IMutableRoomRecipe.OptionallyRequiredWalkableFloors.get -> System.Collections.Generic.ICollection<Parquet.RecipeElement>
Parquet.Rooms.MapSpace
Parquet.Rooms.MapSpace.Content.get -> Parquet.Parquets.ParquetModelPack
Parquet.Rooms.MapSpace.EastNeighbor() -> Parquet.Rooms.MapSpace
Parquet.Rooms.MapSpace.Equals(Parquet.Rooms.MapSpace inSpace) -> bool
Parquet.Rooms.MapSpace.IsEmpty.get -> bool
Parquet.Rooms.MapSpace.IsEnclosing.get -> bool
Parquet.Rooms.MapSpace.MapSpace(int inX, int inY, Parquet.Parquets.ParquetModelPack inContent, Parquet.Parquets.ParquetModelPackGrid inSubregion) -> void
Parquet.Rooms.MapSpace.MapSpace(Parquet.Vector2D inPosition, Parquet.Parquets.ParquetModelPack inContent, Parquet.Parquets.ParquetModelPackGrid inSubregion) -> void
Parquet.Rooms.MapSpace.Neighbor(Parquet.Vector2D inOffset) -> Parquet.Rooms.MapSpace
Parquet.Rooms.MapSpace.Neighbors() -> System.Collections.Generic.IReadOnlyList<Parquet.Rooms.MapSpace>
Parquet.Rooms.MapSpace.NorthNeighbor() -> Parquet.Rooms.MapSpace
Parquet.Rooms.MapSpace.Position.get -> Parquet.Vector2D
Parquet.Rooms.MapSpace.SouthNeighbor() -> Parquet.Rooms.MapSpace
Parquet.Rooms.MapSpace.Subregion.get -> Parquet.Parquets.ParquetModelPackGrid
Parquet.Rooms.MapSpace.WestNeighbor() -> Parquet.Rooms.MapSpace
Parquet.Rooms.MapSpaceSetExtensions
Parquet.Rooms.ParquetModelPackGridExtensions
Parquet.Rooms.ReadOnlyRoomCollectionExtensions
Parquet.Rooms.Room
Parquet.Rooms.Room.ContainsPosition(Parquet.Vector2D inPosition) -> bool
Parquet.Rooms.Room.Equals(Parquet.Rooms.Room inRoom) -> bool
Parquet.Rooms.Room.FurnishingTags.get -> System.Collections.Generic.IEnumerable<Parquet.ModelTag>
Parquet.Rooms.Room.Perimeter.get -> System.Collections.Generic.IReadOnlySet<Parquet.Rooms.MapSpace>
Parquet.Rooms.Room.Position.get -> Parquet.Vector2D
Parquet.Rooms.Room.RecipeID.get -> Parquet.ModelID
Parquet.Rooms.Room.Room(System.Collections.Generic.IReadOnlySet<Parquet.Rooms.MapSpace> inWalkableArea, System.Collections.Generic.IReadOnlySet<Parquet.Rooms.MapSpace> inPerimeter) -> void
Parquet.Rooms.Room.WalkableArea.get -> System.Collections.Generic.IReadOnlySet<Parquet.Rooms.MapSpace>
Parquet.Rooms.RoomConfiguration
Parquet.Rooms.RoomRecipe
Parquet.Rooms.RoomRecipe.Matches(Parquet.Rooms.Room inRoom) -> bool
Parquet.Rooms.RoomRecipe.MinimumWalkableSpaces.get -> int
Parquet.Rooms.RoomRecipe.OptionallyRequiredFurnishings.get -> System.Collections.Generic.IReadOnlyList<Parquet.RecipeElement>
Parquet.Rooms.RoomRecipe.OptionallyRequiredPerimeterBlocks.get -> System.Collections.Generic.IReadOnlyList<Parquet.RecipeElement>
Parquet.Rooms.RoomRecipe.OptionallyRequiredWalkableFloors.get -> System.Collections.Generic.IReadOnlyList<Parquet.RecipeElement>
Parquet.Rooms.RoomRecipe.Priority.get -> int
Parquet.Rooms.RoomRecipe.RoomRecipe(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, int? inMinimumWalkableSpaces = null, System.Collections.Generic.IEnumerable<Parquet.RecipeElement> inOptionallyRequiredFurnishings = null, System.Collections.Generic.IEnumerable<Parquet.RecipeElement> inOptionallyRequiredWalkableFloors = null, System.Collections.Generic.IEnumerable<Parquet.RecipeElement> inOptionallyRequiredPerimeterBlocks = null) -> void
Parquet.Scripts.Commands
Parquet.Scripts.IMutableInteractionModel
Parquet.Scripts.IMutableInteractionModel.OutcomesIDs.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Scripts.IMutableInteractionModel.PrerequisitesIDs.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Scripts.IMutableInteractionModel.StepsIDs.get -> System.Collections.Generic.ICollection<Parquet.ModelID>
Parquet.Scripts.IMutableScriptModel
Parquet.Scripts.IMutableScriptModel.Nodes.get -> System.Collections.Generic.ICollection<Parquet.Scripts.ScriptNode>
Parquet.Scripts.InteractionModel
Parquet.Scripts.InteractionModel.InteractionModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inPrerequisitesIDs = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inStepsIDs = null, System.Collections.Generic.IEnumerable<Parquet.ModelID> inOutcomesIDs = null) -> void
Parquet.Scripts.InteractionModel.OutcomesIDs.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelID>
Parquet.Scripts.InteractionModel.PrerequisitesIDs.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelID>
Parquet.Scripts.InteractionModel.StepsIDs.get -> System.Collections.Generic.IReadOnlyList<Parquet.ModelID>
Parquet.Scripts.RunState
Parquet.Scripts.RunState.Completed = 2 -> Parquet.Scripts.RunState
Parquet.Scripts.RunState.InProgress = 1 -> Parquet.Scripts.RunState
Parquet.Scripts.RunState.Unstarted = 0 -> Parquet.Scripts.RunState
Parquet.Scripts.ScriptModel
Parquet.Scripts.ScriptModel.GetActions() -> System.Collections.Generic.IEnumerable<System.Action>
Parquet.Scripts.ScriptModel.Nodes.get -> System.Collections.Generic.IReadOnlyList<Parquet.Scripts.ScriptNode>
Parquet.Scripts.ScriptModel.ScriptModel(Parquet.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<Parquet.ModelTag> inTags = null, System.Collections.Generic.IEnumerable<Parquet.Scripts.ScriptNode> inNodes = null) -> void
Parquet.Scripts.ScriptNode
Parquet.Scripts.ScriptNode.CompareTo(Parquet.Scripts.ScriptNode inTag) -> int
Parquet.Scripts.ScriptNode.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.Scripts.ScriptNode.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.Scripts.ScriptNode.GetAction() -> System.Action
Parquet.Scripts.ScriptNode.ScriptNode() -> void
Parquet.Scripts.ScriptStatus
Parquet.Scripts.ScriptStatus.ProgramCounter.get -> int
Parquet.Scripts.ScriptStatus.ProgramCounter.set -> void
Parquet.Scripts.ScriptStatus.ScriptStatus(Parquet.Scripts.RunState inState = Parquet.Scripts.RunState.Unstarted, int inProgramCounter = 0) -> void
Parquet.Scripts.ScriptStatus.State.get -> Parquet.Scripts.RunState
Parquet.Scripts.ScriptStatus.State.set -> void
Parquet.SeriesConverter<TElement, TCollection>
Parquet.SeriesConverter<TElement, TCollection>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData, string inDelimiter) -> object
Parquet.SeriesConverter<TElement, TCollection>.SeriesConverter() -> void
Parquet.Status<T>
Parquet.Status<T>.DeepClone() -> Parquet.Status<T>
Parquet.Status<T>.Equals(Parquet.Status<T> inStatus) -> bool
Parquet.Status<T>.Status() -> void
Parquet.StatusArrayExtensions
Parquet.Vector2D
Parquet.Vector2D.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
Parquet.Vector2D.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
Parquet.Vector2D.Equals(Parquet.Vector2D inVector) -> bool
Parquet.Vector2D.Magnitude.get -> int
Parquet.Vector2D.Vector2D() -> void
Parquet.Vector2D.Vector2D(int inX, int inY) -> void
Parquet.Vector2D.X.get -> int
Parquet.Vector2D.Y.get -> int
static Parquet.All.Beings.get -> Parquet.ModelCollection<Parquet.Beings.BeingModel>
static Parquet.All.BiomeRecipes.get -> Parquet.ModelCollection<Parquet.Biomes.BiomeRecipe>
static Parquet.All.Blocks.get -> Parquet.ModelCollection<Parquet.Parquets.BlockModel>
static Parquet.All.Characters.get -> Parquet.ModelCollection<Parquet.Beings.CharacterModel>
static Parquet.All.Clear() -> void
static Parquet.All.Collectibles.get -> Parquet.ModelCollection<Parquet.Parquets.CollectibleModel>
static Parquet.All.CollectionsHaveBeenInitialized.get -> bool
static Parquet.All.CraftingRecipes.get -> Parquet.ModelCollection<Parquet.Crafts.CraftingRecipe>
static Parquet.All.Critters.get -> Parquet.ModelCollection<Parquet.Beings.CritterModel>
static Parquet.All.Floors.get -> Parquet.ModelCollection<Parquet.Parquets.FloorModel>
static Parquet.All.Furnishings.get -> Parquet.ModelCollection<Parquet.Parquets.FurnishingModel>
static Parquet.All.Games.get -> Parquet.ModelCollection<Parquet.Games.GameModel>
static Parquet.All.GetIDRangeForType(Parquet.Model inModel) -> Parquet.Range<Parquet.ModelID>
static Parquet.All.GetIDRangeForType(Parquet.ModelID inID) -> Parquet.Range<Parquet.ModelID>
static Parquet.All.GetIDRangeForType(System.Type inModelType) -> Parquet.Range<Parquet.ModelID>
static Parquet.All.InitializeCollections(System.Collections.Generic.IEnumerable<Parquet.Beings.PronounGroup> inPronouns, System.Collections.Generic.IEnumerable<Parquet.Games.GameModel> inGames, System.Collections.Generic.IEnumerable<Parquet.Parquets.FloorModel> inFloors, System.Collections.Generic.IEnumerable<Parquet.Parquets.BlockModel> inBlocks, System.Collections.Generic.IEnumerable<Parquet.Parquets.FurnishingModel> inFurnishings, System.Collections.Generic.IEnumerable<Parquet.Parquets.CollectibleModel> inCollectibles, System.Collections.Generic.IEnumerable<Parquet.Beings.CritterModel> inCritters, System.Collections.Generic.IEnumerable<Parquet.Beings.CharacterModel> inCharacters, System.Collections.Generic.IEnumerable<Parquet.Biomes.BiomeRecipe> inBiomes, System.Collections.Generic.IEnumerable<Parquet.Crafts.CraftingRecipe> inCraftingRecipes, System.Collections.Generic.IEnumerable<Parquet.Rooms.RoomRecipe> inRoomRecipes, System.Collections.Generic.IEnumerable<Parquet.Regions.RegionModel> inRegions, System.Collections.Generic.IEnumerable<Parquet.Scripts.ScriptModel> inScripts, System.Collections.Generic.IEnumerable<Parquet.Scripts.InteractionModel> inInteractions, System.Collections.Generic.IEnumerable<Parquet.Items.ItemModel> inItems) -> void
static Parquet.All.Interactions.get -> Parquet.ModelCollection<Parquet.Scripts.InteractionModel>
static Parquet.All.Items.get -> Parquet.ModelCollection<Parquet.Items.ItemModel>
static Parquet.All.LoadFromCSVs() -> bool
static Parquet.All.Parquets.get -> Parquet.ModelCollection<Parquet.Parquets.ParquetModel>
static Parquet.All.ProjectDirectory.get -> string
static Parquet.All.ProjectDirectory.set -> void
static Parquet.All.PronounGroups.get -> System.Collections.Generic.IReadOnlyCollection<Parquet.Beings.PronounGroup>
static Parquet.All.RegionModels.get -> Parquet.ModelCollection<Parquet.Regions.RegionModel>
static Parquet.All.RoomRecipes.get -> Parquet.ModelCollection<Parquet.Rooms.RoomRecipe>
static Parquet.All.SaveToCSVs() -> bool
static Parquet.All.Scripts.get -> Parquet.ModelCollection<Parquet.Scripts.ScriptModel>
static Parquet.Beings.BeingStatus.operator !=(Parquet.Beings.BeingStatus inStatus1, Parquet.Beings.BeingStatus inStatus2) -> bool
static Parquet.Beings.BeingStatus.operator ==(Parquet.Beings.BeingStatus inStatus1, Parquet.Beings.BeingStatus inStatus2) -> bool
static Parquet.Beings.BeingStatus.Unused.get -> Parquet.Beings.BeingStatus
static Parquet.Beings.PronounGroup.FilePath.get -> string
static Parquet.Beings.PronounGroup.GetRecords() -> System.Collections.Generic.HashSet<Parquet.Beings.PronounGroup>
static Parquet.Beings.PronounGroup.PutRecords(System.Collections.Generic.IEnumerable<Parquet.Beings.PronounGroup> inGroups) -> void
static Parquet.Biomes.BiomeConfiguration.FilePath.get -> string
static Parquet.Biomes.BiomeConfiguration.GetRecord() -> void
static Parquet.Biomes.BiomeConfiguration.LandThreshold.get -> int
static Parquet.Biomes.BiomeConfiguration.LandThresholdFactor.get -> double
static Parquet.Biomes.BiomeConfiguration.LandThresholdFactor.set -> void
static Parquet.Biomes.BiomeConfiguration.LiquidThreshold.get -> int
static Parquet.Biomes.BiomeConfiguration.LiquidThresholdFactor.get -> double
static Parquet.Biomes.BiomeConfiguration.LiquidThresholdFactor.set -> void
static Parquet.Biomes.BiomeConfiguration.PutRecord() -> void
static Parquet.Biomes.BiomeConfiguration.RoomThreshold.get -> int
static Parquet.Biomes.BiomeConfiguration.RoomThresholdFactor.get -> double
static Parquet.Biomes.BiomeConfiguration.RoomThresholdFactor.set -> void
static Parquet.Biomes.BiomeRecipe.None.get -> Parquet.Biomes.BiomeRecipe
static Parquet.Crafts.CraftConfiguration.FilePath.get -> string
static Parquet.Crafts.CraftConfiguration.GetRecord() -> void
static Parquet.Crafts.CraftConfiguration.IngredientCount.get -> Parquet.Range<int>
static Parquet.Crafts.CraftConfiguration.IngredientCount.set -> void
static Parquet.Crafts.CraftConfiguration.ProductCount.get -> Parquet.Range<int>
static Parquet.Crafts.CraftConfiguration.ProductCount.set -> void
static Parquet.Crafts.CraftConfiguration.PutRecord() -> void
static Parquet.Crafts.CraftingRecipe.NotCraftable.get -> Parquet.Crafts.CraftingRecipe
static Parquet.Crafts.StrikePanel.operator !=(Parquet.Crafts.StrikePanel inStrikePanel1, Parquet.Crafts.StrikePanel inStrikePanel2) -> bool
static Parquet.Crafts.StrikePanel.operator ==(Parquet.Crafts.StrikePanel inStrikePanel1, Parquet.Crafts.StrikePanel inStrikePanel2) -> bool
static Parquet.Crafts.StrikePanelArrayExtensions.IsValidPosition(this Parquet.Crafts.StrikePanel[,] inStrikePanels, Parquet.Vector2D inPosition) -> bool
static Parquet.Crafts.StrikePanelGrid.Empty.get -> Parquet.Crafts.StrikePanelGrid
static Parquet.Games.GameStatus.Default.get -> Parquet.Games.GameStatus
static Parquet.Games.GameStatus.operator !=(Parquet.Games.GameStatus inStatus1, Parquet.Games.GameStatus inStatus2) -> bool
static Parquet.Games.GameStatus.operator ==(Parquet.Games.GameStatus inStatus1, Parquet.Games.GameStatus inStatus2) -> bool
static Parquet.Items.Inventory.Empty.get -> Parquet.Items.Inventory
static Parquet.Items.InventoryConfiguration.DefaultCapacity.get -> int
static Parquet.Items.InventoryConfiguration.DefaultCapacity.set -> void
static Parquet.Items.InventoryConfiguration.FilePath.get -> string
static Parquet.Items.InventoryConfiguration.GetRecord() -> void
static Parquet.Items.InventoryConfiguration.PutRecord() -> void
static Parquet.Items.InventorySlot.Empty.get -> Parquet.Items.InventorySlot
static Parquet.Items.InventorySlot.operator !=(Parquet.Items.InventorySlot inStatus1, Parquet.Items.InventorySlot inStatus2) -> bool
static Parquet.Items.InventorySlot.operator ==(Parquet.Items.InventorySlot inStatus1, Parquet.Items.InventorySlot inStatus2) -> bool
static Parquet.LibraryState.IsPlayMode.get -> bool
static Parquet.LibraryState.IsPlayMode.set -> void
static Parquet.Location.Nowhere.get -> Parquet.Location
static Parquet.Location.operator !=(Parquet.Location inLocation1, Parquet.Location inLocation2) -> bool
static Parquet.Location.operator ==(Parquet.Location inLocation1, Parquet.Location inLocation2) -> bool
static Parquet.Logger.Log(Parquet.LogLevel inLogLevel, object inObject) -> void
static Parquet.Logger.Log(Parquet.LogLevel inLogLevel, string inMessage = null, System.Exception inException = null) -> void
static Parquet.Logger.SetLogger(Parquet.ILogger inLoggerToUse) -> void
static Parquet.Model.operator !=(Parquet.Model inModel1, Parquet.Model inModel2) -> bool
static Parquet.Model.operator ==(Parquet.Model inModel1, Parquet.Model inModel2) -> bool
static Parquet.ModelCollection.GetFilePath<TModel>() -> string
static Parquet.ModelID.implicit operator int(Parquet.ModelID inIDentifier) -> int
static Parquet.ModelID.implicit operator Parquet.ModelID(int inValue) -> Parquet.ModelID
static Parquet.ModelID.operator !=(Parquet.ModelID inIDentifier1, Parquet.ModelID inIDentifier2) -> bool
static Parquet.ModelID.operator <(Parquet.ModelID inIDentifier1, Parquet.ModelID inIDentifier2) -> bool
static Parquet.ModelID.operator <=(Parquet.ModelID inIDentifier1, Parquet.ModelID inIDentifier2) -> bool
static Parquet.ModelID.operator ==(Parquet.ModelID inIDentifier1, Parquet.ModelID inIDentifier2) -> bool
static Parquet.ModelID.operator >(Parquet.ModelID inIDentifier1, Parquet.ModelID inIDentifier2) -> bool
static Parquet.ModelID.operator >=(Parquet.ModelID inIDentifier1, Parquet.ModelID inIDentifier2) -> bool
static Parquet.ModelIDGrid.Empty.get -> Parquet.ModelIDGrid
static Parquet.ModelTag.implicit operator Parquet.ModelTag(string inValue) -> Parquet.ModelTag
static Parquet.ModelTag.implicit operator string(Parquet.ModelTag inTag) -> string
static Parquet.PackArrayExtensions.IsValidPosition<T>(this Parquet.Pack<T>[,] inArray, Parquet.Vector2D inPosition) -> bool
static Parquet.Parquets.BlockModel.Bounds.get -> Parquet.Range<Parquet.ModelID>
static Parquet.Parquets.BlockStatus.Default.get -> Parquet.Parquets.BlockStatus
static Parquet.Parquets.BlockStatus.operator !=(Parquet.Parquets.BlockStatus inStatus1, Parquet.Parquets.BlockStatus inStatus2) -> bool
static Parquet.Parquets.BlockStatus.operator ==(Parquet.Parquets.BlockStatus inStatus1, Parquet.Parquets.BlockStatus inStatus2) -> bool
static Parquet.Parquets.CollectibleModel.Bounds.get -> Parquet.Range<Parquet.ModelID>
static Parquet.Parquets.FloorModel.Bounds.get -> Parquet.Range<Parquet.ModelID>
static Parquet.Parquets.FloorStatus.Default.get -> Parquet.Parquets.FloorStatus
static Parquet.Parquets.FloorStatus.operator !=(Parquet.Parquets.FloorStatus inStatus1, Parquet.Parquets.FloorStatus inStatus2) -> bool
static Parquet.Parquets.FloorStatus.operator ==(Parquet.Parquets.FloorStatus inStatus1, Parquet.Parquets.FloorStatus inStatus2) -> bool
static Parquet.Parquets.FurnishingModel.Bounds.get -> Parquet.Range<Parquet.ModelID>
static Parquet.Parquets.ParquetModelPack.Empty.get -> Parquet.Parquets.ParquetModelPack
static Parquet.Parquets.ParquetModelPack.operator !=(Parquet.Parquets.ParquetModelPack inStack1, Parquet.Parquets.ParquetModelPack inStack2) -> bool
static Parquet.Parquets.ParquetModelPack.operator ==(Parquet.Parquets.ParquetModelPack inStack1, Parquet.Parquets.ParquetModelPack inStack2) -> bool
static Parquet.Parquets.ParquetModelPackGrid.Empty.get -> Parquet.Parquets.ParquetModelPackGrid
static Parquet.Parquets.ParquetStatusPack.Default.get -> Parquet.Parquets.ParquetStatusPack
static Parquet.Parquets.ParquetStatusPack.operator !=(Parquet.Parquets.ParquetStatusPack inStack1, Parquet.Parquets.ParquetStatusPack inStack2) -> bool
static Parquet.Parquets.ParquetStatusPack.operator ==(Parquet.Parquets.ParquetStatusPack inStack1, Parquet.Parquets.ParquetStatusPack inStack2) -> bool
static Parquet.Parquets.ParquetStatusPackGrid.Empty.get -> Parquet.Parquets.ParquetStatusPackGrid
static Parquet.Precondition.AreInRange(System.Collections.Generic.IEnumerable<Parquet.ModelID> inEnumerable, Parquet.Range<Parquet.ModelID> inBounds, string inArgumentName) -> void
static Parquet.Precondition.AreInRange(System.Collections.Generic.IEnumerable<Parquet.ModelID> inEnumerable, System.Collections.Generic.IEnumerable<Parquet.Range<Parquet.ModelID>> inBoundsCollection, string inArgumentName) -> void
static Parquet.Precondition.IsInRange(int inInt, Parquet.Range<int> inBounds, string inArgumentName) -> void
static Parquet.Precondition.IsInRange(Parquet.ModelID inID, Parquet.Range<Parquet.ModelID> inBounds, string inArgumentName) -> void
static Parquet.Precondition.IsInRange(Parquet.ModelID inID, System.Collections.Generic.IEnumerable<Parquet.Range<Parquet.ModelID>> inBoundsCollection, string inArgumentName) -> void
static Parquet.Precondition.IsInRange(Parquet.Range<Parquet.ModelID> inInnerBounds, Parquet.Range<Parquet.ModelID> inOuterBounds, string inArgumentName) -> void
static Parquet.Precondition.IsInRange(Parquet.Range<Parquet.ModelID> inInnerBounds, System.Collections.Generic.IEnumerable<Parquet.Range<Parquet.ModelID>> inBoundsCollection, string inArgumentName) -> void
static Parquet.Precondition.IsNotNone(Parquet.ModelID inID, string inArgumentName = "Argument") -> void
static Parquet.Precondition.IsNotNull(object inReference, string inArgumentName = "Argument") -> void
static Parquet.Precondition.IsNotNullOrEmpty(string inString, string inArgumentName) -> void
static Parquet.Precondition.IsNotNullOrEmpty<TElement>(System.Collections.Generic.IEnumerable<TElement> inEnumerable, string inArgumentName) -> void
static Parquet.Precondition.IsOfType<TToCheck, TTarget>(string inArgumentName = "Argument") -> void
static Parquet.Precondition.MustBeNonNegative(int inNumber, string inArgumentName = "Argument") -> void
static Parquet.Precondition.MustBePositive(int inNumber, string inArgumentName = "Argument") -> void
static Parquet.Range<TElement>.operator !=(Parquet.Range<TElement> inRange1, Parquet.Range<TElement> inRange2) -> bool
static Parquet.Range<TElement>.operator ==(Parquet.Range<TElement> inRange1, Parquet.Range<TElement> inRange2) -> bool
static Parquet.RangeCollectionExtensions.ContainsRange<TElement>(this System.Collections.Generic.IEnumerable<Parquet.Range<TElement>> inRangeCollection, Parquet.Range<TElement> inRange) -> bool
static Parquet.RangeCollectionExtensions.ContainsValue<TElement>(this System.Collections.Generic.IEnumerable<Parquet.Range<TElement>> inRangeCollection, TElement inValue) -> bool
static Parquet.RangeCollectionExtensions.IsValid<TElement>(this System.Collections.Generic.IEnumerable<Parquet.Range<TElement>> inRangeCollection) -> bool
static Parquet.RecipeElement.operator !=(Parquet.RecipeElement inElement1, Parquet.RecipeElement inElement2) -> bool
static Parquet.RecipeElement.operator ==(Parquet.RecipeElement inElement1, Parquet.RecipeElement inElement2) -> bool
static Parquet.Regions.ChunkDetail.operator !=(Parquet.Regions.ChunkDetail inChunkType1, Parquet.Regions.ChunkDetail inChunkType2) -> bool
static Parquet.Regions.ChunkDetail.operator ==(Parquet.Regions.ChunkDetail inChunkType1, Parquet.Regions.ChunkDetail inChunkType2) -> bool
static Parquet.Regions.MapAnalysis.CheckExitConsistency(Parquet.ModelID inRegionID) -> System.Collections.Generic.ICollection<string>
static Parquet.Regions.MapChunk.Empty.get -> Parquet.Regions.MapChunk
static Parquet.Regions.MapChunkArrayExtensions.IsValidPosition(this Parquet.Regions.MapChunk[,] inArray, Parquet.Vector2D inPosition) -> bool
static Parquet.Regions.RegionModel.Bounds.get -> Parquet.Range<Parquet.ModelID>
static Parquet.Regions.RegionModel.DimensionsInChunks.get -> Parquet.Vector2D
static Parquet.Rooms.MapSpace.operator !=(Parquet.Rooms.MapSpace inSpace1, Parquet.Rooms.MapSpace inSpace2) -> bool
static Parquet.Rooms.MapSpace.operator ==(Parquet.Rooms.MapSpace inSpace1, Parquet.Rooms.MapSpace inSpace2) -> bool
static Parquet.Rooms.ParquetModelPackGridExtensions.CreateRoomCollectionFromSubregion(this Parquet.Parquets.ParquetModelPackGrid inSubregion) -> System.Collections.Generic.IReadOnlyCollection<Parquet.Rooms.Room>
static Parquet.Rooms.ReadOnlyRoomCollectionExtensions.GetRoomAt(this System.Collections.Generic.IReadOnlyCollection<Parquet.Rooms.Room> inRooms, Parquet.Vector2D inPosition) -> Parquet.Rooms.Room
static Parquet.Rooms.ReadOnlyRoomCollectionExtensions.ToString(this System.Collections.Generic.IReadOnlyCollection<Parquet.Rooms.Room> inRooms) -> string
static Parquet.Rooms.Room.operator !=(Parquet.Rooms.Room inRoom1, Parquet.Rooms.Room inRoom2) -> bool
static Parquet.Rooms.Room.operator ==(Parquet.Rooms.Room inRoom1, Parquet.Rooms.Room inRoom2) -> bool
static Parquet.Rooms.RoomConfiguration.FilePath.get -> string
static Parquet.Rooms.RoomConfiguration.GetRecord() -> void
static Parquet.Rooms.RoomConfiguration.MaxWalkableSpaces.get -> int
static Parquet.Rooms.RoomConfiguration.MaxWalkableSpaces.set -> void
static Parquet.Rooms.RoomConfiguration.MinPerimeterSpaces.get -> int
static Parquet.Rooms.RoomConfiguration.MinWalkableSpaces.get -> int
static Parquet.Rooms.RoomConfiguration.MinWalkableSpaces.set -> void
static Parquet.Rooms.RoomConfiguration.PutRecord() -> void
static Parquet.Scripts.ScriptNode.implicit operator Parquet.Scripts.ScriptNode(string inValue) -> Parquet.Scripts.ScriptNode
static Parquet.Scripts.ScriptNode.implicit operator string(Parquet.Scripts.ScriptNode inNode) -> string
static Parquet.Scripts.ScriptStatus.operator !=(Parquet.Scripts.ScriptStatus inStatus1, Parquet.Scripts.ScriptStatus inStatus2) -> bool
static Parquet.Scripts.ScriptStatus.operator ==(Parquet.Scripts.ScriptStatus inStatus1, Parquet.Scripts.ScriptStatus inStatus2) -> bool
static Parquet.Scripts.ScriptStatus.Unstarted.get -> Parquet.Scripts.ScriptStatus
static Parquet.StatusArrayExtensions.IsValidPosition<T>(this Parquet.Status<T>[,] inArray, Parquet.Vector2D inPosition) -> bool
static Parquet.Vector2D.operator !=(Parquet.Vector2D inVector1, Parquet.Vector2D inVector2) -> bool
static Parquet.Vector2D.operator *(int inScalar, Parquet.Vector2D inVector) -> Parquet.Vector2D
static Parquet.Vector2D.operator +(Parquet.Vector2D inVector1, Parquet.Vector2D inVector2) -> Parquet.Vector2D
static Parquet.Vector2D.operator -(Parquet.Vector2D inVector1, Parquet.Vector2D inVector2) -> Parquet.Vector2D
static Parquet.Vector2D.operator ==(Parquet.Vector2D inVector1, Parquet.Vector2D inVector2) -> bool
static readonly Parquet.All.AllDefinedIDs -> System.Collections.Generic.IReadOnlyList<Parquet.Range<Parquet.ModelID>>
static readonly Parquet.All.BeingIDs -> System.Collections.Generic.IReadOnlyList<Parquet.Range<Parquet.ModelID>>
static readonly Parquet.All.BiomeRecipeIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.BlockIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.CharacterIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.CollectibleIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.CraftingRecipeIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.CritterIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.FloorIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.FurnishingIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.GameIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.InteractionIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.ItemIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.ParquetIDs -> System.Collections.Generic.IReadOnlyList<Parquet.Range<Parquet.ModelID>>
static readonly Parquet.All.RegionIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.RoomRecipeIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.All.ScriptIDs -> Parquet.Range<Parquet.ModelID>
static readonly Parquet.AssemblyInfo.LibraryVersion -> string
static readonly Parquet.Beings.PronounGroup.DefaultGroup -> Parquet.Beings.PronounGroup
static readonly Parquet.Crafts.StrikePanel.Unused -> Parquet.Crafts.StrikePanel
static readonly Parquet.ModelCollection<TModel>.Default -> Parquet.ModelCollection<TModel>
static readonly Parquet.ModelID.None -> Parquet.ModelID
static readonly Parquet.ModelTag.None -> Parquet.ModelTag
static readonly Parquet.Range<TElement>.None -> Parquet.Range<TElement>
static readonly Parquet.RecipeElement.None -> Parquet.RecipeElement
static readonly Parquet.Regions.ChunkDetail.None -> Parquet.Regions.ChunkDetail
static readonly Parquet.Regions.RegionModel.Empty -> Parquet.Regions.RegionModel
static readonly Parquet.Rooms.MapSpace.Empty -> Parquet.Rooms.MapSpace
static readonly Parquet.Scripts.ScriptNode.None -> Parquet.Scripts.ScriptNode
static readonly Parquet.Vector2D.East -> Parquet.Vector2D
static readonly Parquet.Vector2D.North -> Parquet.Vector2D
static readonly Parquet.Vector2D.South -> Parquet.Vector2D
static readonly Parquet.Vector2D.Unit -> Parquet.Vector2D
static readonly Parquet.Vector2D.West -> Parquet.Vector2D
static readonly Parquet.Vector2D.Zero -> Parquet.Vector2D
virtual Parquet.Model.GetAllTags() -> System.Collections.Generic.IEnumerable<Parquet.ModelTag>
virtual Parquet.Pack<T>.DeepClone() -> Parquet.Pack<T>
