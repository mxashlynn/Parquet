ParquetClassLibrary.All
ParquetClassLibrary.AssemblyInfo
ParquetClassLibrary.AssemblyInfo.AssemblyInfo() -> void
ParquetClassLibrary.Beings.BeingModel
ParquetClassLibrary.Beings.BeingModel.AvoidsIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingModel.BeingModel(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inNativeBiomeID = null, ParquetClassLibrary.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inSeeksIDs = null) -> void
ParquetClassLibrary.Beings.BeingModel.NativeBiomeID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.BeingModel.PrimaryBehaviorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.BeingModel.SeeksIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus
ParquetClassLibrary.Beings.BeingStatus.BeingDefinition.get -> ParquetClassLibrary.Beings.BeingModel
ParquetClassLibrary.Beings.BeingStatus.BeingStatus(ParquetClassLibrary.Beings.BeingModel inBeingDefinition, ParquetClassLibrary.ModelID inCurrentBehavior, ParquetClassLibrary.Location inPosition, ParquetClassLibrary.Location inSpawnAt, int inBiomeTimeRemaining, float inBuildingSpeed, float inModificationSpeed, float inGatheringSpeed, float inMovementSpeed, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownBeings = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownParquets = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownRoomRecipes = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inKnownCraftingRecipes = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inQuests = null, System.Collections.Generic.List<ParquetClassLibrary.ModelID> inInventory = null) -> void
ParquetClassLibrary.Beings.BeingStatus.BiomeTimeRemaining.get -> int
ParquetClassLibrary.Beings.BeingStatus.BiomeTimeRemaining.set -> void
ParquetClassLibrary.Beings.BeingStatus.BuildingSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.BuildingSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.CurrentBehaviorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Beings.BeingStatus.CurrentBehaviorID.set -> void
ParquetClassLibrary.Beings.BeingStatus.GatheringSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.GatheringSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.Inventory.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownBeings.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownCraftingRecipes.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownParquets.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.KnownRoomRecipes.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.ModificationSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.ModificationSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.MovementSpeed.get -> float
ParquetClassLibrary.Beings.BeingStatus.MovementSpeed.set -> void
ParquetClassLibrary.Beings.BeingStatus.Position.get -> ParquetClassLibrary.Location
ParquetClassLibrary.Beings.BeingStatus.Position.set -> void
ParquetClassLibrary.Beings.BeingStatus.Quests.get -> System.Collections.Generic.List<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.BeingStatus.Revision.get -> int
ParquetClassLibrary.Beings.BeingStatus.RoomAssignment.get -> ParquetClassLibrary.Location
ParquetClassLibrary.Beings.BeingStatus.RoomAssignment.set -> void
ParquetClassLibrary.Beings.BeingStatus.SpawnAt.get -> ParquetClassLibrary.Location
ParquetClassLibrary.Beings.BeingStatus.SpawnAt.set -> void
ParquetClassLibrary.Beings.CharacterModel
ParquetClassLibrary.Beings.CharacterModel.CharacterModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inNativeBiomeID = null, ParquetClassLibrary.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inSeeksIDs = null, string inPronouns = "they/them", string inStoryCharacterID = "", System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inStartingQuestIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inStartingDialogueIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inStartingInventoryIDs = null) -> void
ParquetClassLibrary.Beings.CharacterModel.FamilyName.get -> string
ParquetClassLibrary.Beings.CharacterModel.PersonalName.get -> string
ParquetClassLibrary.Beings.CharacterModel.Pronouns.get -> string
ParquetClassLibrary.Beings.CharacterModel.StartingDialogueIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.CharacterModel.StartingInventoryIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.CharacterModel.StartingQuestIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Beings.CharacterModel.StoryCharacterID.get -> string
ParquetClassLibrary.Beings.CritterModel
ParquetClassLibrary.Beings.CritterModel.CritterModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inNativeBiomeID = null, ParquetClassLibrary.ModelID? inPrimaryBehaviorID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inAvoidsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inSeeksIDs = null) -> void
ParquetClassLibrary.Beings.PronounGroup
ParquetClassLibrary.Beings.PronounGroup.Determiner.get -> string
ParquetClassLibrary.Beings.PronounGroup.Objective.get -> string
ParquetClassLibrary.Beings.PronounGroup.Possessive.get -> string
ParquetClassLibrary.Beings.PronounGroup.PronounGroup(string inSubjective, string inObjective, string inDeterminer, string inPossessive, string inReflexive) -> void
ParquetClassLibrary.Beings.PronounGroup.Reflexive.get -> string
ParquetClassLibrary.Beings.PronounGroup.Subjective.get -> string
ParquetClassLibrary.Beings.PronounGroup.UpdatePronouns(System.Text.StringBuilder inText) -> System.Text.StringBuilder
ParquetClassLibrary.Beings.PronounGroup.UpdatePronouns(string inText) -> System.Text.StringBuilder
ParquetClassLibrary.Biomes.BiomeConfiguration
ParquetClassLibrary.Biomes.BiomeRecipe
ParquetClassLibrary.Biomes.BiomeRecipe.BiomeRecipe(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inTier = 0, bool inIsRoomBased = false, bool inIsLiquidBased = false, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inParquetCriteria = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inEntryRequirements = null) -> void
ParquetClassLibrary.Biomes.BiomeRecipe.EntryRequirements.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Biomes.BiomeRecipe.IsLiquidBased.get -> bool
ParquetClassLibrary.Biomes.BiomeRecipe.IsRoomBased.get -> bool
ParquetClassLibrary.Biomes.BiomeRecipe.ParquetCriteria.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Biomes.BiomeRecipe.Tier.get -> int
ParquetClassLibrary.Crafts.CraftConfiguration
ParquetClassLibrary.Crafts.CraftingRecipe
ParquetClassLibrary.Crafts.CraftingRecipe.CraftingRecipe(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inProducts = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inIngredients = null, ParquetClassLibrary.Crafts.StrikePanelGrid inPanelPattern = null) -> void
ParquetClassLibrary.Crafts.CraftingRecipe.Ingredients.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Crafts.CraftingRecipe.PanelPattern.get -> ParquetClassLibrary.Crafts.StrikePanelGrid
ParquetClassLibrary.Crafts.CraftingRecipe.Products.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Crafts.StrikePanel
ParquetClassLibrary.Crafts.StrikePanel.Clone() -> ParquetClassLibrary.Crafts.StrikePanel
ParquetClassLibrary.Crafts.StrikePanel.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Crafts.StrikePanel.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Crafts.StrikePanel.Equals(ParquetClassLibrary.Crafts.StrikePanel inStrikePanel) -> bool
ParquetClassLibrary.Crafts.StrikePanel.IdealRange.get -> ParquetClassLibrary.Range<int>
ParquetClassLibrary.Crafts.StrikePanel.IdealRange.set -> void
ParquetClassLibrary.Crafts.StrikePanel.StrikePanel() -> void
ParquetClassLibrary.Crafts.StrikePanel.StrikePanel(ParquetClassLibrary.Range<int> inWorkingRange, ParquetClassLibrary.Range<int> inIdealRange) -> void
ParquetClassLibrary.Crafts.StrikePanel.WorkingRange.get -> ParquetClassLibrary.Range<int>
ParquetClassLibrary.Crafts.StrikePanel.WorkingRange.set -> void
ParquetClassLibrary.Crafts.StrikePanelArrayExtensions
ParquetClassLibrary.Crafts.StrikePanelGrid
ParquetClassLibrary.Crafts.StrikePanelGrid.Columns.get -> int
ParquetClassLibrary.Crafts.StrikePanelGrid.Count.get -> int
ParquetClassLibrary.Crafts.StrikePanelGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Crafts.StrikePanelGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Crafts.StrikePanelGrid.Rows.get -> int
ParquetClassLibrary.Crafts.StrikePanelGrid.StrikePanelGrid() -> void
ParquetClassLibrary.Crafts.StrikePanelGrid.StrikePanelGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.Crafts.StrikePanelGrid.this[int y, int x].get -> ParquetClassLibrary.Crafts.StrikePanel
ParquetClassLibrary.Delimiters
ParquetClassLibrary.EditorSupport.IBeingModelEdit
ParquetClassLibrary.EditorSupport.IBeingModelEdit.AvoidsIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IBeingModelEdit.NativeBiomeID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IBeingModelEdit.NativeBiomeID.set -> void
ParquetClassLibrary.EditorSupport.IBeingModelEdit.PrimaryBehaviorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IBeingModelEdit.PrimaryBehaviorID.set -> void
ParquetClassLibrary.EditorSupport.IBeingModelEdit.SeeksIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.EntryRequirements.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.IsLiquidBased.get -> bool
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.IsLiquidBased.set -> void
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.IsRoomBased.get -> bool
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.IsRoomBased.set -> void
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.ParquetCriteria.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.Tier.get -> int
ParquetClassLibrary.EditorSupport.IBiomeRecipeEdit.Tier.set -> void
ParquetClassLibrary.EditorSupport.IBlockModelEdit
ParquetClassLibrary.EditorSupport.IBlockModelEdit.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IBlockModelEdit.CollectibleID.set -> void
ParquetClassLibrary.EditorSupport.IBlockModelEdit.GatherEffect.get -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.EditorSupport.IBlockModelEdit.GatherEffect.set -> void
ParquetClassLibrary.EditorSupport.IBlockModelEdit.GatherTool.get -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.EditorSupport.IBlockModelEdit.GatherTool.set -> void
ParquetClassLibrary.EditorSupport.IBlockModelEdit.IsFlammable.get -> bool
ParquetClassLibrary.EditorSupport.IBlockModelEdit.IsFlammable.set -> void
ParquetClassLibrary.EditorSupport.IBlockModelEdit.IsLiquid.get -> bool
ParquetClassLibrary.EditorSupport.IBlockModelEdit.IsLiquid.set -> void
ParquetClassLibrary.EditorSupport.IBlockModelEdit.MaxToughness.get -> int
ParquetClassLibrary.EditorSupport.IBlockModelEdit.MaxToughness.set -> void
ParquetClassLibrary.EditorSupport.ICharacterModelEdit
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.FamilyName.get -> string
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.FamilyName.set -> void
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.PersonalName.get -> string
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.PersonalName.set -> void
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.Pronouns.get -> string
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.Pronouns.set -> void
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.StartingDialogueIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.StartingInventoryIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.StartingQuestIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.StoryCharacterID.get -> string
ParquetClassLibrary.EditorSupport.ICharacterModelEdit.StoryCharacterID.set -> void
ParquetClassLibrary.EditorSupport.ICollectibleModelEdit
ParquetClassLibrary.EditorSupport.ICollectibleModelEdit.CollectionEffect.get -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.EditorSupport.ICollectibleModelEdit.CollectionEffect.set -> void
ParquetClassLibrary.EditorSupport.ICollectibleModelEdit.EffectAmount.get -> int
ParquetClassLibrary.EditorSupport.ICollectibleModelEdit.EffectAmount.set -> void
ParquetClassLibrary.EditorSupport.ICraftingRecipeEdit
ParquetClassLibrary.EditorSupport.ICraftingRecipeEdit.Ingredients.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.ICraftingRecipeEdit.PanelPattern.get -> ParquetClassLibrary.Crafts.StrikePanelGrid
ParquetClassLibrary.EditorSupport.ICraftingRecipeEdit.Products.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.ICritterModelEdit
ParquetClassLibrary.EditorSupport.IFloorModelEdit
ParquetClassLibrary.EditorSupport.IFloorModelEdit.ModTool.get -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.EditorSupport.IFloorModelEdit.ModTool.set -> void
ParquetClassLibrary.EditorSupport.IFloorModelEdit.TrenchName.get -> string
ParquetClassLibrary.EditorSupport.IFloorModelEdit.TrenchName.set -> void
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.Entry.get -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.Entry.set -> void
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.IsEnclosing.get -> bool
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.IsEnclosing.set -> void
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.IsFlammable.get -> bool
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.IsFlammable.set -> void
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.IsWalkable.get -> bool
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.IsWalkable.set -> void
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.SwapID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IFurnishingModelEdit.SwapID.set -> void
ParquetClassLibrary.EditorSupport.IGameModelEdit
ParquetClassLibrary.EditorSupport.IGameModelEdit.EpisodeNumber.get -> int
ParquetClassLibrary.EditorSupport.IGameModelEdit.EpisodeNumber.set -> void
ParquetClassLibrary.EditorSupport.IGameModelEdit.EpisodeTitle.get -> string
ParquetClassLibrary.EditorSupport.IGameModelEdit.EpisodeTitle.set -> void
ParquetClassLibrary.EditorSupport.IGameModelEdit.FirstScriptID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IGameModelEdit.FirstScriptID.set -> void
ParquetClassLibrary.EditorSupport.IGameModelEdit.IsEpisode.get -> bool
ParquetClassLibrary.EditorSupport.IGameModelEdit.IsEpisode.set -> void
ParquetClassLibrary.EditorSupport.IGameModelEdit.PlayerCharacterID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IGameModelEdit.PlayerCharacterID.set -> void
ParquetClassLibrary.EditorSupport.IInteractionModelEdit
ParquetClassLibrary.EditorSupport.IInteractionModelEdit.OutcomesIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IInteractionModelEdit.PrerequisitesIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IInteractionModelEdit.StepsIDs.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.EditorSupport.IItemModelEdit
ParquetClassLibrary.EditorSupport.IItemModelEdit.EffectWhenUsedID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IItemModelEdit.EffectWhenUsedID.set -> void
ParquetClassLibrary.EditorSupport.IItemModelEdit.EffectWhileHeldID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IItemModelEdit.EffectWhileHeldID.set -> void
ParquetClassLibrary.EditorSupport.IItemModelEdit.ItemTags.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IItemModelEdit.ParquetID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IItemModelEdit.ParquetID.set -> void
ParquetClassLibrary.EditorSupport.IItemModelEdit.Price.get -> int
ParquetClassLibrary.EditorSupport.IItemModelEdit.Price.set -> void
ParquetClassLibrary.EditorSupport.IItemModelEdit.Rarity.get -> int
ParquetClassLibrary.EditorSupport.IItemModelEdit.Rarity.set -> void
ParquetClassLibrary.EditorSupport.IItemModelEdit.StackMax.get -> int
ParquetClassLibrary.EditorSupport.IItemModelEdit.StackMax.set -> void
ParquetClassLibrary.EditorSupport.IItemModelEdit.Subtype.get -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.EditorSupport.IItemModelEdit.Subtype.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit
ParquetClassLibrary.EditorSupport.IMapRegionEdit.BackgroundColor.get -> string
ParquetClassLibrary.EditorSupport.IMapRegionEdit.BackgroundColor.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionAboveID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionAboveID.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionBelowID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionBelowID.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheEastID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheEastID.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheNorthID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheNorthID.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheSouthID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheSouthID.set -> void
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheWestID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IMapRegionEdit.RegionToTheWestID.set -> void
ParquetClassLibrary.EditorSupport.IModelCollectionEdit<TModel>
ParquetClassLibrary.EditorSupport.IModelCollectionEdit<TModel>.Add(TModel inModel) -> void
ParquetClassLibrary.EditorSupport.IModelCollectionEdit<TModel>.Clear() -> void
ParquetClassLibrary.EditorSupport.IModelCollectionEdit<TModel>.Remove(ParquetClassLibrary.ModelID inID) -> void
ParquetClassLibrary.EditorSupport.IModelCollectionEdit<TModel>.Remove(TModel inModel) -> void
ParquetClassLibrary.EditorSupport.IModelCollectionEdit<TModel>.Replace(TModel inModel) -> void
ParquetClassLibrary.EditorSupport.IModelEdit
ParquetClassLibrary.EditorSupport.IModelEdit.Comment.get -> string
ParquetClassLibrary.EditorSupport.IModelEdit.Comment.set -> void
ParquetClassLibrary.EditorSupport.IModelEdit.Description.get -> string
ParquetClassLibrary.EditorSupport.IModelEdit.Description.set -> void
ParquetClassLibrary.EditorSupport.IModelEdit.ID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IModelEdit.ID.set -> void
ParquetClassLibrary.EditorSupport.IModelEdit.Name.get -> string
ParquetClassLibrary.EditorSupport.IModelEdit.Name.set -> void
ParquetClassLibrary.EditorSupport.IParquetModelEdit
ParquetClassLibrary.EditorSupport.IParquetModelEdit.AddsToBiome.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IParquetModelEdit.AddsToRoom.get -> System.Collections.Generic.IList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.EditorSupport.IParquetModelEdit.ItemID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.EditorSupport.IParquetModelEdit.ItemID.set -> void
ParquetClassLibrary.EditorSupport.IPronounGroupEdit
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Determiner.get -> string
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Determiner.set -> void
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Objective.get -> string
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Objective.set -> void
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Possessive.get -> string
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Possessive.set -> void
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Reflexive.get -> string
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Reflexive.set -> void
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Subjective.get -> string
ParquetClassLibrary.EditorSupport.IPronounGroupEdit.Subjective.set -> void
ParquetClassLibrary.EditorSupport.IRoomRecipeEdit
ParquetClassLibrary.EditorSupport.IRoomRecipeEdit.MinimumWalkableSpaces.get -> int
ParquetClassLibrary.EditorSupport.IRoomRecipeEdit.MinimumWalkableSpaces.set -> void
ParquetClassLibrary.EditorSupport.IRoomRecipeEdit.OptionallyRequiredFurnishings.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IRoomRecipeEdit.OptionallyRequiredPerimeterBlocks.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IRoomRecipeEdit.OptionallyRequiredWalkableFloors.get -> System.Collections.Generic.IList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.EditorSupport.IScriptModelEdit
ParquetClassLibrary.EditorSupport.IScriptModelEdit.Nodes.get -> System.Collections.Generic.IList<ParquetClassLibrary.Scripts.ScriptNode>
ParquetClassLibrary.Games.GameModel
ParquetClassLibrary.Games.GameModel.EpisodeNumber.get -> int
ParquetClassLibrary.Games.GameModel.EpisodeTitle.get -> string
ParquetClassLibrary.Games.GameModel.FirstScriptID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Games.GameModel.GameModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, bool inIsEpisode = false, string inEpisodeTitle = "", int inEpisodeNumber = 0, ParquetClassLibrary.ModelID? inPlayerCharacterID = null, ParquetClassLibrary.ModelID? inFirstScriptID = null) -> void
ParquetClassLibrary.Games.GameModel.IsEpisode.get -> bool
ParquetClassLibrary.Games.GameModel.PlayerCharacterID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.GridConverter<TElement, TGrid>
ParquetClassLibrary.GridConverter<TElement, TGrid>.GridConverter() -> void
ParquetClassLibrary.IGrid<TElement>
ParquetClassLibrary.IGrid<TElement>.Columns.get -> int
ParquetClassLibrary.IGrid<TElement>.Rows.get -> int
ParquetClassLibrary.IGrid<TElement>.this[int y, int x].get -> TElement
ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Axe = 2 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Bucket = 4 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.None = 0 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Pick = 1 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.GatheringTool.Shovel = 3 -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Items.Inventory
ParquetClassLibrary.Items.Inventory.Capacity.get -> int
ParquetClassLibrary.Items.Inventory.Contains(ParquetClassLibrary.ModelID inItemID) -> int
ParquetClassLibrary.Items.Inventory.Count.get -> int
ParquetClassLibrary.Items.Inventory.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Items.InventorySlot>
ParquetClassLibrary.Items.Inventory.Give(ParquetClassLibrary.Items.InventorySlot inSlot) -> int
ParquetClassLibrary.Items.Inventory.Give(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> int
ParquetClassLibrary.Items.Inventory.Has(ParquetClassLibrary.Items.InventorySlot inSlot) -> bool
ParquetClassLibrary.Items.Inventory.Has(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> bool
ParquetClassLibrary.Items.Inventory.Has(System.Collections.Generic.IEnumerable<(ParquetClassLibrary.ModelID, int)> inItems) -> bool
ParquetClassLibrary.Items.Inventory.Has(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.InventorySlot> inSlots) -> bool
ParquetClassLibrary.Items.Inventory.Inventory(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.InventorySlot> inSlots, int inCapacity) -> void
ParquetClassLibrary.Items.Inventory.Inventory(int inCapacity) -> void
ParquetClassLibrary.Items.Inventory.Take(ParquetClassLibrary.Items.InventorySlot inSlot) -> int
ParquetClassLibrary.Items.Inventory.Take(ParquetClassLibrary.ModelID inItemID, int inHowMany = 1) -> int
ParquetClassLibrary.Items.InventorySlot
ParquetClassLibrary.Items.InventorySlot.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Items.InventorySlot.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Items.InventorySlot.Count.get -> int
ParquetClassLibrary.Items.InventorySlot.Give(int inHowMany = 1) -> int
ParquetClassLibrary.Items.InventorySlot.InventorySlot() -> void
ParquetClassLibrary.Items.InventorySlot.InventorySlot(ParquetClassLibrary.ModelID inItemToStore, int inHowMany = 1) -> void
ParquetClassLibrary.Items.InventorySlot.ItemID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.InventorySlot.Take(int inHowMany = 1) -> int
ParquetClassLibrary.Items.ItemModel
ParquetClassLibrary.Items.ItemModel.EffectWhenUsedID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.ItemModel.EffectWhileHeldID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.ItemModel.ItemModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.Items.ItemType inSubtype = ParquetClassLibrary.Items.ItemType.Other, int inPrice = 0, int inRarity = 0, int inStackMax = 999, ParquetClassLibrary.ModelID? inEffectWhileHeldID = null, ParquetClassLibrary.ModelID? inEffectWhenUsedID = null, ParquetClassLibrary.ModelID? inParquetID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inItemTags = null) -> void
ParquetClassLibrary.Items.ItemModel.ItemTags.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Items.ItemModel.ParquetID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Items.ItemModel.Price.get -> int
ParquetClassLibrary.Items.ItemModel.Rarity.get -> int
ParquetClassLibrary.Items.ItemModel.StackMax.get -> int
ParquetClassLibrary.Items.ItemModel.Subtype.get -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Consumable = 1 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Equipment = 2 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.KeyItem = 3 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Material = 4 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Other = 0 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.Storage = 5 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.ToolForGathering = 6 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ItemType.ToolForModification = 7 -> ParquetClassLibrary.Items.ItemType
ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Items.ModificationTool.Hammer = 2 -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Items.ModificationTool.None = 0 -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Items.ModificationTool.Shovel = 1 -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Location
ParquetClassLibrary.Location.Equals(ParquetClassLibrary.Location inLocation) -> bool
ParquetClassLibrary.Location.Location() -> void
ParquetClassLibrary.Location.Position.get -> ParquetClassLibrary.Vector2D
ParquetClassLibrary.Location.RegionID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.ChunkDetail
ParquetClassLibrary.Maps.ChunkDetail.BaseComposition.get -> ParquetClassLibrary.ModelTag
ParquetClassLibrary.Maps.ChunkDetail.BaseTopography.get -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkDetail.ChunkDetail() -> void
ParquetClassLibrary.Maps.ChunkDetail.ChunkDetail(ParquetClassLibrary.Maps.ChunkTopography inBaseTopography, ParquetClassLibrary.ModelTag inBaseComposition, ParquetClassLibrary.Maps.ChunkTopography inModifierTopography, ParquetClassLibrary.ModelTag inModifierComposition) -> void
ParquetClassLibrary.Maps.ChunkDetail.Clone() -> ParquetClassLibrary.Maps.ChunkDetail
ParquetClassLibrary.Maps.ChunkDetail.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Maps.ChunkDetail.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Maps.ChunkDetail.Equals(ParquetClassLibrary.Maps.ChunkDetail inChunkType) -> bool
ParquetClassLibrary.Maps.ChunkDetail.ModifierComposition.get -> ParquetClassLibrary.ModelTag
ParquetClassLibrary.Maps.ChunkDetail.ModifierTopography.get -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Central = 4 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Clustered = 3 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.East = 7 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Empty = 0 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.North = 5 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.NorthEast = 6 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.NorthWest = 12 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Scattered = 2 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.Solid = 1 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.South = 9 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.SouthEast = 8 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.SouthWest = 10 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.ChunkTopography.West = 11 -> ParquetClassLibrary.Maps.ChunkTopography
ParquetClassLibrary.Maps.MapAnalysis
ParquetClassLibrary.Maps.MapChunkModel
ParquetClassLibrary.Maps.MapChunkModel.Details.get -> ParquetClassLibrary.Maps.ChunkDetail
ParquetClassLibrary.Maps.MapChunkModel.Generate() -> ParquetClassLibrary.Maps.MapChunkModel
ParquetClassLibrary.Maps.MapChunkModel.IsFilledOut.get -> bool
ParquetClassLibrary.Maps.MapChunkModel.MapChunkModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0, bool inIsFilledOut = false, ParquetClassLibrary.Maps.ChunkDetail inDetails = null, ParquetClassLibrary.Parquets.ParquetStackGrid inParquetDefinitions = null) -> void
ParquetClassLibrary.Maps.MapModel
ParquetClassLibrary.Maps.MapModel.GetSubregion() -> ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Maps.MapModel.GetSubregion(ParquetClassLibrary.Vector2D inUpperLeft, ParquetClassLibrary.Vector2D inLowerRight) -> ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Maps.MapModel.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Maps.MapModel.MapModel(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0) -> void
ParquetClassLibrary.Maps.MapModel.ParquetsCount.get -> int
ParquetClassLibrary.Maps.MapModel.Revision.get -> int
ParquetClassLibrary.Maps.MapModel.Revision.set -> void
ParquetClassLibrary.Maps.MapRegionModel
ParquetClassLibrary.Maps.MapRegionModel.BackgroundColor.get -> string
ParquetClassLibrary.Maps.MapRegionModel.GetBiome() -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.MapRegionModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0, string inBackgroundColor = "#FFFFFFFF", ParquetClassLibrary.ModelID? inRegionToTheNorth = null, ParquetClassLibrary.ModelID? inRegionToTheEast = null, ParquetClassLibrary.ModelID? inRegionToTheSouth = null, ParquetClassLibrary.ModelID? inRegionToTheWest = null, ParquetClassLibrary.ModelID? inRegionAbove = null, ParquetClassLibrary.ModelID? inRegionBelow = null, ParquetClassLibrary.Parquets.ParquetStatusGrid inParquetStatuses = null, ParquetClassLibrary.Parquets.ParquetStackGrid inParquetDefinitions = null) -> void
ParquetClassLibrary.Maps.MapRegionModel.ParquetStatuses.get -> ParquetClassLibrary.Parquets.ParquetStatusGrid
ParquetClassLibrary.Maps.MapRegionModel.RegionAbove.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionBelow.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheEast.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheNorth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheSouth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.RegionToTheWest.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionModel.Rooms.get -> ParquetClassLibrary.Rooms.RoomCollection
ParquetClassLibrary.Maps.MapRegionSketch
ParquetClassLibrary.Maps.MapRegionSketch.BackgroundColor.get -> string
ParquetClassLibrary.Maps.MapRegionSketch.Chunks.get -> ParquetClassLibrary.ModelIDGrid
ParquetClassLibrary.Maps.MapRegionSketch.MapRegionSketch(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int inRevision = 0, string inBackgroundColor = "#FFFFFFFF", ParquetClassLibrary.ModelID? inRegionToTheNorth = null, ParquetClassLibrary.ModelID? inRegionToTheEast = null, ParquetClassLibrary.ModelID? inRegionToTheSouth = null, ParquetClassLibrary.ModelID? inRegionToTheWest = null, ParquetClassLibrary.ModelID? inRegionAbove = null, ParquetClassLibrary.ModelID? inRegionBelow = null, ParquetClassLibrary.ModelIDGrid inChunks = null) -> void
ParquetClassLibrary.Maps.MapRegionSketch.RegionAbove.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionBelow.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheEast.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheNorth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheSouth.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.RegionToTheWest.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Maps.MapRegionSketch.Stitch() -> ParquetClassLibrary.Maps.MapRegionModel
ParquetClassLibrary.Model
ParquetClassLibrary.Model.Comment.get -> string
ParquetClassLibrary.Model.Description.get -> string
ParquetClassLibrary.Model.Equals(ParquetClassLibrary.Model inModel) -> bool
ParquetClassLibrary.Model.ID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Model.Model(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment) -> void
ParquetClassLibrary.Model.Name.get -> string
ParquetClassLibrary.ModelCollection
ParquetClassLibrary.ModelCollection.Get(ParquetClassLibrary.ModelID inID) -> ParquetClassLibrary.Model
ParquetClassLibrary.ModelCollection.ModelCollection(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection.ModelCollection(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection<TModel>
ParquetClassLibrary.ModelCollection<TModel>.Bounds.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
ParquetClassLibrary.ModelCollection<TModel>.Contains(ParquetClassLibrary.Model inModel) -> bool
ParquetClassLibrary.ModelCollection<TModel>.Contains(ParquetClassLibrary.ModelID inID) -> bool
ParquetClassLibrary.ModelCollection<TModel>.Count.get -> int
ParquetClassLibrary.ModelCollection<TModel>.Get<TTarget>(ParquetClassLibrary.ModelID inID) -> TTarget
ParquetClassLibrary.ModelCollection<TModel>.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Model>
ParquetClassLibrary.ModelCollection<TModel>.GetOrNull(ParquetClassLibrary.ModelID inID) -> TModel
ParquetClassLibrary.ModelCollection<TModel>.GetRecordsForType<TModelInner>(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds) -> ParquetClassLibrary.ModelCollection<TModel>
ParquetClassLibrary.ModelCollection<TModel>.GetRecordsForType<TModelInner>(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBounds) -> ParquetClassLibrary.ModelCollection<TModel>
ParquetClassLibrary.ModelCollection<TModel>.ModelCollection(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection<TModel>.ModelCollection(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Model> inModels) -> void
ParquetClassLibrary.ModelCollection<TModel>.PutRecordsForType<TModelInner>() -> void
ParquetClassLibrary.ModelID
ParquetClassLibrary.ModelID.CompareTo(ParquetClassLibrary.ModelID inIDentifier) -> int
ParquetClassLibrary.ModelID.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.ModelID.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.ModelID.Equals(ParquetClassLibrary.ModelID inIDentifier) -> bool
ParquetClassLibrary.ModelID.IsValidForRange(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inRange) -> bool
ParquetClassLibrary.ModelID.IsValidForRange(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inRanges) -> bool
ParquetClassLibrary.ModelID.ModelID() -> void
ParquetClassLibrary.ModelIDGrid
ParquetClassLibrary.ModelIDGrid.Columns.get -> int
ParquetClassLibrary.ModelIDGrid.Count.get -> int
ParquetClassLibrary.ModelIDGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.ModelIDGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.ModelIDGrid.ModelIDGrid() -> void
ParquetClassLibrary.ModelIDGrid.ModelIDGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.ModelIDGrid.Rows.get -> int
ParquetClassLibrary.ModelIDGrid.this[int y, int x].get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.ModelTag
ParquetClassLibrary.ModelTag.CompareTo(ParquetClassLibrary.ModelTag inTag) -> int
ParquetClassLibrary.ModelTag.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.ModelTag.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.ModelTag.ModelTag() -> void
ParquetClassLibrary.Parquets.BlockModel
ParquetClassLibrary.Parquets.BlockModel.BlockModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, ParquetClassLibrary.Items.GatheringTool inGatherTool = ParquetClassLibrary.Items.GatheringTool.None, ParquetClassLibrary.Parquets.GatheringEffect inGatherEffect = ParquetClassLibrary.Parquets.GatheringEffect.None, ParquetClassLibrary.ModelID? inCollectibleID = null, bool inIsFlammable = false, bool inIsLiquid = false, int inMaxToughness = 10) -> void
ParquetClassLibrary.Parquets.BlockModel.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.BlockModel.GatherEffect.get -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.BlockModel.GatherTool.get -> ParquetClassLibrary.Items.GatheringTool
ParquetClassLibrary.Parquets.BlockModel.IsFlammable.get -> bool
ParquetClassLibrary.Parquets.BlockModel.IsLiquid.get -> bool
ParquetClassLibrary.Parquets.BlockModel.MaxToughness.get -> int
ParquetClassLibrary.Parquets.CollectibleModel
ParquetClassLibrary.Parquets.CollectibleModel.CollectibleModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, ParquetClassLibrary.Parquets.CollectingEffect inCollectionEffect = ParquetClassLibrary.Parquets.CollectingEffect.None, int inEffectAmount = 0) -> void
ParquetClassLibrary.Parquets.CollectibleModel.CollectionEffect.get -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectibleModel.EffectAmount.get -> int
ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectingEffect.BiomeTime = 2 -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectingEffect.Item = 1 -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.CollectingEffect.None = 0 -> ParquetClassLibrary.Parquets.CollectingEffect
ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.Down = 3 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.None = 0 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.Room = 1 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.EntryType.Up = 2 -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.FloorModel
ParquetClassLibrary.Parquets.FloorModel.FloorModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, ParquetClassLibrary.Items.ModificationTool inModTool = ParquetClassLibrary.Items.ModificationTool.None, string inTrenchName = "dark hole") -> void
ParquetClassLibrary.Parquets.FloorModel.ModTool.get -> ParquetClassLibrary.Items.ModificationTool
ParquetClassLibrary.Parquets.FloorModel.TrenchName.get -> string
ParquetClassLibrary.Parquets.FurnishingModel
ParquetClassLibrary.Parquets.FurnishingModel.Entry.get -> ParquetClassLibrary.Parquets.EntryType
ParquetClassLibrary.Parquets.FurnishingModel.FurnishingModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null, bool inIsWalkable = false, ParquetClassLibrary.Parquets.EntryType inEntry = ParquetClassLibrary.Parquets.EntryType.None, bool inIsEnclosing = false, bool inIsFlammable = false, ParquetClassLibrary.ModelID? inSwapID = null) -> void
ParquetClassLibrary.Parquets.FurnishingModel.IsEnclosing.get -> bool
ParquetClassLibrary.Parquets.FurnishingModel.IsFlammable.get -> bool
ParquetClassLibrary.Parquets.FurnishingModel.IsWalkable.get -> bool
ParquetClassLibrary.Parquets.FurnishingModel.SwapID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.GatheringEffect.Collectible = 2 -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.GatheringEffect.Item = 1 -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.GatheringEffect.None = 0 -> ParquetClassLibrary.Parquets.GatheringEffect
ParquetClassLibrary.Parquets.IParquetStack
ParquetClassLibrary.Parquets.IParquetStack.BlockID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.FloorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.FurnishingID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.IParquetStack.IsEmpty.get -> bool
ParquetClassLibrary.Parquets.ParquetModel
ParquetClassLibrary.Parquets.ParquetModel.AddsToBiome.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Parquets.ParquetModel.AddsToRoom.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Parquets.ParquetModel.ItemID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetModel.ParquetModel(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, ParquetClassLibrary.ModelID? inItemID = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToBiome = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag> inAddsToRoom = null) -> void
ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Parquets.ParquetStack.BlockID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.BlockID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.Clone() -> ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Parquets.ParquetStack.CollectibleID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.CollectibleID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Parquets.ParquetStack.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Parquets.ParquetStack.Count.get -> int
ParquetClassLibrary.Parquets.ParquetStack.Equals(ParquetClassLibrary.Parquets.ParquetStack inStack) -> bool
ParquetClassLibrary.Parquets.ParquetStack.FloorID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.FloorID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.FurnishingID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Parquets.ParquetStack.FurnishingID.set -> void
ParquetClassLibrary.Parquets.ParquetStack.IsEmpty.get -> bool
ParquetClassLibrary.Parquets.ParquetStack.IsEnclosing.get -> bool
ParquetClassLibrary.Parquets.ParquetStack.ParquetStack() -> void
ParquetClassLibrary.Parquets.ParquetStack.ParquetStack(ParquetClassLibrary.ModelID inFloor, ParquetClassLibrary.ModelID inBlock, ParquetClassLibrary.ModelID inFurnishing, ParquetClassLibrary.ModelID inCollectible) -> void
ParquetClassLibrary.Parquets.ParquetStackArrayExtensions
ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Parquets.ParquetStackGrid.Columns.get -> int
ParquetClassLibrary.Parquets.ParquetStackGrid.Count.get -> int
ParquetClassLibrary.Parquets.ParquetStackGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Parquets.ParquetStackGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Parquets.ParquetStackGrid.ParquetStackGrid() -> void
ParquetClassLibrary.Parquets.ParquetStackGrid.ParquetStackGrid(ParquetClassLibrary.Parquets.ParquetStack[,] inParquetStackArray) -> void
ParquetClassLibrary.Parquets.ParquetStackGrid.ParquetStackGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.Parquets.ParquetStackGrid.Rows.get -> int
ParquetClassLibrary.Parquets.ParquetStackGrid.this[int y, int x].get -> ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Parquets.ParquetStatus
ParquetClassLibrary.Parquets.ParquetStatus.Clone() -> ParquetClassLibrary.Parquets.ParquetStatus
ParquetClassLibrary.Parquets.ParquetStatus.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Parquets.ParquetStatus.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Parquets.ParquetStatus.Equals(ParquetClassLibrary.Parquets.ParquetStatus inStatus) -> bool
ParquetClassLibrary.Parquets.ParquetStatus.IsTrench.get -> bool
ParquetClassLibrary.Parquets.ParquetStatus.IsTrench.set -> void
ParquetClassLibrary.Parquets.ParquetStatus.ParquetStatus() -> void
ParquetClassLibrary.Parquets.ParquetStatus.ParquetStatus(bool inIsTrench = false, int inToughness = 10, int inMaxToughness = 10) -> void
ParquetClassLibrary.Parquets.ParquetStatus.Toughness.get -> int
ParquetClassLibrary.Parquets.ParquetStatus.Toughness.set -> void
ParquetClassLibrary.Parquets.ParquetStatusArrayExtensions
ParquetClassLibrary.Parquets.ParquetStatusGrid
ParquetClassLibrary.Parquets.ParquetStatusGrid.Columns.get -> int
ParquetClassLibrary.Parquets.ParquetStatusGrid.Count.get -> int
ParquetClassLibrary.Parquets.ParquetStatusGrid.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Parquets.ParquetStatusGrid.IsValidPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Parquets.ParquetStatusGrid.ParquetStatusGrid() -> void
ParquetClassLibrary.Parquets.ParquetStatusGrid.ParquetStatusGrid(int inRowCount, int inColumnCount) -> void
ParquetClassLibrary.Parquets.ParquetStatusGrid.Rows.get -> int
ParquetClassLibrary.Parquets.ParquetStatusGrid.this[int y, int x].get -> ParquetClassLibrary.Parquets.ParquetStatus
ParquetClassLibrary.Precondition
ParquetClassLibrary.Range<TElement>
ParquetClassLibrary.Range<TElement>.ContainsRange(ParquetClassLibrary.Range<TElement> inRange) -> bool
ParquetClassLibrary.Range<TElement>.ContainsValue(TElement inValue) -> bool
ParquetClassLibrary.Range<TElement>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Range<TElement>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Range<TElement>.Equals(ParquetClassLibrary.Range<TElement> inRange) -> bool
ParquetClassLibrary.Range<TElement>.IsValid() -> bool
ParquetClassLibrary.Range<TElement>.Maximum.get -> TElement
ParquetClassLibrary.Range<TElement>.Minimum.get -> TElement
ParquetClassLibrary.Range<TElement>.Range(TElement inMinimum, TElement inMaximum) -> void
ParquetClassLibrary.RangeCollectionExtensions
ParquetClassLibrary.RecipeElement
ParquetClassLibrary.RecipeElement.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.RecipeElement.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.RecipeElement.ElementAmount.get -> int
ParquetClassLibrary.RecipeElement.ElementTag.get -> ParquetClassLibrary.ModelTag
ParquetClassLibrary.RecipeElement.Equals(ParquetClassLibrary.RecipeElement inElement) -> bool
ParquetClassLibrary.RecipeElement.RecipeElement() -> void
ParquetClassLibrary.RecipeElement.RecipeElement(int inElementAmount, ParquetClassLibrary.ModelTag inElementTag) -> void
ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Content.get -> ParquetClassLibrary.Parquets.ParquetStack
ParquetClassLibrary.Rooms.MapSpace.EastNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Equals(ParquetClassLibrary.Rooms.MapSpace inSpace) -> bool
ParquetClassLibrary.Rooms.MapSpace.IsEmpty.get -> bool
ParquetClassLibrary.Rooms.MapSpace.IsEnclosing.get -> bool
ParquetClassLibrary.Rooms.MapSpace.MapSpace(ParquetClassLibrary.Vector2D inPosition, ParquetClassLibrary.Parquets.ParquetStack inContent, ParquetClassLibrary.Parquets.ParquetStackGrid inSubregion) -> void
ParquetClassLibrary.Rooms.MapSpace.MapSpace(int inX, int inY, ParquetClassLibrary.Parquets.ParquetStack inContent, ParquetClassLibrary.Parquets.ParquetStackGrid inSubregion) -> void
ParquetClassLibrary.Rooms.MapSpace.Neighbor(ParquetClassLibrary.Vector2D inOffset) -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Neighbors() -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Rooms.MapSpace>
ParquetClassLibrary.Rooms.MapSpace.NorthNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Position.get -> ParquetClassLibrary.Vector2D
ParquetClassLibrary.Rooms.MapSpace.SouthNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpace.Subregion.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
ParquetClassLibrary.Rooms.MapSpace.WestNeighbor() -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpaceCollection
ParquetClassLibrary.Rooms.MapSpaceCollection.Contains(ParquetClassLibrary.Rooms.MapSpace inSpace) -> bool
ParquetClassLibrary.Rooms.MapSpaceCollection.Count.get -> int
ParquetClassLibrary.Rooms.MapSpaceCollection.First.get -> ParquetClassLibrary.Rooms.MapSpace
ParquetClassLibrary.Rooms.MapSpaceCollection.GetEnumerator() -> System.Collections.IEnumerator
ParquetClassLibrary.Rooms.MapSpaceCollection.MapSpaceCollection(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Rooms.MapSpace> inSpaces) -> void
ParquetClassLibrary.Rooms.MapSpaceCollection.SetEquals(ParquetClassLibrary.Rooms.MapSpaceCollection inEqualTo) -> bool
ParquetClassLibrary.Rooms.Room
ParquetClassLibrary.Rooms.Room.ContainsPosition(ParquetClassLibrary.Vector2D inPosition) -> bool
ParquetClassLibrary.Rooms.Room.Equals(ParquetClassLibrary.Rooms.Room inRoom) -> bool
ParquetClassLibrary.Rooms.Room.FurnishingTags.get -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
ParquetClassLibrary.Rooms.Room.Perimeter.get -> ParquetClassLibrary.Rooms.MapSpaceCollection
ParquetClassLibrary.Rooms.Room.Position.get -> ParquetClassLibrary.Vector2D
ParquetClassLibrary.Rooms.Room.RecipeID.get -> ParquetClassLibrary.ModelID
ParquetClassLibrary.Rooms.Room.Room(ParquetClassLibrary.Rooms.MapSpaceCollection inWalkableArea, ParquetClassLibrary.Rooms.MapSpaceCollection inPerimeter) -> void
ParquetClassLibrary.Rooms.Room.WalkableArea.get -> ParquetClassLibrary.Rooms.MapSpaceCollection
ParquetClassLibrary.Rooms.RoomCollection
ParquetClassLibrary.Rooms.RoomCollection.Contains(ParquetClassLibrary.Rooms.Room inRoom) -> bool
ParquetClassLibrary.Rooms.RoomCollection.Count.get -> int
ParquetClassLibrary.Rooms.RoomCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<ParquetClassLibrary.Rooms.Room>
ParquetClassLibrary.Rooms.RoomCollection.GetRoomAt(ParquetClassLibrary.Vector2D inPosition) -> ParquetClassLibrary.Rooms.Room
ParquetClassLibrary.Rooms.RoomConfiguration
ParquetClassLibrary.Rooms.RoomRecipe
ParquetClassLibrary.Rooms.RoomRecipe.Matches(ParquetClassLibrary.Rooms.Room inRoom) -> bool
ParquetClassLibrary.Rooms.RoomRecipe.MinimumWalkableSpaces.get -> int
ParquetClassLibrary.Rooms.RoomRecipe.OptionallyRequiredFurnishings.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Rooms.RoomRecipe.OptionallyRequiredPerimeterBlocks.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Rooms.RoomRecipe.OptionallyRequiredWalkableFloors.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.RecipeElement>
ParquetClassLibrary.Rooms.RoomRecipe.Priority.get -> int
ParquetClassLibrary.Rooms.RoomRecipe.RoomRecipe(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, int? inMinimumWalkableSpaces = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inOptionallyRequiredFurnishings = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inOptionallyRequiredWalkableFloors = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.RecipeElement> inOptionallyRequiredPerimeterBlocks = null) -> void
ParquetClassLibrary.Scripts.Commands
ParquetClassLibrary.Scripts.InteractionModel
ParquetClassLibrary.Scripts.InteractionModel.InteractionModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inPrerequisitesIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inStepsIDs = null, System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inOutcomesIDs = null) -> void
ParquetClassLibrary.Scripts.InteractionModel.OutcomesIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Scripts.InteractionModel.PrerequisitesIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Scripts.InteractionModel.StepsIDs.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.ModelID>
ParquetClassLibrary.Scripts.InteractionStatus
ParquetClassLibrary.Scripts.InteractionStatus.InteractionDefinition.get -> ParquetClassLibrary.Scripts.InteractionModel
ParquetClassLibrary.Scripts.InteractionStatus.InteractionStatus(ParquetClassLibrary.Scripts.InteractionModel inInteractionDefinition, ParquetClassLibrary.Scripts.RunState inState, int inProgramCounter) -> void
ParquetClassLibrary.Scripts.InteractionStatus.ProgramCounter.get -> int
ParquetClassLibrary.Scripts.InteractionStatus.ProgramCounter.set -> void
ParquetClassLibrary.Scripts.InteractionStatus.Revision.get -> int
ParquetClassLibrary.Scripts.InteractionStatus.State.get -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.InteractionStatus.State.set -> void
ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.RunState.Completed = 2 -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.RunState.InProgress = 1 -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.RunState.Unstarted = 0 -> ParquetClassLibrary.Scripts.RunState
ParquetClassLibrary.Scripts.ScriptModel
ParquetClassLibrary.Scripts.ScriptModel.GetActions() -> System.Collections.Generic.IEnumerable<System.Action>
ParquetClassLibrary.Scripts.ScriptModel.Nodes.get -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Scripts.ScriptNode>
ParquetClassLibrary.Scripts.ScriptModel.ScriptModel(ParquetClassLibrary.ModelID inID, string inName, string inDescription, string inComment, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Scripts.ScriptNode> inNodes = null) -> void
ParquetClassLibrary.Scripts.ScriptNode
ParquetClassLibrary.Scripts.ScriptNode.CompareTo(ParquetClassLibrary.Scripts.ScriptNode inTag) -> int
ParquetClassLibrary.Scripts.ScriptNode.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Scripts.ScriptNode.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Scripts.ScriptNode.GetAction() -> System.Action
ParquetClassLibrary.Scripts.ScriptNode.ScriptNode() -> void
ParquetClassLibrary.SeriesConverter<TElement, TCollection>
ParquetClassLibrary.SeriesConverter<TElement, TCollection>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData, string inDelimiter) -> object
ParquetClassLibrary.SeriesConverter<TElement, TCollection>.SeriesConverter() -> void
ParquetClassLibrary.Vector2D
ParquetClassLibrary.Vector2D.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
ParquetClassLibrary.Vector2D.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
ParquetClassLibrary.Vector2D.Equals(ParquetClassLibrary.Vector2D inVector) -> bool
ParquetClassLibrary.Vector2D.Magnitude.get -> int
ParquetClassLibrary.Vector2D.Vector2D(int inX, int inY) -> void
ParquetClassLibrary.Vector2D.X.get -> int
ParquetClassLibrary.Vector2D.Y.get -> int
abstract ParquetClassLibrary.Maps.MapModel.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
abstract ParquetClassLibrary.Maps.MapModel.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
const ParquetClassLibrary.Beings.PronounGroup.DefaultKey = "they/them" -> string
const ParquetClassLibrary.Beings.PronounGroup.DeterminerTag = "|their|" -> string
const ParquetClassLibrary.Beings.PronounGroup.ObjectiveTag = "|them|" -> string
const ParquetClassLibrary.Beings.PronounGroup.PossessiveTag = "|theirs|" -> string
const ParquetClassLibrary.Beings.PronounGroup.ReflexiveTag = "|themselves|" -> string
const ParquetClassLibrary.Beings.PronounGroup.SubjectiveTag = "|they|" -> string
const ParquetClassLibrary.Crafts.StrikePanelGrid.PanelsPerPatternHeight = 4 -> int
const ParquetClassLibrary.Crafts.StrikePanelGrid.PanelsPerPatternWidth = 4 -> int
const ParquetClassLibrary.Delimiters.DimensionalDelimiter = "×" -> string
const ParquetClassLibrary.Delimiters.DimensionalTerminator = "≡" -> string
const ParquetClassLibrary.Delimiters.ElementDelimiter = "–" -> string
const ParquetClassLibrary.Delimiters.InternalDelimiter = "·" -> string
const ParquetClassLibrary.Delimiters.NameDelimiter = "§" -> string
const ParquetClassLibrary.Delimiters.PrimaryDelimiter = "," -> string
const ParquetClassLibrary.Delimiters.PronounDelimiter = "|" -> string
const ParquetClassLibrary.Delimiters.SecondaryDelimiter = "∟" -> string
const ParquetClassLibrary.Items.ItemModel.DefaultStackMax = 999 -> int
const ParquetClassLibrary.Maps.MapChunkModel.ParquetsPerChunkDimension = 16 -> int
const ParquetClassLibrary.Maps.MapRegionModel.ParquetsPerRegionDimension = 64 -> int
const ParquetClassLibrary.Maps.MapRegionSketch.ChunksPerRegionDimension = 4 -> int
const ParquetClassLibrary.Parquets.BlockModel.DefaultMaxToughness = 10 -> int
const ParquetClassLibrary.Parquets.BlockModel.LowestPossibleToughness = 0 -> int
const ParquetClassLibrary.Scripts.Commands.Alert = "A" -> string
const ParquetClassLibrary.Scripts.Commands.CallCharacter = "C" -> string
const ParquetClassLibrary.Scripts.Commands.ClearFlag = "!" -> string
const ParquetClassLibrary.Scripts.Commands.GiveItem = "I" -> string
const ParquetClassLibrary.Scripts.Commands.GiveQuest = "Q" -> string
const ParquetClassLibrary.Scripts.Commands.Jump = "J" -> string
const ParquetClassLibrary.Scripts.Commands.JumpIf = "F" -> string
const ParquetClassLibrary.Scripts.Commands.None = "" -> string
const ParquetClassLibrary.Scripts.Commands.Put = "P" -> string
const ParquetClassLibrary.Scripts.Commands.Say = "S" -> string
const ParquetClassLibrary.Scripts.Commands.SetBehavior = "B" -> string
const ParquetClassLibrary.Scripts.Commands.SetDialogue = "D" -> string
const ParquetClassLibrary.Scripts.Commands.SetFlag = "=" -> string
const ParquetClassLibrary.Scripts.Commands.SetPronoun = "R" -> string
const ParquetClassLibrary.Scripts.Commands.ShowLocation = "L" -> string
override ParquetClassLibrary.Beings.BeingStatus.ToString() -> string
override ParquetClassLibrary.Beings.PronounGroup.ToString() -> string
override ParquetClassLibrary.Biomes.BiomeRecipe.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
override ParquetClassLibrary.Crafts.StrikePanel.Equals(object obj) -> bool
override ParquetClassLibrary.Crafts.StrikePanel.GetHashCode() -> int
override ParquetClassLibrary.Crafts.StrikePanel.ToString() -> string
override ParquetClassLibrary.Games.GameModel.ToString() -> string
override ParquetClassLibrary.GridConverter<TElement, TGrid>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override ParquetClassLibrary.GridConverter<TElement, TGrid>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override ParquetClassLibrary.Items.Inventory.ToString() -> string
override ParquetClassLibrary.Items.InventorySlot.ToString() -> string
override ParquetClassLibrary.Items.ItemModel.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
override ParquetClassLibrary.Location.Equals(object obj) -> bool
override ParquetClassLibrary.Location.GetHashCode() -> int
override ParquetClassLibrary.Location.ToString() -> string
override ParquetClassLibrary.Maps.ChunkDetail.Equals(object obj) -> bool
override ParquetClassLibrary.Maps.ChunkDetail.GetHashCode() -> int
override ParquetClassLibrary.Maps.ChunkDetail.ToString() -> string
override ParquetClassLibrary.Maps.MapChunkModel.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
override ParquetClassLibrary.Maps.MapChunkModel.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
override ParquetClassLibrary.Maps.MapChunkModel.ToString() -> string
override ParquetClassLibrary.Maps.MapModel.ToString() -> string
override ParquetClassLibrary.Maps.MapRegionModel.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
override ParquetClassLibrary.Maps.MapRegionModel.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
override ParquetClassLibrary.Maps.MapRegionModel.ToString() -> string
override ParquetClassLibrary.Maps.MapRegionSketch.DimensionsInParquets.get -> ParquetClassLibrary.Vector2D
override ParquetClassLibrary.Maps.MapRegionSketch.ParquetDefinitions.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
override ParquetClassLibrary.Maps.MapRegionSketch.ToString() -> string
override ParquetClassLibrary.Model.Equals(object obj) -> bool
override ParquetClassLibrary.Model.GetHashCode() -> int
override ParquetClassLibrary.Model.ToString() -> string
override ParquetClassLibrary.ModelCollection<TModel>.ToString() -> string
override ParquetClassLibrary.ModelID.Equals(object obj) -> bool
override ParquetClassLibrary.ModelID.GetHashCode() -> int
override ParquetClassLibrary.ModelID.ToString() -> string
override ParquetClassLibrary.ModelTag.ToString() -> string
override ParquetClassLibrary.Parquets.ParquetModel.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
override ParquetClassLibrary.Parquets.ParquetStack.Equals(object obj) -> bool
override ParquetClassLibrary.Parquets.ParquetStack.GetHashCode() -> int
override ParquetClassLibrary.Parquets.ParquetStack.ToString() -> string
override ParquetClassLibrary.Parquets.ParquetStatus.Equals(object obj) -> bool
override ParquetClassLibrary.Parquets.ParquetStatus.GetHashCode() -> int
override ParquetClassLibrary.Parquets.ParquetStatus.ToString() -> string
override ParquetClassLibrary.Range<TElement>.Equals(object obj) -> bool
override ParquetClassLibrary.Range<TElement>.GetHashCode() -> int
override ParquetClassLibrary.Range<TElement>.ToString() -> string
override ParquetClassLibrary.RecipeElement.Equals(object obj) -> bool
override ParquetClassLibrary.RecipeElement.GetHashCode() -> int
override ParquetClassLibrary.RecipeElement.ToString() -> string
override ParquetClassLibrary.Rooms.MapSpace.Equals(object obj) -> bool
override ParquetClassLibrary.Rooms.MapSpace.GetHashCode() -> int
override ParquetClassLibrary.Rooms.MapSpace.ToString() -> string
override ParquetClassLibrary.Rooms.MapSpaceCollection.ToString() -> string
override ParquetClassLibrary.Rooms.Room.Equals(object obj) -> bool
override ParquetClassLibrary.Rooms.Room.GetHashCode() -> int
override ParquetClassLibrary.Rooms.RoomCollection.ToString() -> string
override ParquetClassLibrary.Scripts.InteractionStatus.ToString() -> string
override ParquetClassLibrary.Scripts.ScriptNode.ToString() -> string
override ParquetClassLibrary.SeriesConverter<TElement, TCollection>.ConvertFromString(string inText, CsvHelper.IReaderRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> object
override ParquetClassLibrary.SeriesConverter<TElement, TCollection>.ConvertToString(object inValue, CsvHelper.IWriterRow inRow, CsvHelper.Configuration.MemberMapData inMemberMapData) -> string
override ParquetClassLibrary.Vector2D.Equals(object obj) -> bool
override ParquetClassLibrary.Vector2D.GetHashCode() -> int
override ParquetClassLibrary.Vector2D.ToString() -> string
static ParquetClassLibrary.All.Beings.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Beings.BeingModel>
static ParquetClassLibrary.All.Biomes.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Biomes.BiomeRecipe>
static ParquetClassLibrary.All.Blocks.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.BlockModel>
static ParquetClassLibrary.All.Characters.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Beings.CharacterModel>
static ParquetClassLibrary.All.Clear() -> void
static ParquetClassLibrary.All.Collectibles.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.CollectibleModel>
static ParquetClassLibrary.All.CollectionsHaveBeenInitialized.get -> bool
static ParquetClassLibrary.All.CraftingRecipes.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Crafts.CraftingRecipe>
static ParquetClassLibrary.All.Critters.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Beings.CritterModel>
static ParquetClassLibrary.All.Floors.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.FloorModel>
static ParquetClassLibrary.All.Furnishings.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.FurnishingModel>
static ParquetClassLibrary.All.Games.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Games.GameModel>
static ParquetClassLibrary.All.GetIDRangeForType(ParquetClassLibrary.Model inModel) -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.All.GetIDRangeForType(ParquetClassLibrary.ModelID inID) -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.All.GetIDRangeForType(System.Type inModelType) -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.All.InitializeCollections(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.PronounGroup> inPronouns, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.CharacterModel> inCharacters, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.CritterModel> inCritters, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Biomes.BiomeRecipe> inBiomes, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Crafts.CraftingRecipe> inCraftingRecipes, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Games.GameModel> inGames, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Scripts.InteractionModel> inInteractions, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Maps.MapModel> inMaps, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.FloorModel> inFloors, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.BlockModel> inBlocks, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.FurnishingModel> inFurnishings, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Parquets.CollectibleModel> inCollectibles, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Rooms.RoomRecipe> inRoomRecipes, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Scripts.ScriptModel> inScripts, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Items.ItemModel> inItems) -> void
static ParquetClassLibrary.All.Interactions.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Scripts.InteractionModel>
static ParquetClassLibrary.All.Items.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Items.ItemModel>
static ParquetClassLibrary.All.LoadFromCSVs() -> bool
static ParquetClassLibrary.All.Maps.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Maps.MapModel>
static ParquetClassLibrary.All.Parquets.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Parquets.ParquetModel>
static ParquetClassLibrary.All.ProjectDirectory.get -> string
static ParquetClassLibrary.All.ProjectDirectory.set -> void
static ParquetClassLibrary.All.PronounGroups.get -> System.Collections.Generic.IReadOnlyCollection<ParquetClassLibrary.Beings.PronounGroup>
static ParquetClassLibrary.All.RoomRecipes.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Rooms.RoomRecipe>
static ParquetClassLibrary.All.SaveToCSVs() -> bool
static ParquetClassLibrary.All.Scripts.get -> ParquetClassLibrary.ModelCollection<ParquetClassLibrary.Scripts.ScriptModel>
static ParquetClassLibrary.Beings.PronounGroup.GetFilePath() -> string
static ParquetClassLibrary.Beings.PronounGroup.GetRecords() -> System.Collections.Generic.HashSet<ParquetClassLibrary.Beings.PronounGroup>
static ParquetClassLibrary.Beings.PronounGroup.PutRecords(System.Collections.Generic.IEnumerable<ParquetClassLibrary.Beings.PronounGroup> inGroups) -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.GetFilePath() -> string
static ParquetClassLibrary.Biomes.BiomeConfiguration.GetRecord() -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.LandThreshold.get -> int
static ParquetClassLibrary.Biomes.BiomeConfiguration.LandThresholdFactor.get -> double
static ParquetClassLibrary.Biomes.BiomeConfiguration.LandThresholdFactor.set -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.LiquidThreshold.get -> int
static ParquetClassLibrary.Biomes.BiomeConfiguration.LiquidThresholdFactor.get -> double
static ParquetClassLibrary.Biomes.BiomeConfiguration.LiquidThresholdFactor.set -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.PutRecord() -> void
static ParquetClassLibrary.Biomes.BiomeConfiguration.RoomThreshold.get -> int
static ParquetClassLibrary.Biomes.BiomeConfiguration.RoomThresholdFactor.get -> double
static ParquetClassLibrary.Biomes.BiomeConfiguration.RoomThresholdFactor.set -> void
static ParquetClassLibrary.Biomes.BiomeRecipe.None.get -> ParquetClassLibrary.Biomes.BiomeRecipe
static ParquetClassLibrary.Crafts.CraftConfiguration.GetFilePath() -> string
static ParquetClassLibrary.Crafts.CraftConfiguration.GetRecord() -> void
static ParquetClassLibrary.Crafts.CraftConfiguration.IngredientCount.get -> ParquetClassLibrary.Range<int>
static ParquetClassLibrary.Crafts.CraftConfiguration.IngredientCount.set -> void
static ParquetClassLibrary.Crafts.CraftConfiguration.ProductCount.get -> ParquetClassLibrary.Range<int>
static ParquetClassLibrary.Crafts.CraftConfiguration.ProductCount.set -> void
static ParquetClassLibrary.Crafts.CraftConfiguration.PutRecord() -> void
static ParquetClassLibrary.Crafts.CraftingRecipe.NotCraftable.get -> ParquetClassLibrary.Crafts.CraftingRecipe
static ParquetClassLibrary.Crafts.StrikePanel.operator !=(ParquetClassLibrary.Crafts.StrikePanel inStrikePanel1, ParquetClassLibrary.Crafts.StrikePanel inStrikePanel2) -> bool
static ParquetClassLibrary.Crafts.StrikePanel.operator ==(ParquetClassLibrary.Crafts.StrikePanel inStrikePanel1, ParquetClassLibrary.Crafts.StrikePanel inStrikePanel2) -> bool
static ParquetClassLibrary.Crafts.StrikePanelArrayExtensions.IsValidPosition(this ParquetClassLibrary.Crafts.StrikePanel[,] inStrikePanels, ParquetClassLibrary.Vector2D inPosition) -> bool
static ParquetClassLibrary.Crafts.StrikePanelGrid.Empty.get -> ParquetClassLibrary.Crafts.StrikePanelGrid
static ParquetClassLibrary.Location.operator !=(ParquetClassLibrary.Location inLocation1, ParquetClassLibrary.Location inLocation2) -> bool
static ParquetClassLibrary.Location.operator ==(ParquetClassLibrary.Location inLocation1, ParquetClassLibrary.Location inLocation2) -> bool
static ParquetClassLibrary.Maps.ChunkDetail.operator !=(ParquetClassLibrary.Maps.ChunkDetail inChunkType1, ParquetClassLibrary.Maps.ChunkDetail inChunkType2) -> bool
static ParquetClassLibrary.Maps.ChunkDetail.operator ==(ParquetClassLibrary.Maps.ChunkDetail inChunkType1, ParquetClassLibrary.Maps.ChunkDetail inChunkType2) -> bool
static ParquetClassLibrary.Maps.MapAnalysis.CheckExitConsistency<TMapType>(ParquetClassLibrary.ModelID inRegionID) -> System.Collections.Generic.List<string>
static ParquetClassLibrary.Maps.MapChunkModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Maps.MapChunkModel.Empty.get -> ParquetClassLibrary.Maps.MapChunkModel
static ParquetClassLibrary.Maps.MapRegionModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Maps.MapRegionSketch.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Maps.MapRegionSketch.DimensionsInChunks.get -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Model.operator !=(ParquetClassLibrary.Model inModel1, ParquetClassLibrary.Model inModel2) -> bool
static ParquetClassLibrary.Model.operator ==(ParquetClassLibrary.Model inModel1, ParquetClassLibrary.Model inModel2) -> bool
static ParquetClassLibrary.ModelCollection.GetFilePath<TModel>() -> string
static ParquetClassLibrary.ModelID.implicit operator ParquetClassLibrary.ModelID(int inValue) -> ParquetClassLibrary.ModelID
static ParquetClassLibrary.ModelID.implicit operator int(ParquetClassLibrary.ModelID inIDentifier) -> int
static ParquetClassLibrary.ModelID.operator !=(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator <(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator <=(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator ==(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator >(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelID.operator >=(ParquetClassLibrary.ModelID inIDentifier1, ParquetClassLibrary.ModelID inIDentifier2) -> bool
static ParquetClassLibrary.ModelIDGrid.Empty.get -> ParquetClassLibrary.ModelIDGrid
static ParquetClassLibrary.ModelTag.implicit operator ParquetClassLibrary.ModelTag(string inValue) -> ParquetClassLibrary.ModelTag
static ParquetClassLibrary.ModelTag.implicit operator string(ParquetClassLibrary.ModelTag inTag) -> string
static ParquetClassLibrary.Parquets.BlockModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.CollectibleModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.FloorModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.FurnishingModel.Bounds.get -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static ParquetClassLibrary.Parquets.ParquetStack.Empty.get -> ParquetClassLibrary.Parquets.ParquetStack
static ParquetClassLibrary.Parquets.ParquetStack.operator !=(ParquetClassLibrary.Parquets.ParquetStack inStack1, ParquetClassLibrary.Parquets.ParquetStack inStack2) -> bool
static ParquetClassLibrary.Parquets.ParquetStack.operator ==(ParquetClassLibrary.Parquets.ParquetStack inStack1, ParquetClassLibrary.Parquets.ParquetStack inStack2) -> bool
static ParquetClassLibrary.Parquets.ParquetStackArrayExtensions.IsValidPosition(this ParquetClassLibrary.Parquets.ParquetStack[,] inSubregion, ParquetClassLibrary.Vector2D inPosition) -> bool
static ParquetClassLibrary.Parquets.ParquetStackGrid.Empty.get -> ParquetClassLibrary.Parquets.ParquetStackGrid
static ParquetClassLibrary.Parquets.ParquetStatus.Unused.get -> ParquetClassLibrary.Parquets.ParquetStatus
static ParquetClassLibrary.Parquets.ParquetStatus.operator !=(ParquetClassLibrary.Parquets.ParquetStatus inStatus1, ParquetClassLibrary.Parquets.ParquetStatus inStatus2) -> bool
static ParquetClassLibrary.Parquets.ParquetStatus.operator ==(ParquetClassLibrary.Parquets.ParquetStatus inStatus1, ParquetClassLibrary.Parquets.ParquetStatus inStatus2) -> bool
static ParquetClassLibrary.Parquets.ParquetStatusArrayExtensions.IsValidPosition(this ParquetClassLibrary.Parquets.ParquetStatus[,] inSubregion, ParquetClassLibrary.Vector2D inPosition) -> bool
static ParquetClassLibrary.Parquets.ParquetStatusGrid.Empty.get -> ParquetClassLibrary.Parquets.ParquetStatusGrid
static ParquetClassLibrary.Precondition.AreInRange(System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inEnumerable, ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.AreInRange(System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelID> inEnumerable, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBoundsCollection, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.ModelID inID, ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.ModelID inID, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBoundsCollection, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inInnerBounds, ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inOuterBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(ParquetClassLibrary.Range<ParquetClassLibrary.ModelID> inInnerBounds, System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>> inBoundsCollection, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsInRange(int inInt, ParquetClassLibrary.Range<int> inBounds, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsNotNone(ParquetClassLibrary.ModelID inID, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.IsNotNull(object inReference, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.IsNotNullOrEmpty(string inString, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsNotNullOrEmpty<TElement>(System.Collections.Generic.IEnumerable<TElement> inEnumerable, string inArgumentName) -> void
static ParquetClassLibrary.Precondition.IsOfType<TToCheck, TTarget>(string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.MustBeNonNegative(int inNumber, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Precondition.MustBePositive(int inNumber, string inArgumentName = "Argument") -> void
static ParquetClassLibrary.Range<TElement>.operator !=(ParquetClassLibrary.Range<TElement> inRange1, ParquetClassLibrary.Range<TElement> inRange2) -> bool
static ParquetClassLibrary.Range<TElement>.operator ==(ParquetClassLibrary.Range<TElement> inRange1, ParquetClassLibrary.Range<TElement> inRange2) -> bool
static ParquetClassLibrary.RangeCollectionExtensions.ContainsRange<TElement>(this System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<TElement>> inRangeCollection, ParquetClassLibrary.Range<TElement> inRange) -> bool
static ParquetClassLibrary.RangeCollectionExtensions.ContainsValue<TElement>(this System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<TElement>> inRangeCollection, TElement inValue) -> bool
static ParquetClassLibrary.RangeCollectionExtensions.IsValid<TElement>(this System.Collections.Generic.IEnumerable<ParquetClassLibrary.Range<TElement>> inRangeCollection) -> bool
static ParquetClassLibrary.RecipeElement.operator !=(ParquetClassLibrary.RecipeElement inElement1, ParquetClassLibrary.RecipeElement inElement2) -> bool
static ParquetClassLibrary.RecipeElement.operator ==(ParquetClassLibrary.RecipeElement inElement1, ParquetClassLibrary.RecipeElement inElement2) -> bool
static ParquetClassLibrary.Rooms.MapSpace.operator !=(ParquetClassLibrary.Rooms.MapSpace inSpace1, ParquetClassLibrary.Rooms.MapSpace inSpace2) -> bool
static ParquetClassLibrary.Rooms.MapSpace.operator ==(ParquetClassLibrary.Rooms.MapSpace inSpace1, ParquetClassLibrary.Rooms.MapSpace inSpace2) -> bool
static ParquetClassLibrary.Rooms.MapSpaceCollection.Empty.get -> ParquetClassLibrary.Rooms.MapSpaceCollection
static ParquetClassLibrary.Rooms.MapSpaceCollection.implicit operator ParquetClassLibrary.Rooms.MapSpaceCollection(System.Collections.Generic.HashSet<ParquetClassLibrary.Rooms.MapSpace> inSpaces) -> ParquetClassLibrary.Rooms.MapSpaceCollection
static ParquetClassLibrary.Rooms.MapSpaceCollection.implicit operator System.Collections.Generic.HashSet<ParquetClassLibrary.Rooms.MapSpace>(ParquetClassLibrary.Rooms.MapSpaceCollection inSpaces) -> System.Collections.Generic.HashSet<ParquetClassLibrary.Rooms.MapSpace>
static ParquetClassLibrary.Rooms.Room.operator !=(ParquetClassLibrary.Rooms.Room inRoom1, ParquetClassLibrary.Rooms.Room inRoom2) -> bool
static ParquetClassLibrary.Rooms.Room.operator ==(ParquetClassLibrary.Rooms.Room inRoom1, ParquetClassLibrary.Rooms.Room inRoom2) -> bool
static ParquetClassLibrary.Rooms.RoomCollection.CreateFromSubregion(ParquetClassLibrary.Parquets.ParquetStackGrid inSubregion) -> ParquetClassLibrary.Rooms.RoomCollection
static ParquetClassLibrary.Rooms.RoomConfiguration.GetFilePath() -> string
static ParquetClassLibrary.Rooms.RoomConfiguration.GetRecord() -> void
static ParquetClassLibrary.Rooms.RoomConfiguration.MaxWalkableSpaces.get -> int
static ParquetClassLibrary.Rooms.RoomConfiguration.MaxWalkableSpaces.set -> void
static ParquetClassLibrary.Rooms.RoomConfiguration.MinPerimeterSpaces.get -> int
static ParquetClassLibrary.Rooms.RoomConfiguration.MinWalkableSpaces.get -> int
static ParquetClassLibrary.Rooms.RoomConfiguration.MinWalkableSpaces.set -> void
static ParquetClassLibrary.Rooms.RoomConfiguration.PutRecord() -> void
static ParquetClassLibrary.Scripts.ScriptNode.implicit operator ParquetClassLibrary.Scripts.ScriptNode(string inValue) -> ParquetClassLibrary.Scripts.ScriptNode
static ParquetClassLibrary.Scripts.ScriptNode.implicit operator string(ParquetClassLibrary.Scripts.ScriptNode inNode) -> string
static ParquetClassLibrary.Vector2D.operator !=(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> bool
static ParquetClassLibrary.Vector2D.operator *(int inScalar, ParquetClassLibrary.Vector2D inVector) -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Vector2D.operator +(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Vector2D.operator -(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> ParquetClassLibrary.Vector2D
static ParquetClassLibrary.Vector2D.operator ==(ParquetClassLibrary.Vector2D inVector1, ParquetClassLibrary.Vector2D inVector2) -> bool
static readonly ParquetClassLibrary.All.AllDefinedIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.BeingIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.BiomeIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.BlockIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CharacterIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CollectibleIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CraftingRecipeIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.CritterIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.FloorIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.FurnishingIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.GameIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.InteractionIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.ItemIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.MapChunkIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.MapIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.MapRegionIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.ParquetIDs -> System.Collections.Generic.IReadOnlyList<ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>>
static readonly ParquetClassLibrary.All.RoomRecipeIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.All.ScriptIDs -> ParquetClassLibrary.Range<ParquetClassLibrary.ModelID>
static readonly ParquetClassLibrary.AssemblyInfo.LibraryVersion -> string
static readonly ParquetClassLibrary.Beings.PronounGroup.DefaultGroup -> ParquetClassLibrary.Beings.PronounGroup
static readonly ParquetClassLibrary.Crafts.StrikePanel.Unused -> ParquetClassLibrary.Crafts.StrikePanel
static readonly ParquetClassLibrary.Maps.ChunkDetail.None -> ParquetClassLibrary.Maps.ChunkDetail
static readonly ParquetClassLibrary.Maps.MapRegionModel.Empty -> ParquetClassLibrary.Maps.MapRegionModel
static readonly ParquetClassLibrary.Maps.MapRegionSketch.Empty -> ParquetClassLibrary.Maps.MapRegionSketch
static readonly ParquetClassLibrary.ModelCollection.Default -> ParquetClassLibrary.ModelCollection
static readonly ParquetClassLibrary.ModelCollection<TModel>.Default -> ParquetClassLibrary.ModelCollection<TModel>
static readonly ParquetClassLibrary.ModelID.None -> ParquetClassLibrary.ModelID
static readonly ParquetClassLibrary.ModelTag.None -> ParquetClassLibrary.ModelTag
static readonly ParquetClassLibrary.Range<TElement>.None -> ParquetClassLibrary.Range<TElement>
static readonly ParquetClassLibrary.RecipeElement.None -> ParquetClassLibrary.RecipeElement
static readonly ParquetClassLibrary.Rooms.MapSpace.Empty -> ParquetClassLibrary.Rooms.MapSpace
static readonly ParquetClassLibrary.Scripts.ScriptNode.None -> ParquetClassLibrary.Scripts.ScriptNode
static readonly ParquetClassLibrary.Vector2D.East -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.North -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.South -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.Unit -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.West -> ParquetClassLibrary.Vector2D
static readonly ParquetClassLibrary.Vector2D.Zero -> ParquetClassLibrary.Vector2D
virtual ParquetClassLibrary.Model.GetAllTags() -> System.Collections.Generic.IEnumerable<ParquetClassLibrary.ModelTag>
